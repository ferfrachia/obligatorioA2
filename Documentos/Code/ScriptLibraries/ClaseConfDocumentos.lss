'++LotusScript Development Environment:2:5:(Options):0:74
Option Public
Option Declare

Use "NumeradorClient"
Use "FuncionesGenerales"
Use "VectorClass 2.05"
Use "BasesPorCantidad"



'++LotusScript Development Environment:2:5:(Forward):0:1
Declare Public Class ConfDocumentos

'++LotusScript Development Environment:2:5:(Declarations):0:10
'NOMBRE DOCUMENTO DE PERFIL
Private Const NOMBRE_DOC_PERFIL					= "ConfDocumentos"
Private Const NOMBRE_DOC_PERFIL_IGDOC			= "IGDocConfig"

' CONSTANTES CON LOS NOMBRES DE LOS CAMPOS
'configuracion general
Private Const CAMPO_CONFIG_PATH_DB_PDD			= "sPathDBPDD"
Private Const CAMPO_CONFIG_PATH_DB_AUDITORIA_PDD= "sPathDBAuditoriaPDD"
Private Const CAMPO_CONFIG_PATH_DB_MOTOR_PDD	= "sPathDBMotorPDD"
Private Const CAMPO_CONFIG_HOST_SERVER			= "sHost"
Private Const CAMPO_CONFIG_TAM_MAX_ANEXOS		= "sTamMaxAnexos"
Private Const CAMPO_CONFIG_AUDITAR				= "chAuditar"
Private Const CAMPO_CONFIG_PUB_ESTRICTA			= "chPubEstricta"
Private Const CAMPO_CONFIG_PATH_NUMERACION		= "sPathDBNumeracionPDD"
Private Const CAMPO_CONFIG_CA_CERT				= "sCAcert"

'Interoperabilidad
Private Const CAMPO_CONFIG_CLAVE_INTER			= "sClaveInter"
Private Const CAMPO_CONFIG_SERVIDOR_INTER		= "sServidorInter"
Private Const CAMPO_CONFIG_HOST_INTER			= "sHostInter"
Private Const CAMPO_CONFIG_RUTA_INTER			= "sRutaInter"

'Numeracion
public Const CAMPO_CONFIG_NUM_INCISO			= "inciso"
public Const CAMPO_CONFIG_NUM_UNIDAD			= "uUnidad"
Public Const CAMPO_CONFIG_NUM_UNICA				= "cNumeracionUnica"
Public Const CAMPO_CONFIG_NUM_FORMATO			= "sFormato"
Public Const CAMPO_CONFIG_NUM_CLAVE_NUM			= "sClaveNum"
Public Const CAMPO_CONFIG_NUM_ANIO				= "cUsaAnio"
Public Const CLAVE_NUMERADOR_DOC				= "IGDOC_PDD_yy"

'Archivos
Private Const CAMPO_CONFIG_PATH_ARCHIVOS		= "sPathDBArchivosPDD"

'Auditoria
Private Const CAMPO_CONFIG_AUDITORIA_CANT_DIAS 	= "nTiempoVidaAuditoria"
Private Const CAMPO_CONFIG_AUDITORIA_CLAVE		= "sClaveCreacionAuditoria"
Private Const CAMPO_CONFIG_AUDITORIA_FECHA_C	= "dFechaCreacionAuditoria"

'WS2 Portlet
Private Const CAMPO_WSDOC_LISTA 				= "sListaCamposWSDoc"
Private Const CAMPO_WSDOC_TAGATT 				= "sTagArchAttWSDoc"
Private Const CAMPO_WSDOC_VISTA 				= "sVistaWSDoc"

'WS3 Portlet
Private Const CAMPO_WSVIS_LISTA 				= "sListaCamposWSVis"
Private Const CAMPO_WSVIS_VISTAFT 				= "sVistaFTWSVis"
Private Const CAMPO_WSVIS_VISTAVER 				= "sVistaVerWSVis"
Private Const CAMPO_WSVIS_TAMPAG 				= "nTamPagWSVis"
' valores checkbox numeracion
public Const NUM_CHECK_TRUE						="1"
public Const NUM_CHECK_FALSE					="0"


' CONSTANTES INTEROPERABILIDAD
Private Const KEY_INTEROP_MOTOR					= "MOTOR_PUB_DOC"
Private Const KEY_INTEROP_BASEDOC				= "BASE_DOC"
Private Const KEY_INTEROP_ARCHIVO				= "ARCHIVO_DOC"
Private Const KEY_INTEROP_NUMDOC				= "NUMERACION_DOC"
Private Const KEY_INTEROP_PORTAL				= "PORTAL"
Private Const KEY_INTEROP_ORG					= "ORGANIZACION"
Private Const KEY_INTEROP_AUDITORIA				= ""


'CONSTANTES IGDOC
Private Const CAMPO_IGDOC_PROTOCOLO				="rProtocolo"
Private Const CAMPO_IGDOC_PUERTO				="sPuerto"
Private Const CAMPO_IGDOC_HOST_SERVER			="sHost"
Private Const CAMPO_IGDOC_MODULOS_INSTALADOS	="sModulos"
Private Const CAMPO_IGDOC_EMAIL_INSTITUCIONAL	="sMail"
Private Const CAMPO_IGDOC_INSTITUCION			="sInstitucion"
Private Const CAMPO_IGDOC_PATH_SESION			="sPathSesion"
Private Const CAMPO_IGDOC_PATH_DOJO				="sPathDojo"
Private Const CAMPO_IGDOC_PATH_CERTIFICADO		="sPathCertificado"
Private Const CAMPO_IGDOC_PATH_ADMINISTRACION	="sPathAdmin"
Private Const CAMPO_IGDOC_ADMINISTRADORES		="sAdministradores"
Private Const CAMPO_IGDOC_URL_CRL				="scrlPath"
Private Const CAMPO_IGDOC_PATH_PORTAL			="sPathPortal"
Private Const CAMPO_IGDOC_DIR_INSTALACION		="sDirInstalacion"
Private Const CAMPO_IGDOC_PATH_TELEFONIA		="sPathTelefonia"
Private Const CAMPO_IGDOC_PATH_AVISOS			="sPathAvisos"
Private Const CAMPO_IGDOC_SKIN_DOJO				="sSkinDojo"
Private Const CAMPO_IGDOC_PATH_IMAGENES			="sPathImagenes"
Private Const CAMPO_IGDOC_CLAVES_COL			="sClave"
Private Const CAMPO_IGDOC_URL_COL				="sUrl"

'CONSTANTES AUXILIARES
Public Const CAMPO_DEF_DOC_FORMATO_NUM			= "sNumeracion"
Public Const VISTA_DEF_DOC_COD					= "vDefDocsxCodigo"
Private Const ERROR_NUMCLIENT_NUMERATOR_NOT_FOUND = 16013



'******************************************************************************************************************	
'*
'*									CLASS <CONFDOCUMENTOS>
'*
'******************************************************************************************************************	

'******************************************************************************************************************
Public Class ConfDocumentos
	'******************************************************************************************************************	
	
	'MIEMBROS PRIVADOS
	Private ses As NotesSession
	Private docConfiguracion As NotesDocument
	
	'******************************************************************************************************************
	' CONSTRUCTOR	
	'******************************************************************************************************************
	Public Sub new()
		On Error Goto HANDLER
		
		'Referencio Variables globales
		Set ses = New NotesSession		
		
		'Se carga el documento de profile
		Set docConfiguracion = ses.CurrentDatabase.GetProfileDocument(NOMBRE_DOC_PERFIL)
		
		Exit Sub
HANDLER:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION , "Clase ConfDocumentos - MÃ©todo new", Erl, "")
		Exit Sub
	End Sub
	'******************************************************************************************************************
	'FUNCIONES Y PROCEDIMIENTOS PRIVADOS	
	'******************************************************************************************************************
	Public Property Set PathDBPDD As String
		On Error Goto handler
		'no se usa, cambio para la interoperabilidad
		'****docConfiguracion.ReplaceItemValue CAMPO_CONFIG_PATH_DB_PDD, Cstr(PathDBPDD)
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION , "Clase ConfDocumentos - Propiedad Set PathDBPDD", Erl, "")
		Exit Property
	End Property
	
	'*****************************************************************************************************************
	
	Public Property Get PathDBPDD As String
		On Error Goto handler
		' se obtiene de la interoperabilidad de conf documentos
		Dim pos As Long
		If Me.ClaveInter.isMember(Ucase(KEY_INTEROP_BASEDOC), pos, False) Then 
			PathDBPDD = Me.RutaInter.getElement(pos)
		End If
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION , "Clase ConfDocumentos - Propiedad Get PathDBPDD", Erl, "")
		Exit Property
	End Property
	
	'*****************************************************************************************************************

	Public Property Get BasesCreadas As Vector
		On Error GoTo handler
		Set BasesCreadas = New Vector(0)
		BasesCreadas.Values = docConfiguracion.Getitemvalue(CAMPO_CONFIG_BASESCREADAS)
		
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION , "Clase ConfDocumentos - Propiedad Get BasesCreadas", Erl, "")
		Exit Property
	End Property
	'*****************************************************************************************************************
	
	Public Property Set BasesCreadas As Vector
		On Error GoTo handler
		Call docConfiguracion.Replaceitemvalue(CAMPO_CONFIG_BASESCREADAS, BasesCreadas.Values)
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION ,"Clase ConfDocumentos - Propiedad Set BasesCreadas", Erl, "")
		Exit Property
	End Property
	'*****************************************************************************************************************
	Public Property Get BasesCreadasIni As Vector
		On Error GoTo handler
		Set BasesCreadasIni = New Vector(0)
		BasesCreadasIni.Values = docConfiguracion.Getitemvalue(CAMPO_CONFIG_BASESCREADASINI)
		
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION ,"Clase ConfDocumentos - Propiedad Get BasesCreadasIni", Erl, "")
		Exit Property
	End Property
	'*****************************************************************************************************************
	
	Public Property Set BasesCreadasIni As Vector
		On Error GoTo handler
		Call docConfiguracion.Replaceitemvalue(CAMPO_CONFIG_BASESCREADASINI, BasesCreadasINI.Values)
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION ,"Clase ConfDocumentos - Propiedad Set BasesCreadasINI", Erl, "")
		Exit Property
	End Property	
	'*****************************************************************************************************************
	Public Property Get NumeradoresIni As Vector
		On Error GoTo handler
		Set NumeradoresIni = New Vector(0)
		NumeradoresIni.Values = docConfiguracion.Getitemvalue(CAMPO_CONFIG_NUMERADORES)
		
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION ,"Clase ConfDocumentos - Propiedad Get NumeradoresIni", Erl, "")
		Exit Property
	End Property
	'*****************************************************************************************************************
	
	Public Property Set NumeradoresIni As Vector
		On Error GoTo handler
		Call docConfiguracion.Replaceitemvalue(CAMPO_CONFIG_NUMERADORES, NumeradoresIni.Values)
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION ,"Clase ConfDocumentos - Propiedad Set NumeradoresIni", Erl, "")
		Exit Property
	End Property	
	'*****************************************************************************************************************
	Public Property Get NumerosIni As Vector
		On Error GoTo handler
		Set NumerosIni = New Vector(0)
		NumerosIni.Values = docConfiguracion.Getitemvalue(CAMPO_CONFIG_NUMEROS)
		
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION ,"Clase ConfDocumentos - Propiedad Get NumerosIni", Erl, "")
		Exit Property
	End Property
	'*****************************************************************************************************************
	
	Public Property Set NumerosIni As Vector
		On Error GoTo handler
		Call docConfiguracion.Replaceitemvalue(CAMPO_CONFIG_NUMEROS, NumerosIni.Values)
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION ,"Clase ConfDocumentos - Propiedad Set NumerosIni", Erl, "")
		Exit Property
	End Property				
	'*****************************************************************************************************************	
	Public Property Set PathDBAuditoriaPDD As String
		On Error Goto handler
		'no se usa, cambio para la interoperabilidad
		'****docConfiguracion.ReplaceItemValue CAMPO_CONFIG_PATH_DB_AUDITORIA_PDD, Cstr(PathDBAuditoriaPDD)
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION ,"Clase ConfDocumentos - Propiedad Set PathDBAuditoriaPDD", Erl, "")
		Exit Property
	End Property
	
	'*****************************************************************************************************************
	
	Public Property Get PathDBAuditoriaPDD As String
		On Error Goto handler
		'		PathDBAuditoriaPDD = Cstr(docConfiguracion.GetItemValue (CAMPO_CONFIG_PATH_DB_AUDITORIA_PDD)(0))
		Dim pos As Long
		If Me.ClaveInter.isMember(Ucase(KEY_INTEROP_AUDITORIA), pos, False) Then 
			PathDBAuditoriaPDD = Me.RutaInter.getElement(pos)
		End If
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION ,"Clase ConfDocumentos - Propiedad Get PathDBAuditoriaPDD", Erl, "")
		Exit Property
	End Property		
	
	'*****************************************************************************************************************
	Public Property Set WSdocLista As String		
		On Error Goto handler
		docConfiguracion.ReplaceItemValue CAMPO_WSDOC_LISTA,WSdocLista	
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION ,"Clase ConfDocumentos - Propiedad Set WSdocLista", Erl, "")
		Exit Property
	End Property
	
	'*****************************************************************************************************************
	
	Public Property Get WSdocLista As String
		On Error Goto handler
		WSdocLista= Cstr(docConfiguracion.GetItemValue (CAMPO_WSDOC_LISTA)(0))
		
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION ,"Clase ConfDocumentos - Propiedad Get WSdocLista", Erl, "")
		Exit Property
	End Property		
	'*****************************************************************************************************************
	
	Public Property Set WSdocVista As String		
		On Error Goto handler
		docConfiguracion.ReplaceItemValue CAMPO_WSDOC_VISTA,WSdocVista	
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION ,"Clase ConfDocumentos - Propiedad Set WSdocVista", Erl, "")
		Exit Property
	End Property
	
	'*****************************************************************************************************************
	
	Public Property Get WSdocVista As String
		On Error Goto handler
		WSdocVista= Cstr(docConfiguracion.GetItemValue (CAMPO_WSDOC_VISTA)(0))
		
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION ,"Clase ConfDocumentos - Propiedad Get WSdocVista", Erl, "")
		Exit Property
	End Property			
	'*****************************************************************************************************************
	
	Public Property Set WSdocTagAtt As String		
		On Error Goto handler
		docConfiguracion.ReplaceItemValue CAMPO_WSDOC_TAGATT,WSdocTagAtt	
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION ,"Clase ConfDocumentos - Propiedad Set WSdocTagAtt", Erl, "")
		Exit Property
	End Property
	
	'*****************************************************************************************************************
	
	
	Public Property Get WSdocTagAtt As String
		On Error Goto handler
		WSdocTagAtt= Cstr(docConfiguracion.GetItemValue (CAMPO_WSDOC_TAGATT)(0))
		
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION ,"Clase ConfDocumentos - Propiedad Get WSdocTagAtt", Erl, "")
		Exit Property
	End Property			
	'*****************************************************************************************************************
	
	Public Property Set WSvisLista As String		
		On Error Goto handler
		docConfiguracion.ReplaceItemValue CAMPO_WSVIS_LISTA,WSvisLista	
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION ,"Clase ConfDocumentos - Propiedad Set WSvisLista", Erl, "")
		Exit Property
	End Property
		
		'*****************************************************************************************************************
		
	Public Property Get WSvisLista As String
		On Error Goto handler
		WSvisLista= Cstr(docConfiguracion.GetItemValue (CAMPO_WSVIS_LISTA)(0))
		
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION,"Clase ConfDocumentos - Propiedad Get WSvisLista", Erl, "")
		Exit Property
	End Property			
	'*****************************************************************************************************************
	
	Public Property Set WSvisVistaFT As String		
		On Error Goto handler
		docConfiguracion.ReplaceItemValue CAMPO_WSVIS_VISTAFT,WSvisVistaFT	
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION,"Clase ConfDocumentos - Propiedad Set WSvisVistaFT", Erl, "")
		Exit Property
	End Property
	
	'*****************************************************************************************************************
	
	Public Property Get WSvisVistaFT As String
		On Error Goto handler
		WSvisVistaFT= Cstr(docConfiguracion.GetItemValue (CAMPO_WSVIS_VISTAFT)(0))
		
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION,"Clase ConfDocumentos - Propiedad Get WSvisVistaFT", Erl, "")
		Exit Property
	End Property			
	'*****************************************************************************************************************	
	
	Public Property Set WSvisVistaVer As String		
		On Error Goto handler
		docConfiguracion.ReplaceItemValue CAMPO_WSVIS_VISTAVER,WSvisVistaVer	
		Exit Property 
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION,"Clase ConfDocumentos - Propiedad Set WSvisVistaVer", Erl, "")
		Exit Property
	End Property
	
	'*****************************************************************************************************************	
	
	Public Property Get WSvisVistaVer As String
		On Error Goto handler
		WSvisVistaVer= Cstr(docConfiguracion.GetItemValue (CAMPO_WSVIS_VISTAVER)(0))
		
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION,"Clase ConfDocumentos - Propiedad Get WSvisVistaVer", Erl, "")
		Exit Property
	End Property			
	'*****************************************************************************************************************		
	
	Public Property Set WSvisTamPag As Integer		
		On Error Goto handler
		docConfiguracion.ReplaceItemValue CAMPO_WSVIS_TAMPAG,Cint(WSvisTamPag)
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION,"Clase ConfDocumentos - Propiedad Set WSvisTamPag", Erl, "")
		Exit Property
	End Property
	
	'*****************************************************************************************************************	
	
	Public Property Get WSvisTamPag As Integer
		On Error Goto handler
		WSvisTamPag= docConfiguracion.GetItemValue (CAMPO_WSVIS_TAMPAG)(0)
		
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION,"Clase ConfDocumentos - Propiedad Get WSvisTamPag", Erl, "")		
		Exit Property
	End Property			
	'*****************************************************************************************************************			
	'*****************************************************************************************************************			
	Public Property Set PathDBMotorPDD As String
		On Error Goto handler
		'no se usa, cambio para interoperabilidad
		'docConfiguracion.ReplaceItemValue CAMPO_CONFIG_PATH_DB_MOTOR_PDD, Cstr(PathDBMotorPDD)
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION,"Clase ConfDocumentos - Propiedad Set PathDBMotorPDD", Erl, "")
		Exit Property		
	End Property
	
	'*****************************************************************************************************************
	
	Public Property Get PathDBMotorPDD As String
		On Error Goto handler
		Dim pos As Long
		If Me.ClaveInter.isMember(Ucase(KEY_INTEROP_MOTOR), pos, False) Then 
			PathDBMotorPDD = Me.RutaInter.getElement(pos)
		End If
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION,"Clase ConfDocumentos - Propiedad Get PathDBMotorPDD", Erl, "")
		Exit Property
	End Property
	'*****************************************************************************************************************
	
	Public Property Set PathDBNumeracionPDD As String
		On Error Goto handler
		'no se usa, cambio a la interoperabilidad
		'docConfiguracion.ReplaceItemValue  CAMPO_CONFIG_PATH_NUMERACION, Cstr(PathDBNumeracionPDD)
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION,"Clase ConfDocumentos - Propiedad Set PathDBNumeracionPDD", Erl, "")
		Exit Property		
	End Property
	
	'*****************************************************************************************************************
	
	Public Property Get PathDBNumeracionPDD As String
		On Error Goto handler
		'		PathDBNumeracionPDD = Cstr(docConfiguracion.GetItemValue ( CAMPO_CONFIG_PATH_NUMERACION)(0))
		Dim pos As Long
		If Me.ClaveInter.isMember(Ucase(KEY_INTEROP_NUMDOC), pos, False) Then 
			PathDBNumeracionPDD = Me.RutaInter.getElement(pos)
		End If
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION,"Clase ConfDocumentos - Propiedad Get PathDBNumeracionPDD", Erl, "")
		Exit Property
	End Property
	
	'******************************************************************************************************************	
	
	Public Property Set Host As String
		On Error Goto handler
		'no se usa, cambio a la interoperabilidad
		'docConfiguracion.ReplaceItemValue CAMPO_CONFIG_HOST_SERVER, Cstr(Host)
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION,"Clase ConfDocumentos - Propiedad Set Host", Erl, "")
		Exit Property
	End Property
	
	'******************************************************************************************************************	
	
	Public Property Get CantMBPorBase As Long
		On Error GoTo handler
		'no se usa, cambio a la interoperabilidad
		CantMBPorBase = docConfiguracion.Getitemvalue(CAMPO_CONFIG_CANTMBXBASE)(0) 
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION, "Clase ConfDocumentos - Propiedad Get CantMBPorBase", Erl, "")
		Exit Property
	End Property	
	
	'******************************************************************************************************************	
	
	Public Property Set CantMBPorBase As Long
		On Error GoTo handler
		'no se usa, cambio a la interoperabilidad
		docConfiguracion.ReplaceItemValue CAMPO_CONFIG_CANTMBXBASE, CLng(CantMBPorBase)
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION, "Clase ConfDocumentos - Propiedad Set CantMBPorBase", Erl, "")
		Exit Property
	End Property		
	'******************************************************************************************************************	
	
	Public Property get CantDocPorBase As Long
		On Error GoTo handler
		'no se usa, cambio a la interoperabilidad
		CantDocPorBase = docConfiguracion.Getitemvalue(CAMPO_CONFIG_CANTDOCXBASE)(0) 
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION,"Clase ConfDocumentos - Propiedad Get CantDocPorBase", Erl, "")
		Exit Property
	End Property	
	
	'******************************************************************************************************************	
	
	Public Property Set CantDocPorBase As long
		On Error GoTo handler
		'no se usa, cambio a la interoperabilidad
		docConfiguracion.ReplaceItemValue CAMPO_CONFIG_CANTDOCXBASE, clng(CantDocPorBase)
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION, "Clase ConfDocumentos - Propiedad Set CantDocPorBase", Erl, "")
		Exit Property
	End Property	
	'******************************************************************************************************************
	
	Public Property Get Host As String
		On Error Goto handler
		Host = Cstr(docConfiguracion.GetItemValue(CAMPO_CONFIG_HOST_SERVER)(0))
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION, "Clase ConfDocumentos - Propiedad Get Host", Erl, "")
		Exit Property
	End Property
	
	'******************************************************************************************************************
	Public Property Set TamMaxAnexos As String
		On Error Goto handler
		docConfiguracion.ReplaceItemValue CAMPO_CONFIG_TAM_MAX_ANEXOS, TamMaxAnexos
		Exit Property
handler:
		Msgbox "El error en TAMMAXANEXO es: " & Error & " " & Err & " " & Erl 
		'Call  RegistrarYGenerarError(NOMBRE_APLICACION, "Clase ConfDocumentos - Propiedad Get TamMaxAnexos","")
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION, "Clase ConfDocumentos - Propiedad Get TamMaxAnexos", Erl, "")
		Exit Property
	End Property
	'******************************************************************************************************************
	Public Property Get TamMaxAnexos As String
		On Error Goto handler
		TamMaxAnexos = docConfiguracion.GetItemValue(CAMPO_CONFIG_TAM_MAX_ANEXOS)(0)
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION, "Clase ConfDocumentos - Propiedad Get TamMaxAnexos", Erl, "")
		Exit Property
	End Property
	
	'******************************************************************************************************************
	
	Public Property Set RendimientoPor As String
		On Error GoTo handler
		docConfiguracion.ReplaceItemValue CAMPO_CONFIG_RENDIMIENTOPOR, CStr(RendimientoPor)
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION, "Clase ConfDocumentos - Propiedad Set RendimientoPor", Erl, "")
		Exit Property
	End Property
	
	'*****************************************************************************************************************
	
	Public Property Get RendimientoPor As String
		On Error GoTo handler
		RendimientoPor = CStr(docConfiguracion.GetItemValue (CAMPO_CONFIG_RENDIMIENTOPOR)(0))
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION, "Clase ConfDocumentos - Propiedad Get RendimientoPor", Erl, "")
		Exit Property
	End Property	
'******************************************************************************************************************
	
	Public Property Set CACert As String
		On Error Goto handler
		docConfiguracion.ReplaceItemValue CAMPO_CONFIG_CA_CERT, Cstr(CACert)
		Exit Property
handler:
		'Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfDocumentos - Propiedad Set CACert","")
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION,"Clase ConfDocumentos - Propiedad Set CACert", Erl, "")
		Exit Property
	End Property
	
'*****************************************************************************************************************
	
	Public Property Get CACert As String
		On Error Goto handler
		CACert = Cstr(docConfiguracion.GetItemValue (CAMPO_CONFIG_CA_CERT)(0))
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION,"Clase ConfDocumentos - Propiedad Get CACert", Erl, "")
		Exit Property
	End Property		
	
	'*****************************************************************************************************************
	
	Public Property Set Auditar As Boolean
		On Error Goto handler
		If Auditar Then
			docConfiguracion.ReplaceItemValue CAMPO_CONFIG_AUDITAR, NUM_CHECK_TRUE
		Else
			docConfiguracion.ReplaceItemValue CAMPO_CONFIG_AUDITAR, NUM_CHECK_FALSE
		End If
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION, "Clase ConfDocumentos - Propiedad Set Auditar", Erl, "")
		Exit Property
	End Property
	
'******************************************************************************************************************
	
	Public Property Get Auditar As Boolean
		On Error Goto handler
		If docConfiguracion.GetItemValue(CAMPO_CONFIG_AUDITAR)(0) = NUM_CHECK_TRUE Then 
			Auditar = True
		Else
			Auditar = False
		End If
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION, "Clase ConfDocumentos - Propiedad Get Auditar", Erl, "")
		Exit Property
	End Property
'*****************************************************************************************************************
	
	Public Property Set PubEstricta As Boolean
		On Error Goto handler
		If PubEstricta Then
			docConfiguracion.ReplaceItemValue CAMPO_CONFIG_PUB_ESTRICTA, NUM_CHECK_TRUE
		Else
			docConfiguracion.ReplaceItemValue CAMPO_CONFIG_PUB_ESTRICTA, NUM_CHECK_FALSE
		End If
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION, "Clase ConfDocumentos - Propiedad Set PubEstricta", Erl, "")
		Exit Property
	End Property
	
'******************************************************************************************************************
	
	Public Property Get PubEstricta As Boolean
		On Error Goto handler
		If docConfiguracion.GetItemValue(CAMPO_CONFIG_PUB_ESTRICTA)(0) = NUM_CHECK_TRUE Then 
			PubEstricta = True
		Else
			PubEstricta = False
		End If
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION, "Clase ConfDocumentos - Propiedad Get PubEstricta", Erl, "")
		Exit Property
	End Property	
	
'******************************** INTEROPERABILIDAD *****************************************************
	
	Public Property Get ClaveInter  As Vector
		On Error Goto handler
		Set ClaveInter = New vector(0)
		If docConfiguracion.HasItem(CAMPO_CONFIG_CLAVE_INTER) Then
			ClaveInter.values = docCOnfiguracion.GetItemValue(CAMPO_CONFIG_CLAVE_INTER	)
		End If
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION, "Clase ConfDocumentos - Propiedad Get ClaveInter", Erl, "")
		Exit Property
	End Property
	
'******************************************************************************************************************	
	
	Public Property Set ClaveInter As Vector
		On Error Goto handler
		docConfiguracion.ReplaceItemValue CAMPO_CONFIG_CLAVE_INTER, ClaveInter.values
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION, "Clase ConfDocumentos - Propiedad Set ClaveInter", Erl, "")
		Exit Property
	End Property
	
'******************************************************************************************************************	
	
	Public Property Get ServidorInter  As Vector
		On Error Goto handler
		Set ServidorInter = New vector(0)
		If docConfiguracion.HasItem(CAMPO_CONFIG_SERVIDOR_INTER) Then
			ServidorInter.values = docCOnfiguracion.GetItemValue(CAMPO_CONFIG_SERVIDOR_INTER)
		End If
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION, "Clase ConfDocumentos - Propiedad Get ServidorInter", Erl, "")
		Exit Property
	End Property
	
'******************************************************************************************************************	
	
	Public Property Set ServidorInter As Vector
		On Error Goto handler
		docConfiguracion.ReplaceItemValue CAMPO_CONFIG_SERVIDOR_INTER, ServidorInter.values
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION,  "Clase ConfDocumentos - Propiedad Set ServidorInter", Erl, "")
		Exit Property
	End Property
	
	
'******************************************************************************************************************	
	
	Public Property Get HostInter  As Vector
		On Error Goto handler
		Set HostInter = New vector(0)
		If docConfiguracion.HasItem(CAMPO_CONFIG_HOST_INTER) Then
			HostInter.values = docCOnfiguracion.GetItemValue(CAMPO_CONFIG_HOST_INTER)
		End If
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION,  "Clase ConfDocumentos - Propiedad Get HostInter", Erl, "")
		Exit Property
	End Property
	
	'******************************************************************************************************************	
	
	Public Property Set HostInter As Vector
		On Error Goto handler
		docConfiguracion.ReplaceItemValue CAMPO_CONFIG_HOST_INTER, HostInter.values
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION,  "Clase ConfDocumentos - Propiedad Set HostInter", Erl, "")
		Exit Property
	End Property
	
	'******************************************************************************************************************	
	
	Public Property Get RutaInter  As Vector
		On Error Goto handler
		Set RutaInter = New vector(0)
		If docConfiguracion.HasItem(CAMPO_CONFIG_RUTA_INTER) Then
			RutaInter.values = docCOnfiguracion.GetItemValue(CAMPO_CONFIG_RUTA_INTER)
		End If
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION,  "Clase ConfDocumentos - Propiedad Get RutaInter", Erl, "")
		Exit Property
	End Property
	
	'******************************************************************************************************************	
	
	Public Property Set RutaInter As Vector
		On Error Goto handler
		docConfiguracion.ReplaceItemValue CAMPO_CONFIG_RUTA_INTER, RutaInter.values
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION,  "Clase ConfDocumentos - Propiedad Set RutaInter", Erl, "")
		Exit Property
	End Property
	
	'******************************************************************************************************************
	'**************************	NUMERACION **************************************************************************
'******************************************************************************************************************	
	%REM
		Property Get NumUtilizarAnio
		Description: Comments for Property Get
	%END REM
	Public Property Get NumUtilizarAnio As Boolean
	On Error GoTo handler
		If CStr(docConfiguracion.GetItemValue(CAMPO_CONFIG_NUM_ANIO)(0)) = NUM_CHECK_TRUE Then
			NumUtilizarAnio = True	
		Else
			NumUtilizarAnio = False
		End If
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION,  "Clase ConfDocumentos - Propiedad Get NumUtilizarAnio", Erl, "")
		Exit Property
	End Property
	
'******************************************************************************************************************			
	%REM
		Property Set NumUtilizarAnio
		Description: Comments for Property Set
	%END REM
	Public Property Set NumUtilizarAnio As Boolean
		On Error GoTo handler
		If NumUtilizarAnio Then
			docConfiguracion.ReplaceItemValue CAMPO_CONFIG_NUM_ANIO, NUM_CHECK_TRUE
		Else
			docConfiguracion.ReplaceItemValue CAMPO_CONFIG_NUM_ANIO, NUM_CHECK_FALSE
		End If
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION, "Clase ConfDocumentos - Propiedad Set NumUtilizarAnio", Erl, "")
		Exit Property
	End Property
'******************************************************************************************************************
	Public Property Get NumUtilizarInciso As Boolean
		On Error Goto handler
		If Cstr(docConfiguracion.GetItemValue(CAMPO_CONFIG_NUM_INCISO)(0)) = NUM_CHECK_TRUE Then
			NumUtilizarInciso = True	
		Else
			NumUtilizarInciso = False
		End If
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION, "Clase ConfDocumentos - Propiedad Set NumUtilizarAnio", Erl, "")
		Exit Property
	End Property
	
	'******************************************************************************************************************	
	
	Public Property Set NumUtilizarInciso As Boolean
		On Error Goto handler
		If NumUtilizarInciso Then
			docConfiguracion.ReplaceItemValue CAMPO_CONFIG_NUM_INCISO, NUM_CHECK_TRUE
		Else
			docConfiguracion.ReplaceItemValue CAMPO_CONFIG_NUM_INCISO, NUM_CHECK_FALSE
		End If
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION, "Clase ConfDocumentos - Propiedad Set NumUtilizarInciso", Erl, "")
		Exit Property
	End Property
	
	'******************************************************************************************************************
	
	Public Property Get NumUtilizarCodigo As Boolean
		On Error Goto handler
		If Cstr(docConfiguracion.GetItemValue(CAMPO_CONFIG_NUM_UNIDAD)(0)) = NUM_CHECK_TRUE Then
			NumUtilizarCodigo = True
		Else
			NumUtilizarCodigo = False
		End If
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION, "Clase ConfDocumentos - Propiedad Get NumUtilizarCodigo", Erl, "")
		Exit Property
	End Property
	
	'******************************************************************************************************************	
	
	Public Property Set NumUtilizarCodigo As Boolean
		On Error Goto handler
		If NumUtilizarCodigo Then
			docConfiguracion.ReplaceItemValue CAMPO_CONFIG_NUM_UNIDAD, NUM_CHECK_TRUE
		Else
			docConfiguracion.ReplaceItemValue CAMPO_CONFIG_NUM_UNIDAD, NUM_CHECK_FALSE
		End If
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION,"Clase ConfDocumentos - Propiedad Set NumUtilizarCodigo", Erl, "")
		Exit Property
	End Property
	
	'******************************************************************************************************************
	
	Public Property Get NumeracionUnica As Boolean
		On Error Goto handler
		If Cstr(docConfiguracion.GetItemValue(CAMPO_CONFIG_NUM_UNICA)(0) =NUM_CHECK_TRUE) Then
			NumeracionUnica = True
		Else
			NumeracionUnica = False
		End If
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION,"Clase ConfDocumentos - Propiedad Get NumeracionUnica", Erl, "")
		Exit Property
	End Property
	
'******************************************************************************************************************	
	
	Public Property Set NumeracionUnica As Boolean
		On Error Goto handler
		If NumeracionUnica Then
			docConfiguracion.ReplaceItemValue CAMPO_CONFIG_NUM_UNICA, NUM_CHECK_TRUE
		Else
			docConfiguracion.ReplaceItemValue CAMPO_CONFIG_NUM_UNICA, NUM_CHECK_FALSE
		End If
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION, "Clase ConfDocumentos - Propiedad Set NumeracionUnica", Erl, "")
		Exit Property
	End Property
	'******************************************************************************************************************
	
	Public Property Get NumFormato As String
		On Error GoTo handler
		NumFormato = docCOnfiguracion.GetItemValue(CAMPO_CONFIG_NUM_FORMATO)(0)
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION, "Clase ConfDocumentos - Propiedad Get NumFormato", Erl, "")
		Exit Property
	End Property
	
	'******************************************************************************************************************	
	
	Public Property Set NumFormato As String
		On Error GoTo handler
		docConfiguracion.ReplaceItemValue CAMPO_CONFIG_NUM_FORMATO, NumFormato
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION, "Clase ConfDocumentos - Propiedad Set NumFormato", Erl, "")
		Exit Property
	End Property	

	'******************************************************************************************************************
	
	Public Property Get NumClaveNum As Vector
		On Error Goto handler
		Set NumClaveNum = New Vector(0)
		If docConfiguracion.HasItem(CAMPO_CONFIG_NUM_CLAVE_NUM) Then
			NumClaveNum.values = docConfiguracion.GetItemValue(CAMPO_CONFIG_NUM_CLAVE_NUM)
		End If
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION, "Clase ConfDocumentos - Propiedad Get NumClaveNum", Erl, "")
		Exit Property
	End Property
	
	'******************************************************************************************************************	
	
	
	Public Property Set NumClaveNum As Vector
		On Error Goto handler
		docConfiguracion.ReplaceItemValue CAMPO_CONFIG_NUM_CLAVE_NUM, NumClaveNum.values
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION, "Clase ConfDocumentos - Propiedad Set NumClaveNum", Erl, "")
		Exit Property
	End Property
	
	'******************************************************************************************************************	
'***************************	ARCHIVOS ***************************************************************************	
'******************************************************************************************************************
	
	Public Property Get pathArchivos As String
		On Error Goto handler
		pathArchivos=Cstr(docConfiguracion.GetItemValue(CAMPO_CONFIG_PATH_ARCHIVOS)(0))
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION,  "Clase ConfDocumentos - Propiedad Get pathArchivos", Erl, "")
		Exit Property
	End Property	
'*************************************************************************************************************
	Public Property Set pathArchivos As String
		On Error Goto handler
		docConfiguracion.ReplaceItemValue CAMPO_CONFIG_PATH_ARCHIVOS, pathArchivos
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION,"Clase ConfDocumentos - Propiedad Set pathArchivos", Erl, "")
		Exit Property
	End Property	
	
	'******************************************************************************
	
	Public Sub Archivar(doc As NotesDocument)
		On Error Goto handler
		Dim baseDatos As NotesDatabase
		
		Dim pos As Long
		Dim rutaBaseArchivos As String
		Dim keyInterop As New Vector(0)
		Dim pathsInterop As New Vector(0)
		
		keyInterop.values = docConfiguracion.GetItemValue(CAMPO_CONFIG_CLAVE_INTER)
		pathsInterop.values = docConfiguracion.GetItemValue(CAMPO_CONFIG_RUTA_INTER)
		
		If keyInterop.isMember(KEY_INTEROP_ARCHIVO, pos, False) Then
			rutaBaseArchivos = pathsInterop.getElement(pos)
			Set baseDatos = ses.GetDatabase(ses.CurrentDatabase.Server, rutaBaseArchivos)
			Call baseDatos.AllDocuments.AddDocument(doc)
		Else
			Error "404", "NO SE ENCUENTRA LAS RUTA A LA BASE DE ARCHIVO EN LA CONFIGURACION"
		End If
		
		Exit Sub
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION,"Clase ConfDocumentos - Propiedad Get NumeracionUnica", Erl, "")
		Exit Sub
	End Sub
	
	
	
	
	'******************************************************************************************************************
'***************************	AUDITORIA ***************************************************************************	
'******************************************************************************************************************
	
	Public Property Get TiempoVidaAuditoria As String
		On Error Goto handler
		TiempoVidaAuditoria = Cstr(docConfiguracion.GetItemValue(CAMPO_CONFIG_AUDITORIA_CANT_DIAS)(0))
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION, "Clase ConfDocumentos - Propiedad Get TiempoVidaAuditoria", Erl, "")
		Exit Property
	End Property
	
'******************************************************************************************************************	
	
	Public Property Set TiempoVidaAuditoria As String
		On Error Goto handler
		docConfiguracion.ReplaceItemValue CAMPO_CONFIG_AUDITORIA_CANT_DIAS, Cstr(TiempoVidaAuditoria)
		
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION, "Clase ConfDocumentos - Propiedad Set TiempoVidaAuditoria", Erl, "")
		Exit Property
	End Property
	
	'******************************************************************************************************************	
	
	Public Property Get ClavesAuditoria As Vector
		On Error Goto handler
		Set ClavesAuditoria = New Vector(0)
		If docConfiguracion.hasItem(CAMPO_CONFIG_AUDITORIA_CLAVE) Then
			ClavesAuditoria.values = docConfiguracion.getItemValue(CAMPO_CONFIG_AUDITORIA_CLAVE)
		End If
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION, "Clase ConfDocumentos - Propiedad Get ClavesAuditoria", Erl, "")
		Exit Property
	End Property
	
'******************************************************************************************************************	
	
	Public Property Set ClavesAuditoria  As Vector
		On Error Goto handler
		docConfiguracion.ReplaceItemValue CAMPO_CONFIG_AUDITORIA_CLAVE, ClavesAuditoria.values
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION,  "Clase ConfDocumentos - Propiedad Set ClavesAuditoria ", Erl, "")
		Exit Property
	End Property
	
'******************************************************************************************************************	
	
	Public Property Get FechasAuditoria As Vector
		On Error Goto handler
		Set FechasAuditoria = New Vector(0)
		If docConfiguracion.HasItem(CAMPO_CONFIG_AUDITORIA_FECHA_C) Then
			FechasAuditoria.values = docConfiguracion.GetItemValue(CAMPO_CONFIG_AUDITORIA_FECHA_C)
		End If
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION,   "Clase ConfDocumentos - Propiedad Get FechasAuditoria", Erl, "")
		Exit Property
	End Property
	
'******************************************************************************************************************	
	
	Public Property Set FechasAuditoria As Vector
		On Error Goto handler
		docConfiguracion.ReplaceItemValue CAMPO_CONFIG_AUDITORIA_FECHA_C,FechasAuditoria.values
		Exit Property
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION,"Clase ConfDocumentos - Propiedad Set FechasAuditoria", Erl, "")
		Exit Property
	End Property
	
'******************************************************************************************************************
'******************************************************************************************************************
	Public Sub Save () 
		On Error Goto handler		
		docConfiguracion.Save True,False
		
		Dim docAux As NotesDocument
		Dim dbAux As NotesDatabase
		Dim keyInterop As New vector(0)
		Dim pathsInterop As New vector(0)
		
		
		'Dim pos As Long
		Dim rutaDocumentos As String
		
		keyInterop.values = docConfiguracion.GetItemValue(CAMPO_CONFIG_CLAVE_INTER	)
		pathsInterop.values = docConfiguracion.GetItemValue(CAMPO_CONFIG_RUTA_INTER)
		
		'===================================================
		'| ACTUALIZO LOS DOC DE PERFIL DE LAS OTRAS  BASES |
		'===================================================
		
		' Base documentos.nsf
		If docConfiguracion.hasItem(CAMPO_CONFIG_CLAVE_INTER) Then
			Dim iter As Long
			Dim keyLenght  As Long
			Dim iterKey As String
			
			keyLenght = keyInterop.cantElem()
			iter = 1	
			
			'Guardo en la base actual **********************************************************
			Set dbAux = ses.GetDatabase(ses.CurrentDatabase.Server,ses.CurrentDatabase.FilePath)
			If Not dbAux.IsOpen Then
				Call dbAUx.Open("","")
			End If
			
			Set docAux = dbAux.GetProfileDocument(NOMBRE_DOC_PERFIL)
			Call copiarDocConfig (docConfiguracion , docAux)
			docAux.save True,False
			'**********************************************************************************
			
			While iter <= keyLenght
				iterKey = keyInterop.getElement(iter)
				rutaDocumentos = pathsInterop.getElement(iter)
				
				Set dbAux = ses.GetDatabase(ses.CurrentDatabase.Server,rutaDocumentos)
				If Not dbAux.IsOpen Then
					Call dbAUx.Open("","")
				End If	
				
				Set docAux = dbAux.GetProfileDocument(NOMBRE_DOC_PERFIL)
				Call copiarDocConfig (docConfiguracion , docAux)
				docAux.save True,False
				iter = iter +1
			Wend
		End If
		
		Exit Sub
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION, "Clase ConfDocumentos - Sub Save", Erl, ses.Effectiveusername)
		Exit Sub
	End Sub
	'************************************************************************************************************************
	Public Sub copiarDocConfig (docConfig As NotesDocument, docProfile As NotesDocument) 
		On Error Goto handler
		Call docProfile.ReplaceItemValue(CAMPO_CONFIG_HOST_SERVER,docConfig.GetItemValue(CAMPO_CONFIG_HOST_SERVER))
		Call docProfile.ReplaceItemValue(CAMPO_CONFIG_TAM_MAX_ANEXOS,docConfig.GetItemValue(CAMPO_CONFIG_TAM_MAX_ANEXOS))
		Call docProfile.ReplaceItemValue(CAMPO_CONFIG_AUDITAR,docConfig.GetItemValue(CAMPO_CONFIG_AUDITAR))
		Call docProfile.ReplaceItemValue(CAMPO_CONFIG_PUB_ESTRICTA,docConfig.GetItemValue(CAMPO_CONFIG_PUB_ESTRICTA))
		Call docProfile.ReplaceItemValue(CAMPO_CONFIG_CA_CERT, docConfig.GetItemValue(CAMPO_CONFIG_CA_CERT))
		Call docProfile.ReplaceItemValue(CAMPO_CONFIG_CANTDOCXBASE, docConfig.GetItemValue(CAMPO_CONFIG_CANTDOCXBASE))
		Call docProfile.ReplaceItemValue(CAMPO_CONFIG_RENDIMIENTOPOR, docConfig.GetItemValue(CAMPO_CONFIG_RENDIMIENTOPOR))
		Call docProfile.ReplaceItemValue(CAMPO_CONFIG_CANTMBXBASE, docConfig.GetItemValue(CAMPO_CONFIG_CANTMBXBASE))
		
		Call docProfile.Replaceitemvalue(CAMPO_CONFIG_BASESCREADAS, docConfig.Getitemvalue(CAMPO_CONFIG_BASESCREADAS))
		Call docProfile.Replaceitemvalue(CAMPO_CONFIG_BASESCREADASINI, docConfig.Getitemvalue(CAMPO_CONFIG_BASESCREADASINI))
		Call docProfile.Replaceitemvalue(CAMPO_CONFIG_NUMERADORES, docConfig.Getitemvalue(CAMPO_CONFIG_NUMERADORES))
		Call docProfile.Replaceitemvalue(CAMPO_CONFIG_NUMEROS, docConfig.Getitemvalue(CAMPO_CONFIG_NUMEROS))
		
		Call docProfile.ReplaceItemValue(CAMPO_CONFIG_NUM_INCISO,docConfig.GetItemValue(CAMPO_CONFIG_NUM_INCISO))
		Call docProfile.ReplaceItemValue(CAMPO_CONFIG_NUM_UNIDAD,docConfig.GetItemValue(CAMPO_CONFIG_NUM_UNIDAD))
		Call docProfile.ReplaceItemValue(CAMPO_CONFIG_NUM_UNICA,docConfig.GetItemValue(CAMPO_CONFIG_NUM_UNICA))
		Call docProfile.ReplaceItemValue(CAMPO_CONFIG_NUM_FORMATO,docConfig.GetItemValue(CAMPO_CONFIG_NUM_FORMATO))
		Call docProfile.ReplaceItemValue(CAMPO_CONFIG_NUM_CLAVE_NUM,docConfig.GetItemValue(CAMPO_CONFIG_NUM_CLAVE_NUM))
		Call docProfile.ReplaceItemValue(CAMPO_CONFIG_NUM_ANIO,docConfig.GetItemValue(CAMPO_CONFIG_NUM_ANIO))
		
		Call docProfile.ReplaceItemValue(CAMPO_CONFIG_AUDITORIA_CANT_DIAS,docConfig.GetItemValue(CAMPO_CONFIG_AUDITORIA_CANT_DIAS))		
		Call docProfile.ReplaceItemValue(CAMPO_CONFIG_AUDITORIA_CLAVE,docConfig.GetItemValue(CAMPO_CONFIG_AUDITORIA_CLAVE))
		Call docProfile.ReplaceItemValue(CAMPO_CONFIG_AUDITORIA_FECHA_C,docConfig.GetItemValue(CAMPO_CONFIG_AUDITORIA_FECHA_C))
		'interoperabilidad
		Call docProfile.ReplaceItemValue(CAMPO_CONFIG_CLAVE_INTER,docConfig.GetItemValue(CAMPO_CONFIG_CLAVE_INTER))
		Call docProfile.ReplaceItemValue(CAMPO_CONFIG_SERVIDOR_INTER,docConfig.GetItemValue(CAMPO_CONFIG_SERVIDOR_INTER))
		Call docProfile.ReplaceItemValue(CAMPO_CONFIG_HOST_INTER,docConfig.GetItemValue(CAMPO_CONFIG_HOST_INTER))
		Call docProfile.ReplaceItemValue(CAMPO_CONFIG_RUTA_INTER,docConfig.GetItemValue(CAMPO_CONFIG_RUTA_INTER))
		'web services
		Call docProfile.ReplaceItemValue(CAMPO_WSDOC_LISTA,docConfig.GetItemValue(CAMPO_WSDOC_LISTA))
		Call docProfile.ReplaceItemValue(CAMPO_WSDOC_TAGATT,docConfig.GetItemValue(CAMPO_WSDOC_TAGATT))
		Call docProfile.ReplaceItemValue(CAMPO_WSDOC_VISTA,docConfig.GetItemValue(CAMPO_WSDOC_VISTA))
		
		Call docProfile.ReplaceItemValue(CAMPO_WSVIS_LISTA,docConfig.GetItemValue(CAMPO_WSVIS_LISTA))
		Call docProfile.ReplaceItemValue(CAMPO_WSVIS_VISTAFT ,docConfig.GetItemValue(CAMPO_WSVIS_VISTAFT))
		Call docProfile.ReplaceItemValue(CAMPO_WSVIS_VISTAVER, docConfig.GetItemValue(CAMPO_WSVIS_VISTAVER))
		Call docProfile.ReplaceItemValue(CAMPO_WSVIS_TAMPAG, docConfig.GetItemValue(CAMPO_WSVIS_TAMPAG))
		
		Exit Sub
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION, "Clase ConfDocumentos - Sub copiarDocConfig", Erl, ses.Effectiveusername)
		Exit Sub
	End Sub
'************************************************************************************************************************
	Public Sub copiarDocConfigIGDOC (docConfig As NotesDocument, docProfile As NotesDocument) 
		On Error Goto handler
		
		' Copiamo todos los campos de la config, del documento al documento de perfil		
		Call docProfile.ReplaceItemValue(CAMPO_IGDOC_PROTOCOLO,docConfig.GetItemValue(CAMPO_IGDOC_PROTOCOLO))
		Call docProfile.ReplaceItemValue(CAMPO_IGDOC_PUERTO,docConfig.GetItemValue(CAMPO_IGDOC_PUERTO))
		Call docProfile.ReplaceItemValue(CAMPO_IGDOC_INSTITUCION,docConfig.GetItemValue(CAMPO_IGDOC_INSTITUCION))
		Call docProfile.ReplaceItemValue(CAMPO_IGDOC_EMAIL_INSTITUCIONAL,docConfig.GetItemValue(CAMPO_IGDOC_EMAIL_INSTITUCIONAL))
		Call docProfile.ReplaceItemValue(CAMPO_IGDOC_HOST_SERVER,docConfig.GetItemValue(CAMPO_IGDOC_HOST_SERVER))
		Call docProfile.ReplaceItemValue(CAMPO_IGDOC_PATH_DOJO,docConfig.GetItemValue(CAMPO_IGDOC_PATH_DOJO))
		Call docProfile.ReplaceItemValue(CAMPO_IGDOC_MODULOS_INSTALADOS,docConfig.GetItemValue(CAMPO_IGDOC_MODULOS_INSTALADOS))
		Call docProfile.ReplaceItemValue(CAMPO_IGDOC_ADMINISTRADORES,docConfig.GetItemValue(CAMPO_IGDOC_ADMINISTRADORES))
		Call docProfile.ReplaceItemValue(CAMPO_IGDOC_PATH_CERTIFICADO,docConfig.GetItemValue(CAMPO_IGDOC_PATH_CERTIFICADO))
		Call docProfile.ReplaceItemValue(CAMPO_IGDOC_PATH_ADMINISTRACION,docConfig.GetItemValue(CAMPO_IGDOC_PATH_ADMINISTRACION))
		Call docProfile.ReplaceItemValue(CAMPO_IGDOC_PATH_SESION,docConfig.GetItemValue(CAMPO_IGDOC_PATH_SESION))
		Call docProfile.ReplaceItemValue(CAMPO_IGDOC_URL_CRL,docConfig.GetItemValue(CAMPO_IGDOC_URL_CRL))
		Call docProfile.ReplaceItemValue(CAMPO_IGDOC_PATH_PORTAL,docConfig.GetItemValue(CAMPO_IGDOC_PATH_PORTAL))
		Call docProfile.ReplaceItemValue(CAMPO_IGDOC_DIR_INSTALACION,docConfig.GetItemValue(CAMPO_IGDOC_DIR_INSTALACION))
		Call docProfile.ReplaceItemValue(CAMPO_IGDOC_PATH_TELEFONIA,docConfig.GetItemValue(CAMPO_IGDOC_PATH_TELEFONIA))
		Call docProfile.ReplaceItemValue(CAMPO_IGDOC_SKIN_DOJO,docConfig.GetItemValue(CAMPO_IGDOC_SKIN_DOJO))
		Call docProfile.ReplaceItemValue(CAMPO_IGDOC_PATH_IMAGENES,docConfig.GetItemValue(CAMPO_IGDOC_PATH_IMAGENES))	
		Call docProfile.ReplaceItemValue(CAMPO_IGDOC_CLAVES_COL,docConfig.GetItemValue(CAMPO_IGDOC_CLAVES_COL))
		Call docProfile.ReplaceItemValue(CAMPO_IGDOC_URL_COL,docConfig.GetItemValue(CAMPO_IGDOC_URL_COL))
		Call docProfile.ReplaceItemValue(CAMPO_IGDOC_PATH_AVISOS,docConfig.GetItemValue(CAMPO_IGDOC_PATH_AVISOS))
		
		Exit Sub
handler:
		Call RegistrarYGenerarError2(Err,Error,NOMBRE_APLICACION,"Clase IGDOCCONFIG - Sub copiarDocConfig","","")
		Exit Sub
	End Sub	
	
	' FUNCIONES PARA LA NUMERACION
'************************************************************************************************************************
'	Public Property Get FormatoNumerador(Byval ClaveNum As String) As String
'	' Retorna el formato de numeraciÃ³n dada una clave
'		On Error Goto HANDLER
'		
'		Dim pos As Long
'		Dim vFormNum As New Vector(0)
'		Set vFormNum = Me.NumFormato
'		
'		If Me.NumClaveNum.isMember(ClaveNum, pos, False) Then 
'			FormatoNumerador = vFormNum.getElement(pos)	
'		End If	
'		Exit Property
'HANDLER:
'		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfDocumentos - Propiedad Get FormatoNumerador","")
'		Exit Property
'	End Property
	
'******************************************************************************************************************			
	
'	Public Property Set FormatoNumerador(Byval ClaveNum As String) As String
'	' Dada una clave setea el Formato de la NumeraciÃ³n. Si no lo encuentra genera un error 
'	' ERRORCONF_CLAVE_NOTFOUND
'		On Error Goto HANDLER
'		
'		Dim pos As Long
'		Dim vFormNum As New Vector(0)
'		Set vFormNum = Me.NumFormato
'		
'		If Me.NumClaveNum.isMember(ClaveNum, pos, False) Then 
'			Call vFormNum.ReplaceElement(pos,FormatoNumerador)
'		Else
'			Error ERRORCONF_CLAVE_NOTFOUND, "FormatoNumerador: No se encuentra la clave " _ 
'			& ClaveNum & " en la tabla de Formato de numeradores."
'		End If	
'		
'		Exit Property
'HANDLER:
'		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfDocumentos - Propiedad Set FormatoNumerador","")
'		Exit Property
'	End Property
'*******************************************************************************************************
	Private Function PedirNumero (Byval nombrenumerador As String) As Long
	'Pide un nÃºmero a la clase numeraciÃ³n para el numerador que recibe y lo devuelve
	'Suposiciones:
		' 1) Si se utiliza un numerador diferente por aÃ±o, el nombre del numerador indicarÃ¡ que va 
		'    el aÃ±o con yy o yyyy en el lugar que corresponda. Esta funciÃ³n sustituye ese indicador
		'	por el aÃ±o actual
		On Error Goto HANDLER
		
		Dim num As NumClient, baseNumeracion As String, servidorNumeracion As String
		
		Dim cree As Boolean
		cree = False
		
		'Sustituyo el indicador de aÃ±o por el aÃ±o actual
		'nombrenumerador = SustituirAnio(nombrenumerador)
		
		'Pido el nÃºmero
		Dim pos As Long
		Call Me.ClaveInter.isMember(Ucase(KEY_INTEROP_NUMDOC), pos, False) 
		'Busco srv y path de la base de numeracion
		servidorNumeracion  =  Me.ServidorInter.getElement(pos)
		baseNumeracion  = Me.RutaInter.getElement(pos)
		
		If (nombrenumerador <> "") And (baseNumeracion <> "") Then
numerador:	
			'Creo el objeto numerador
			Set num = New NumClient(nombrenumerador,servidorNumeracion,baseNumeracion)		
			PedirNumero = num.GetNumber()			
		Else
			Error ERROR_NUMERATION,MSG_ERROR_NUMERATION
		End If
		Exit Function
HANDLER:
		If Err = ERROR_NUMCLIENT_NUMERATOR_NOT_FOUND And Not cree Then
			Call CrearNumerador(nombrenumerador,servidorNumeracion, baseNumeracion)
			cree = True
			GoTo numerador
		Else
			Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION, "Clase ConfDocumentos - Funcion PedirNumero" , Erl, "")
		End If
		Exit Function
	End Function
'******************************************************************************************************************
	Private Function CrearNumerador(numerador As String,server As String, path As String)
		On Error GoTo handler
		Dim docNumerador As NotesDocument
		Dim baseNumeracion As NotesDatabase
		
		Set baseNumeracion = New NotesDatabase("","")
		Call baseNumeracion.Open(server, path)
		
		Set docNumerador = New NotesDocument(baseNumeracion)
		docNumerador.Form = "Numerador"
		docNumerador.Name = numerador
		docNumerador.Queue = 1
		docNumerador.StartNumber = 1
		docNumerador.LastQueued = 1
		docNumerador.LastAsigned = 0
		docNumerador.QueueLen = 1
		docNumerador.Save True, False
		Exit Function
handler:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Funcion CrearNumerador","")
		Exit Function
	End Function
'*******************************************************************************************************
	Public Function PedirNumeroDocumento (Byval nombrenumerador As String) As Long
	'Pide un nÃºmero a la clase numeraciÃ³n para el numerador que recibe y lo devuelve
	'Suposiciones:
		' 1) Si se utiliza un numerador diferente por aÃ±o, el nombre del numerador indicarÃ¡ que va 
		'    el aÃ±o con yy o yyyy en el lugar que corresponda. Esta funciÃ³n sustituye ese indicador
		'	por el aÃ±o actual
		On Error Goto HANDLER
		
		Dim num As NumClient, baseNumeracion As String, servidorNumeracion As String
		
		'Sustituyo el indicador de aÃ±o por el aÃ±o actual
		'nombrenumerador = SustituirAnio(nombrenumerador)
		
		'Pido el nÃºmero
		Dim pos As Long
		Call Me.ClaveInter.isMember(Ucase(KEY_INTEROP_NUMDOC), pos, False) 
		'Busco srv y path de la base de numeracion
		servidorNumeracion  =  Me.ServidorInter.getElement(pos)
		baseNumeracion  = Me.RutaInter.getElement(pos)
		
		If (nombrenumerador <> "") And (baseNumeracion <> "") Then
			'Creo el objeto numerador
			Set num = New NumClient(nombrenumerador,servidorNumeracion,baseNumeracion)		
			PedirNumeroDocumento = num.GetNumber()			
		Else
			Error ERROR_NUMERATION,MSG_ERROR_NUMERATION
		End If
		
		Exit Function
HANDLER:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION, "Clase ConfDocumentos - Funcion PedirNumero", Erl, ses.Effectiveusername)
		Exit Function
	End Function
'******************************************************************************************************************		
	
	Public Function SustituirAnio (Byval formato As String)As String
	'Busca el indicador del aÃ±o (yy o yyyy) dentro del formato y lo sustituye por el aÃ±o actual
	'Si el indicador del aÃ±o no estÃ¡ devuelve el formato como lo recibiÃ³
		On Error Goto HANDLER
		
		Dim anioactual As String, pos As Integer
		
		'Veo si va el aÃ±o con cuatro digitos
		anioactual = Cstr(Year(Today))
		pos = Instr(formato, INDICADOR_AÃO_CUATRO_DIGITOS)
		If pos = 0 Then  'veo si va el aÃ±o con dos digitos
			anioactual = Right(Cstr(Year(Today)),2)
			pos = Instr(formato, INDICADOR_AÃO_DOS_DIGITOS)
		End If
		If pos <> 0 Then  'va el aÃ±o
			Mid$ (formato, pos,Len(anioactual)) = anioactual
		End If  'si no va el aÃ±o no modifiquÃ© nada al texto		
		SustituirAnio = formato
		
		Exit Function
HANDLER:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION, "Clase ConfDocumentos - Funcion SustituirAnio", Erl, ses.Effectiveusername)
		Exit Function
	End Function
	
'******************************************************************************************************************		
	
	Public Function SustituirCantDigitos (indicadorUnitario As String, indicadorTotal As String,Byval formato As String, Byval nro As String) As String
	'Chequea la cantidad de veces que aparece el indicador de un digito y lo sustituye
	'por el nro formateado con esa cantidad de digitos
		On Error Goto HANDLER
		
		Dim pos As Integer, digitos As Integer, prefijo As String, resto As String, sufijo As String
		
		'Busco la cantidad de dÃ­gitos para el nÃºmero
		pos = Instr(formato,indicadorUnitario)	'debe haber por lo menos un indicador (digitos segun los que tenga el nro)
		If pos <> 0 Then
			digitos = 1
			If pos = 1 Then   'no hay prefijo
				prefijo = ""
			Else
				prefijo = Left(formato, pos-1)
			End If
			resto = Right(formato, Len(formato)-pos)
			pos = Instr(resto,indicadorUnitario)		
			While pos <> 0  'cuento los dÃ­gitos
				digitos = digitos + 1
				resto = Right(resto, Len(resto)-pos)
				pos = Instr(resto,indicadorUnitario)
			Wend
			sufijo = resto
		'Agrego 0's al nro hasta llegar a la cant de dÃ­gitos
			While Len(nro)<digitos
				nro = "0" + nro
			Wend 
		'Armo el nuevo formato
			SustituirCantDigitos = prefijo + nro + sufijo
		Else   'no estÃ¡ el #
		'busco el *
			pos = Instr(formato,indicadorTotal)
			If pos = 0 Then Error ERROR_INDICADOR_DIGITO_NOT_FOUND, MSG_ERROR_INDICADOR_DIGITO_NOT_FOUND &" "& indicadorTotal
			
			If pos = 1 Then   'no hay prefijo
				prefijo = ""
			Else
				prefijo = Left(formato, pos-1)
			End If
			If pos = Len(formato) Then  'no hay sufijo
				sufijo = ""
			Else
				sufijo = Right(formato, Len(formato)-pos)
			End If
			
			SustituirCantDigitos = prefijo + nro + sufijo
		End If
		
		Exit Function
HANDLER:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION, "Clase ConfDocumentos - Funcion SustituirAnio", Erl, ses.Effectiveusername)
		Exit Function
	End Function
	
'********************************************************************************************************
	
	Public Function NumerarFormateado (Byval nombreNumerador As String, codigo As String,inciso As String,codigoDef As String) As String
	'Devuelve el nro que corresponde segÃºn el nombre del numerador y con el formato indicado en el doc de perfil	
		On Error Goto HANDLER
		
		Dim formato As String, nro As String, nombreNumeradorAux As String
		nombreNumeradorAux = nombreNumerador
		If me.NumeracionUnica Then
			If Me.NumUtilizarCodigo() Then
				nombreNumeradorAux = nombreNumeradorAux &"_" & codigo
			End If
			
			If Me.NumUtilizarInciso() Then
				nombreNumeradorAux = nombreNumeradorAux &"_" & inciso
			End If
			
			If me.NumUtilizarAnio Then
				nombreNumeradorAux = SustituirAnio (nombreNumeradorAux)
			End If
			
			'Pido nÃºmero a la clase de numeraciÃ³n
			nro = Cstr(PedirNumero(nombreNumeradorAux))
			'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
			'Obtengo el formato del nro se cambiÃ³ ya que no se utiliza la tabla de formatos 
			'ahora hay un solo formato global
			'
			'		'formato = Me.FormatoNumerador(nombreNumerador)
			formato = me.NumFormato
			'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
			If formato = "" Then 
				Error ERRORCONF_CLAVE_NOTFOUND, "FormatoNumerador: No se encuentra la clave " & nombreNumerador & " en la tabla de Formato de numeradores."
			End If
			'Sustituyo el indicador de aÃ±o por el aÃ±o actual
			formato = SustituirAnio(formato)
			
			Call ManejoVectoresNumeracion (nombreNumeradorAux, nro)
			
			'Sustituyo el indicador de digitos por el nro
			NumerarFormateado = SustituirCantDigitos(INDICADOR_DIGITO,INDICADOR_DIGITOS_PROPIO_NRO,formato,nro)	
			If Me.NumUtilizarCodigo() Then
				NumerarFormateado = SustituirCantDigitos(INDICADOR_UNIDAD,INDICADOR_DIGITOS_PROPIO_UNIDAD	,NumerarFormateado,codigo)	
			End If
			
			If  Me.NumUtilizarInciso() Then
				NumerarFormateado = SustituirCantDigitos(INDICADOR_INCISO,INDICADOR_DIGITOS_PROPIO_INCISO	,NumerarFormateado,inciso)	
			End If
		Else
			Dim dbAdmin As notesDatabase
			Dim vForms 
			Dim docDef As NotesDocument

			nombreNumeradorAux = nombreNumeradorAux &"_DEF" & codigoDef
			
			Set dbAdmin = me.ReferenciarBaseDeDatos(CLAVE_DBADMINCONF)
			If dbAdmin Is Nothing Then
				Error ERRORCONF_CLAVE_NOTFOUND, MSG_ERRORCONF_CLAVE_NOTFOUND
			End If
			
			Set vForms=dbAdmin.Getview(VISTA_DEF_DOC_COD)
			If vForms Is Nothing Then
				Error ERROR_VIS_DEF_COD_NOT_FOUND, MSG_ERROR_VIS_DEF_COD_NOT_FOUND
			End If
			
			'Obtengo los datos de la definicion
			Set docDef = vForms.GetDocumentByKey(codigoDef)
			If docDef Is Nothing Then
				Error ERROR_DEF_DOC_NOT_FOUND, MSG_ERROR_DEF_DOC_NOT_FOUND
			End If
			
			Dim defDocUtilizarCodigoUni As Boolean
			If CStr(docDef.GetItemValue(CAMPO_CONFIG_NUM_UNIDAD)(0)) = NUM_CHECK_TRUE Then
				defDocUtilizarCodigoUni = True
			Else
				defDocUtilizarCodigoUni = False
			End If
			
			If defDocUtilizarCodigoUni Then
				nombreNumeradorAux = nombreNumeradorAux &"_" & codigo
			End If
			
			Dim defDocUtilizarInciso As Boolean
			If CStr(docDef.GetItemValue(CAMPO_CONFIG_NUM_INCISO)(0)) = NUM_CHECK_TRUE Then
				defDocUtilizarInciso = True	
			Else
				defDocUtilizarInciso = False
			End If
			
			If defDocUtilizarInciso Then
				nombreNumeradorAux = nombreNumeradorAux &"_" & inciso
			End If
			
			Dim defDocUtilizarAnio As Boolean
			If CStr(docDef.GetItemValue(CAMPO_CONFIG_NUM_ANIO)(0)) = NUM_CHECK_TRUE Then
				defDocUtilizarAnio = True	
			Else
				defDocUtilizarAnio = False
			End If

			If defDocUtilizarAnio Then
				nombreNumeradorAux = SustituirAnio (nombreNumeradorAux)
			End If
			'Pido nÃºmero a la clase de numeraciÃ³n
			nro = CStr(PedirNumero(nombreNumeradorAux))
			'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
			'Obtengo el formato del nro se cambiÃ³ ya que no se utiliza la tabla de formatos 
			formato = docDef.Getitemvalue(CAMPO_DEF_DOC_FORMATO_NUM)(0)
			'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
			If formato = "" Then 
				Error ERRORCONF_CLAVE_NOTFOUND, "FormatoNumerador: No se encuentra la clave " & nombreNumerador
			End If
			'Sustituyo el indicador de aÃ±o por el aÃ±o actual
			formato = SustituirAnio(formato)
			
			Call ManejoVectoresNumeracion (nombreNumeradorAux, nro)
			
			'Sustituyo el indicador de digitos por el nro
			NumerarFormateado = SustituirCantDigitos(INDICADOR_DIGITO,INDICADOR_DIGITOS_PROPIO_NRO,formato,nro)	
			If defDocUtilizarCodigoUni Then
				NumerarFormateado = SustituirCantDigitos(INDICADOR_UNIDAD,INDICADOR_DIGITOS_PROPIO_UNIDAD	,NumerarFormateado,codigo)	
			End If
			
			If defDocUtilizarInciso Then
				NumerarFormateado = SustituirCantDigitos(INDICADOR_INCISO,INDICADOR_DIGITOS_PROPIO_INCISO	,NumerarFormateado,inciso)	
			End If

			If (InStr(NumerarFormateado,INDICADOR_CODIGO) <> 0) Or (InStr(NumerarFormateado,INDICADOR_DIGITOS_PROPIO_CODIGO) <> 0)then
				NumerarFormateado = SustituirCantDigitos(INDICADOR_CODIGO,INDICADOR_DIGITOS_PROPIO_CODIGO	,NumerarFormateado,codigoDef)
			End If

		End If
		Exit Function
HANDLER:
		Call RegistrarYGenerarError2(Err,Error,"IGDOC DOCUMENTOS","Clase ConfDocumentos - Sub NumerarFormateado","","")
		Exit Function
	End Function
'*************************************************************************************************	
	%REM
		Sub ManejoVectoresNumeracion
		Description: Comments for Sub
	%END REM
	Private sub ManejoVectoresNumeracion(ByVal numerador As String, nro As String)
		On Error GoTo handler
		Dim baseActual As String
		Dim encontre As Boolean
		Dim i As long
		numerador = SustituirAnio(numerador)
		
		baseActual = me.BasesCreadas.getElement(me.BasesCreadas.cantElem)
		encontre=False
		For i = 1 To me.BasesCreadasIni.cantElem
			If me.BasesCreadasIni.getElement(i) = baseACtual And me.NumeradoresIni.getElement(i)=numerador Then
				encontre = true
			End If
		Next
		If Not encontre Then
			Dim vBIni As Vector
			Dim vNIni As Vector
			Dim vNNIni As Vector
			
			Set vBINI = me.BasesCreadasIni
			Set vNINI = me.NumeradoresIni
			Set vNNini = me.NumerosIni
			
			Call vbINI.insertElement(baseActual, vbIni.cantElem+1)
			Call vNINI.insertElement(numerador, vNINI.cantElem+1)
			Call vNNini.insertElement(nro, vNNIni.cantElem+1)
			
			Set me.BasesCreadasIni = vBINI
			Set me.NumeradoresIni = vNINI
			Set me.NumerosIni = vNNini
			Call me.Save()
		End If
		Exit sub
handler:
		'Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfDocumentos - MÃ©todo ManejoVectoresNumeracion","")
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION, "Clase ConfDocumentos - Funcion ManejoVectoresNumeracion", Erl, ses.Effectiveusername)
		Exit sub
	End Sub
	
'*************************************************************************************************
	Public Function CopiarIGDocConfig (infoIGDOC As NotesDocument)
		' recibe el docuemnto de perfil de IGDocConfig.
%REM		
		Dim docPerfilIGDoc As NotesDocument
		Dim dbAux As NotesDatabase
		
		'===================================================
		'| ACTUALIZO LOS DOC DE PERFIL DE LAS OTRAS  BASES |
		'===================================================
		
		' Base documentos.nsf
		If docConfiguracion.hasItem(CAMPO_CONFIG_PATH_DB_PDD) And  Me.PathDBPDD<>"" Then
			Set dbAux = ses.GetDatabase(ses.CurrentDatabase.Server,Me.PathDBPDD)
			If Not dbAux.IsOpen Then
				Call dbAux.Open("","")
			End If
			Set docPerfilIGDoc = dbAux.GetProfileDocument(NOMBRE_DOC_PERFIL_IGDOC)
			Call copiarDocConfigIGDOC (infoIGDOC , docPerfilIGDoc)
			docPerfilIGDoc.save True,False
		End If
		
		' Base auditoria.....
		If docConfiguracion.hasItem(CAMPO_CONFIG_PATH_DB_AUDITORIA_PDD) And  Me.PathDBAuditoriaPDD <> "" Then
			Set dbAux = ses.GetDatabase(ses.CurrentDatabase.Server,Me.PathDBAuditoriaPDD)
			If Not dbAux.IsOpen Then
				Call dbAux.Open(ses.CurrentDatabase.server,Me.PathDBAuditoriaPDD)
			End If
			Set docPerfilIGDoc = dbAux.GetProfileDocument(NOMBRE_DOC_PERFIL_IGDOC)
			Call copiarDocConfigIGDOC (infoIGDOC , docPerfilIGDoc)
			docPerfilIGDoc.save True,False
		End If
		
		' Base MotorPubDoc.nsf
		If docConfiguracion.hasItem(CAMPO_CONFIG_PATH_DB_MOTOR_PDD) And  Me.PathDBMotorPDD <> "" Then
			Set dbAux = ses.GetDatabase(ses.CurrentDatabase.Server,Me.PathDBMotorPDD)
			If Not dbAux.IsOpen Then
				Call dbAux.Open(ses.CurrentDatabase.server,Me.PathDBMotorPDD)
			End If
			Set docPerfilIGDoc = dbAux.GetProfileDocument(NOMBRE_DOC_PERFIL_IGDOC)
			Call copiarDocConfigIGDOC (infoIGDOC , docPerfilIGDoc)
			docPerfilIGDoc.save True,False
		End If
		
		' Base ArchivosPDD
		If docConfiguracion.hasItem(CAMPO_CONFIG_PATH_ARCHIVOS) And Me.PathArchivos<>"" Then
			Set dbAux = ses.GetDatabase(ses.CurrentDatabase.Server,Me.PathArchivos)
			If Not dbAux.IsOpen Then
				Call dbAux.Open(ses.CurrentDatabase.server,Me.PathArchivos)
			End If
			Set docPerfilIGDoc = dbAux.GetProfileDocument(NOMBRE_DOC_PERFIL_IGDOC)
			Call copiarDocConfigIGDOC (infoIGDOC , docPerfilIGDoc)
			docPerfilIGDoc.save True,False
		End If
%END REM
		
	End Function
	
'*********************************************************************************************************
	
	Public Function ObtenerNombreServidor(Byval sValor As String) As String
	' Retorna el verdadero valor del servidor en caso que sea una clave
		On Error Goto HANDLER
		'me dijo el cabeza
		ObtenerNombreServidor = ses.CurrentDatabase.Server		
		Exit Function
HANDLER:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION, "Clase ConfDocumentos - Funcion ObtenerNombreServidor", Erl, ses.Effectiveusername)
		Exit Function
	End Function
	
'*********************************************************************************************************
	
	Public Function ReferenciarBaseDeDatos(Byval clave As String) As NotesDatabase
		'Retorna una referencia a la base de datos que recibe como parÃ¡metro.
		'En caso de que no encuentra el nombre de la base en la configuraciÃ³n retorna Nothing
		On Error Goto HANDLER
		Dim pos As Long
		Set ReferenciarBaseDeDatos = Nothing
		If Me.ClaveInter.isMember(Ucase(clave), pos, False) Then 
			Set ReferenciarBaseDeDatos = New NotesDatabase(ObtenerNombreServidor(Me.servidorinter.getElement(pos)), Me.RutaInter.getElement(pos))
		End If
		Exit Function
HANDLER:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION, "Clase ConfDocumentos - Funcion ReferenciarBaseDeDatos", Erl, ses.Effectiveusername)
		Exit Function
		
	End Function
	
	'*********************************************************************************************************
	
	Public Function PathOrganizacion As String
		On Error Goto HANDLER
		
		' se obtiene de la interoperabilidad de conf documentos
		Dim pos As Long
		If Me.ClaveInter.isMember(Ucase(KEY_INTEROP_ORG), pos, False) Then 
			PathOrganizacion = Me.RutaInter.getElement(pos)
		End If
HANDLER:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION, "Clase ConfDocumentos - Funcion PathOrganizacion", Erl, ses.Effectiveusername)
		Exit Function
		
	End Function
	
'*********************************************************************************************************
	
	Public Function HostByKey(clave As String) As String
		' retorna el host correspondiente a la 'clave' en la tabla de interoperabilidad.
		' si no se encuentra la 'clave', retorna el string vacio.
		On Error Goto handler
		Dim hostResult As String
		Dim pos As Long
		hostResult = ""
		If Me.ClaveInter.isMember(Ucase(clave), pos, False) Then
			hostResult = Me.HostInter.getElement(pos)			
		End If
		HostByKey = hostResult
		Exit Function
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION, "Clase ConfDocumentos - Funcion HostByKey", Erl, ses.Effectiveusername)
		Exit Function
	End Function
	
	'*************************************************************************************************************************************		
	
	Public Sub addAuditoriaDate(sClave As String,dCreacion As Variant)
		'dCreacion es de tipo Date, sClave=clave de la base
		Dim itClaves As notesItem,itFechas As notesItem,aFechas As Variant
		
		If docConfiguracion.hasItem(CAMPO_CONFIG_AUDITORIA_CLAVE) Then
			Set itClaves=docConfiguracion.getFirstItem(CAMPO_CONFIG_AUDITORIA_CLAVE)
		Else
			Set itClaves=New notesItem(docConfiguracion,CAMPO_CONFIG_AUDITORIA_CLAVE,"")	
		End If
		itClaves.appendToTextlist sClave
		If docConfiguracion.hasItem(CAMPO_CONFIG_AUDITORIA_FECHA_C) Then
			Set itFechas=docConfiguracion.getFirstItem(CAMPO_CONFIG_AUDITORIA_FECHA_C)
		Else
			Set itFechas=New notesItem(docConfiguracion,CAMPO_CONFIG_AUDITORIA_FECHA_C,"")		
		End If
		aFechas=itFechas.values
		Redim Preserve aFechas(Lbound(itClaves.values) To Ubound(itClaves.values))
		aFechas(Ubound(itClaves.values))=dCreacion
		itFechas.values=aFechas
	End Sub
'*************************************************************************************************************************************	
	%REM
		Function ValidoEspacio
		Description: Comments for Function
		Este metodo devuelve "" en caso de que haya que crear una nueva base
		En caso de que se pueda crear un nuevo doc en la base "Actual" devuelve la clave de la base actual
	%END REM
	Public Function ValidoEspacio As String
		On Error GoTo handler
		Dim Basedatos As String
		Dim dbDoc As NotesDatabase
		If me.RendimientoPor="1" Then
			'Este caso es que el control se hace por tamaÃ±o
			If me.BasesCreadas.cantElem=0 Then
				'TodavÃ­a no se creo ninguna base
				ValidoEspacio = ""
				Exit Function
			Else
				Set dbDoc = me.ReferenciarBaseDeDatos(me.BasesCreadas.getElement(me.BasesCreadas.cantElem))
				If dbDoc.Size > me.CantMBPorBase*1024*1024 Then
					ValidoEspacio = ""
					Exit Function
				Else
					ValidoEspacio = me.BasesCreadas.getElement(me.BasesCreadas.cantElem)
				End If
			End If		
		Else
			'En este caso el control es por #docs
			Dim dt As Entrada
			
			Set dt.BasesCreadas = Me.BasesCreadas
			Set dt.BasesCreadasIni = Me.BasesCreadasIni
			Set dt.NumeradoresIni = Me.NumeradoresIni
			Set dt.NumerosIni = Me.NumerosIni
			dt.CantidadDocumentos = Me.CantDocPorBase
			Set dt.BaseNumerador = Me.ReferenciarBaseDeDatos(KEY_INTEROP_NUMDOC)
			
			Dim bc As BasesPorCantidad
			Set bc = New BasesPorCantidad(dt)
			ValidoEspacio = bc.getBaseDatos()	
		End If
		Exit Function
handler:
		Call RegistrarYGenerarError2(Err, Error$, "IGDOC DOCUMENTOS", "Clase ConfDocumentos - Function ValidoEspacio", Erl, ses.Effectiveusername)
		Exit function
	End Function
'*************************************************************************************************************************************
	%REM
		Sub CrearBase
		Description: Comments for Sub
	%END REM
	Public function CrearBase() As String	
		On Error GoTo handler
		Dim dbTemplate As NotesDatabase
		Dim dbNueva As NotesDatabase
		
		Dim i As long
		Dim filename As String
		Dim vAux As Vector
		
		Dim baseDatos As String
		baseDatos = me.ValidoEspacio()
		If baseDatos<>"" Then
			'Valido que realmente sea necesario crear la base 
			'(para el caso de 2 request concurrentes) 
			CrearBase = baseDatos
			Exit function
		End If
		
		Set dbTemplate = me.ReferenciarBaseDeDatos(KEY_INTEROP_BASEDOC)
		i = me.BasesCreadas.cantElem
		i = i +1
		filename = StrLeft(dbTemplate.Filepath,".nsf")
		filename = filename & "_" & CStr(i)
		Set dbNueva = dbTemplate.Createcopy(dbTemplate.Server, filename)
		Set vAux = me.BasesCreadas
		Call vAux.insertElement(KEY_INTEROP_BASEDOC & "_" & CStr(i), i)
		Set me.BasesCreadas = vAux
		Call me.InsertarLineaInterop(KEY_INTEROP_BASEDOC & "_" & CStr(i) , me.Host, dbTemplate.Server, filename)
		
		Dim igD As NotesDocument
		Set igD = dbTEmplate.Getprofiledocument("IGDocConfig")
		Dim igDNuevo As NotesDocument
		Set igDNuevo = dbNueva.Getprofiledocument("IGDocConfig")
		
		Call igd.Copyallitems(igdNuevo, true)
		Call igdNuevo.Save(true, false)
		'El insertarLineaInterop hace un save por lo que no tengo porque llamarlo nuevamente 
		CrearBase = KEY_INTEROP_BASEDOC & "_" & CStr(i)
		Exit function
handler:
		Call RegistrarYGenerarError2(err, Error$, "IGDOC DOCUMENTOS", "Clase ConfDocumentos - Sub CrearBase", Erl, ses.Effectiveusername)
		Exit function
	End function
'*************************************************************************************************************************************	
	
	Public Function InsertarLineaInterop(clave As String, host As String, serv As String, ruta As String)
		' Agrega una fila en la tabla de Interoperabilidad con los valores: clave, host, serv y ruta.
		On Error Goto handler
		Dim pos As Long
		Dim vAux As New Vector(0)
		Set vAux  = Me.ClaveInter		
		Dim vClavesLength As Long
		vClavesLength = vAux.cantElem +1
		
		If Not Me.ClaveInter.isMember(Ucase(clave), pos,False) Then
			Set vAux  = Me.ClaveInter
			vAux.insertElement clave,vClavesLength
			Set Me.ClaveInter= vAux
			
			Set vAux  = Me.ServidorInter
			vAux.insertElement serv,vClavesLength
			Set Me.ServidorInter = vAux
			
			Set vAux  = Me.HostInter
			vAux.insertElement host,vClavesLength
			Set Me.HostInter = vAux
			
			Set vAux  = Me.RutaInter
			vAux.insertElement ruta,vClavesLength
			Set Me.RutaInter = vAux
			
			Call Me.save()
		End If
		Exit Function
handler:
		Call RegistrarYGenerarError2(Err, Error$, NOMBRE_APLICACION, "Clase ConfDocumentos - Funcion InsertarLineaInterop", Erl, ses.Effectiveusername)
		Exit Function
	End Function
'******************************************************************************************************************
End Class