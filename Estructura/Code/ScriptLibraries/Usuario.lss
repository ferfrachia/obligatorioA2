'++LotusScript Development Environment:2:5:(Options):0:74
Option Declare
Use "VectorClass 2.05" 

Use "FuncionesGenerales" 
Use "Constantes dbAdminOrg"
Use "Configuracion RD"
'Use "ConfEE 1.0"

'***************************	CLASE USUARIO	************************************************
'*	INTERFASE
'*
'*		New(byval nombre as string)
'*			Constructor de la clase
'*
'*	PROPIEDADES
'*	
'*		Get Unidades () as vector
'*			Dada una clave retorna las unidades del usuario. 
'*
'*		Get FormulariosEnUnidad (ByVal unidad As string) As Vector
'*			Dada una unidad retorna los formularios a los cuales el usuario pertenece dentro
'*          de la misma. 
'*
'*		Get ComunicacionesEnUnidad (ByVal unidad As string) As Vector
'*			Dada una unidad retorna las comunicaciones a los cuales el usuario pertenece dentro
'*          de la misma. 
'*
'*		Get/Set Roles(Byval unidad As String) As vector
'*			Dada un unidad retorna/setea un vector con lo roles del usuario en el modulo expedientes. 
'*
'*		Get/Set RolesFormulario(Byval codForm as variant, Byval unidad As String) As vector
'*			Dada un unidad retorna/setea un vector con lo roles del usuario en un formulario. 
'*
'*		Get/Set RolesComunicacion(Byval codCom as variant, Byval unidad As String) As vector
'*			Dada un unidad retorna/setea un vector con lo roles del usuario en una comunicacion. 
'*			
'*		Get  NombreUsuario()as string
'*			Retorna el nombre del usuario
'*
'*		Get/Set RealRoles(Byval Clavedb As String)as vector
'*			Para un base de datos setea/setea  los roles verdaderos dado un vector
'*
'*
'*	'METODOS	
'*		Set Retomarfunciones (Byval unidad as string, Byval as string )
'*			Devuelve al suplente los permisos anteriores
'*
'*      Public Sub RetomarfuncionesFormulario(ByVal codForm As Variant ,ByVal unidad As String, docSuplencia As NotesDocument)
'*          Devuelve al suplente los permisos anteriores en el formulario en la unidad pasadas como parametro.
'*		
'*		Public Sub RetomarfuncionesComunicacion(ByVal codCom As Variant ,ByVal unidad As String, docSuplencia As NotesDocument)
'*          Devuelve al suplente los permisos anteriores en la comunicacion en la unidad pasadas como parametro.
'*
'*		Set DisableRoles(Byval Clavedb as String, Roles as vector)
'*			Quita el o los roles de una base de datos determinada
'*
'*
'******************************************************************************************************************

'++LotusScript Development Environment:2:5:(Forward):0:1
Declare Public Class Usuario
Declare Private Function replaceSubstring(Byval x As String, Byval repfrom As String, Byval repto As String, _
Byval caseflag As Integer) As String

'++LotusScript Development Environment:2:5:(Declarations):0:10
'Constantes privadas

Private Const CLAVE_BASE_ORGANIZACION				= "ORGAN"
Private Const ROL_CREADOR									= "RolCreador"
Private Const ROL_RECEPTOR									= "RolReceptor"
Private Const ROL_EDITOR										= "RolEditor"
Private Const ROL_FIRMANTE						 			= "RolFirmante"
Private Const ROL_PASE											= "RolPase"
Private Const ROL_GESTION										= "RolGestion"
Private Const ROL_ENVIAR										= "RolEnviar"
Private Const ROL_VERTODOS										= "RolVerTodos"
Private Const ROL_AMPLIARPLAZO							= "RolAmpliarPlazo"
Private Const ROL_MANEJARCONF							= "RolManejarConf"
Private Const ROL_ARCHIVO										= "RolArchivar"
Private Const ROL_ARCHIVO_FORM										= "RolArchivo"
Private Const ROL_CARTAS										= "RolComunicaciones"
Private Const ROL_FINALIZAR										= "RolFinalizar"
Private Const VALOR_SUPLENCIA_FINALIZADA						= "0"

'vistas
Private Const VISTA_ORGANIZACION_BUSQUEDAPERSONAS					= "VBusqPers"
Private Const VISTA_ORGANIZACION_BUSQUEDAUNIDADES					= "VBusqUni"
Private Const VISTA_ORGANIZACION_BUSQUEDASUPLENCIAS				= "VBusSupAct"
Private Const VISTA_MIEMBROS_FORMULARIO_PORUSUARIO		= "MiembrosFormxUsuUni"
Private Const VISTA_MIEMBROS_FORMULARIO_PORUNIDADFORM       = "MiembrosFormxUniForm"
Private Const VISTA_MIEMBROS_COM_PORUNIDADCOM       =  "MiembrosComxUniCom"
Private Const VISTA_MIEMBROS_COM_POUSUUNI      =  "MiembrosComxUsuUni"

'campos
Private Const CAMPO_ORGANIZACION_UNIDAD							= "sUnidad"
Private Const CAMPO_ORGROL_CREADOR								= "RolCreador"
Private Const CAMPO_ORGROL_RECEPTOR								= "RolReceptor"
Private Const CAMPO_ORGROL_EDITOR									= "RolEditor"
Private Const CAMPO_ORGROL_FIRMANTE								= "RolFirmante"
Private Const CAMPO_ORGROL_PASE										= "RolPase"
Private Const CAMPO_ORGROL_ENVIAR									= "RolEnviar"
Private Const CAMPO_ORGROL_VERTODOS										= "RolVerTodos"
Private Const CAMPO_ORGROL_GESTION									= "RolGestion"
Private Const CAMPO_ORGROL_AMPLIARPLAZO						= "RolModificarPlazo"
Private Const CAMPO_ORGROL_MANEJARCONF						= "RolManejarConf"
Private Const CAMPO_ORGROL_ARCHIVO									= "RolArchivar"
Private Const CAMPO_ORGROL_ARCHIVO_FORM									= "RolArchivo"
Private Const CAMPO_ORGROL_CARTAS									= "RolComunicaciones"
Private Const CAMPO_ORGROL_FINALIZAR									= "RolFinalizar"

Private Const CAMPO_ORGROL_ROLES_AGREGADOS_AL_SUPLENTE				= "sRolesAgregadosAlSuplente"
Private Const CAMPO_ORGROL_SUPLENCIA_FINALIZADA					= "sSuplenciaFinalizada"
Private Const CAMPO_NOMBRE_USUARIO_SUPLENTE						= "nbUsuario"
Private Const CAMPO_MIEMBROS_FORMULARIO_ENUNIDAD            = "nbMiembrosFormulario"

'******************************************************************************************************************
Public Class Usuario
	
	'variables privadas
	Private sNombre As String
	Private c As ConfigRD
	Private dbOrg As NotesDatabase	
	
	'*******************************************************************************************************************
	
	'Constructor 
	Public Sub new(Byval nombre As String)
		On Error Goto HANDLER
		
		sNombre = nombre
		
		If c Is Nothing Then Set c = New ConfigRD
		Set dbOrg = c.ReferenciarBaseDeDatos(CLAVE_BASE_ORGANIZACION)
		
		If dbOrg Is Nothing Then _
		Error ERROR_DB_NOT_OPEN, MSG_ERROR_DB_NOT_OPEN + " " + CLAVE_BASE_ORGANIZACION
		
		Exit Sub
HANDLER:
		Call RegistraryGenerarError(NOMBRE_APLICACION,"Usuario - Constructor","")
		Exit Sub
	End Sub	
	
	'******************************************************************************************************************	
	
	Public Property Get NombreUsuario() As String
		'Retorna el nombre del usuario
		
		On Error Goto HANDLER
		
		NombreUsuario = sNombre
		
		Exit Property		
HANDLER:
		Call RegistraryGenerarError(NOMBRE_APLICACION,"Usuario - Propiedad Get NombreUsuario","")
		Exit Property
		
	End Property
	
	'******************************************************************************************************************		
	
	Public Property Get CodigosUnidades() As vector
		'CON EL NOMBRE del usuario obtener de la aplicaci√≥n Estructura organizacional las
		'unidades a las que pertenece el usuario el resultado lo cago en el vector		
		
		On Error Goto HANDLER
		
		Dim vistaOrg As NotesView, dc As notesdocumentcollection
		Dim unidad As String, pos As Long, i As Integer
		Dim docUnidad As NotesDocument
		
		Set CodigosUnidades = New Vector(0)				
		
		Set vistaOrg = dbOrg.GetView(VISTA_ORGANIZACION_BUSQUEDAPERSONAS)
		If vistaOrg Is Nothing Then _
		Error ERROR_VIEW_NOT_FOUND,MSG_ERROR_VIEW_NOT_FOUND+" "+VISTA_ORGANIZACION_BUSQUEDAPERSONAS 
		
		Set dc = vistaOrg.GetAllDocumentsByKey(sNombre, True)
		
		For i = 1 To dc.count
			Set docUnidad = dc.GetnthDocument(i)
			Call CodigosUnidades.insertElement(docUnidad.GetItemValue(CAMPO_NRO_UNIDAD)(0),CodigosUnidades.CantElem + 1)
		Next
		
		Exit Property		
HANDLER:
		Call RegistraryGenerarError(NOMBRE_APLICACION,"Usuario - Procedimiento CodigosUnidades","")
		Exit Property
		
	End Property
	
	'******************************************************************************************************************	
	
	Public Property Get Roles(Byval unidad As String) As vector
		'obtener el documento de unidad del usuario que representa este objeto y buscar en todos
		'los campos roles donde esta el nombre del usuario.
		'Guadar en los nombres de los campos donde esta el usuario y asignarlo a un vector
		On Error Goto HANDLER
		
		Dim pos As Long, vistaOrg As NotesView, docUnidad As NotesDocument
		Dim vRolAux As New Vector(0)
		
		Set Roles = New Vector(0)				
		
		Set vistaOrg = dbOrg.GetView(VISTA_ORGANIZACION_BUSQUEDAUNIDADES	)
		If vistaOrg Is Nothing Then _
		Error ERROR_VIEW_NOT_FOUND,MSG_ERROR_VIEW_NOT_FOUND & " " & _
		VISTA_ORGANIZACION_BUSQUEDAUNIDADES
		
		Set docUnidad = vistaOrg.GetDocumentbyKey(unidad, True)
		If docUnidad Is Nothing Then _
		Error ERROR_DOCUMENT_NOT_FOUND,MSG_ERROR_DOCUMENT_NOT_FOUND & " Unidad"
		
		Set vRolAux = New Vector(0)
		vRolAux.values = docUnidad.getItemValue(CAMPO_ORGROL_CREADOR)
		If vRolAux.isMember(sNombre,pos,False) Then _
		Roles.InsertElement ROL_CREADOR ,Roles.cantElem + 1
		
		Set vRolAux = New Vector(0)
		vRolAux.values = docUnidad.getItemValue(CAMPO_ORGROL_RECEPTOR)
		If vRolAux.isMember(sNombre,pos,False) Then _
		Roles.InsertElement ROL_RECEPTOR,Roles.cantElem + 1
		
		Set vRolAux = New Vector(0)
		vRolAux.values = docUnidad.getItemValue(CAMPO_ORGROL_EDITOR)
		If vRolAux.isMember(sNombre,pos,False) Then _
		Roles.InsertElement ROL_EDITOR,Roles.cantElem + 1
		
		Set vRolAux = New Vector(0)
		vRolAux.values = docUnidad.getItemValue(CAMPO_ORGROL_FIRMANTE)
		If vRolAux.isMember(sNombre,pos,False) Then _
		Roles.InsertElement ROL_FIRMANTE,Roles.cantElem + 1
		
		Set vRolAux = New Vector(0)
		vRolAux.values = docUnidad.getItemValue(CAMPO_ORGROL_PASE)
		If vRolAux.isMember(sNombre,pos,False) Then _
		Roles.InsertElement ROL_PASE,Roles.cantElem + 1
		
		Set vRolAux = New Vector(0)
		vRolAux.values = docUnidad.getItemValue(CAMPO_ORGROL_GESTION)
		If vRolAux.isMember(sNombre,pos,False) Then _
		Roles.InsertElement ROL_GESTION,Roles.cantElem + 1
		
		Set vRolAux = New Vector(0)
		vRolAux.values = docUnidad.getItemValue(CAMPO_ORGROL_AMPLIARPLAZO)
		If vRolAux.isMember(sNombre,pos,False) Then _
		Roles.InsertElement ROL_AMPLIARPLAZO,Roles.cantElem + 1
		
		Set vRolAux = New Vector(0)
		vRolAux.values = docUnidad.getItemValue(CAMPO_ORGROL_ARCHIVO)
		If vRolAux.isMember(sNombre,pos,False) Then _
		Roles.InsertElement ROL_ARCHIVO,Roles.cantElem + 1
		
		Set vRolAux = New Vector(0)
		vRolAux.values = docUnidad.getItemValue(CAMPO_ORGROL_MANEJARCONF)
		If vRolAux.isMember(sNombre,pos,False) Then _
		Roles.InsertElement ROL_MANEJARCONF,Roles.cantElem + 1
		
		Set vRolAux = New Vector(0)
		vRolAux.values = docUnidad.GetItemValue(CAMPO_ORGROL_CARTAS)
		If vRolAux.isMember(sNombre,pos,False) Then _
		Roles.InsertElement ROL_CARTAS,Roles.cantElem + 1
		
		Exit Property		
HANDLER:
		Call RegistraryGenerarError(NOMBRE_APLICACION,"Usuario - Procedimiento - Get Roles","")
		Exit Property
	End Property
	
	'******************************************************************************************************************	
	Public Property Get FormulariosEnUnidad (ByVal unidad As string) As Vector
		'Devuelve los Codigos de los formularios que pertenecen a la unidad para los cuales
		'el usuario es miembro
		On Error GoTo HANDLER
		
		Dim s As New NotesSession
		Dim vistaMFUU As NotesView
		Dim vistaOrg As NotesView
		Dim formsAux As NotesDocumentCollection
		Dim key As Variant
		Dim docUnidad As NotesDocument
		Dim AbbName As NotesName
		Dim i As integer
		Dim docFormAux As NotesDocument
		

		Set FormulariosEnUnidad = New Vector(0)
		Set vistaOrg = dbOrg.GetView(VISTA_ORGANIZACION_BUSQUEDAUNIDADES	)
		If vistaOrg Is Nothing Then _
		Error ERROR_VIEW_NOT_FOUND,MSG_ERROR_VIEW_NOT_FOUND & " " & _
		VISTA_ORGANIZACION_BUSQUEDAUNIDADES
		
		Set docUnidad = vistaOrg.GetDocumentbyKey(unidad, True)
		If docUnidad Is Nothing Then _
		Error ERROR_DOCUMENT_NOT_FOUND,MSG_ERROR_DOCUMENT_NOT_FOUND & " Unidad"
		
		'Creo el nombre abreviado para la busqueda en la vista
		Set AbbName = s.createname(sNombre)
		'obtengo la vista de miembros de formulario por usuario unidad
		Set vistaMFUU = dbOrg.Getview(VISTA_MIEMBROS_FORMULARIO_PORUSUARIO)
		If vistaMFUU Is Nothing Then _
		Error ERROR_VIEW_NOT_FOUND,MSG_ERROR_VIEW_NOT_FOUND & " " & _
		VISTA_MIEMBROS_FORMULARIO_PORUSUARIO
		
		'key es la clave de busqueda en la vista, posee el nombre del usuario y la unidad
		key = AbbName.abbreviated +"##"+docUnidad.Getitemvalue("sNroUnidad")(0)
		
		'obtengo todos los formularios para los cuales el usuario es miembro
		Set formsAux = vistaMFUU.Getalldocumentsbykey(key)
		If formsAux Is Nothing Then _
		Error ERROR_DOCUMENT_NOT_FOUND,MSG_ERROR_DOCUMENT_NOT_FOUND & "Formularios"
		If formsAux.Count = 0 Then _
		Exit Property
		
		'Agrego los sCodigoForm (codigos de formulario) al vector a retornar
		Call FormulariosEnUnidad.insertElement(formsAux.Getfirstdocument().Getitemvalue("sCodigoForm")(0), FormulariosEnUnidad.cantElem +1)
		Set docformAux = formsAux.Getfirstdocument()
		For i=1 To formsAux.count -1
			Set docformAux = formsAux.getnextdocument(docformAux)
			Call FormulariosEnUnidad.insertElement(docformAux.Getitemvalue("sCodigoForm")(0), FormulariosEnUnidad.cantElem + 1)
		Next

		Exit Property		
HANDLER:
		Call RegistraryGenerarError(NOMBRE_APLICACION,"Usuario - Procedimiento - Get FormulariosEnUnidad","")
		Exit Property
	End Property

	'******************************************************************************************************************
	
	Public Property Get RolesFormulario (ByVal codForm As variant, ByVal unidad As string) As vector
		'Dado un formulario y una unidad, devuelve los roles que posee el usuario en el mismo
		On Error GoTo HANDLER
		
		Dim vistaMFUF As NotesView
		Dim vistaOrg As notesview
		Dim docFormulario As NotesDocument
		Dim docUnidad As NotesDocument
		Dim vRolAux As Vector
		Dim pos As Long
		
		
		Set RolesFormulario = New Vector(0)
		
		Set vistaOrg = dbOrg.GetView(VISTA_ORGANIZACION_BUSQUEDAUNIDADES)
		If vistaOrg Is Nothing Then _
		Error ERROR_VIEW_NOT_FOUND,MSG_ERROR_VIEW_NOT_FOUND & " " & _
		VISTA_ORGANIZACION_BUSQUEDAUNIDADES
		
		Set docUnidad = vistaOrg.GetDocumentbyKey(unidad, True)
		If docUnidad Is Nothing Then _
		Error ERROR_DOCUMENT_NOT_FOUND,MSG_ERROR_DOCUMENT_NOT_FOUND & " Unidad"
		
		'obtengo la vista de miembros de formularios por unidad y codigo de formulario
		Set vistaMFUF = dbOrg.Getview(VISTA_MIEMBROS_FORMULARIO_PORUNIDADFORM)
		If vistaMFUF Is Nothing Then _
		Error ERROR_VIEW_NOT_FOUND,MSG_ERROR_VIEW_NOT_FOUND & " " & _
		VISTA_MIEMBROS_FORMULARIO_PORUNIDADFORM

		'obtengo el documento del formulario cuyo codigo fue pasado como parametro a esta funcion    
		Set docFormulario = vistaMFUF.getdocumentbykey(docUnidad.Getitemvalue("sNroUnidad")(0)+"##"+codForm)
		If docFormulario Is Nothing Then _
		Error ERROR_DOCUMENT_NOT_FOUND,MSG_ERROR_DOCUMENT_NOT_FOUND & "Formulario"
		
		'Ahora obtengo los miembros de cada uno de los roles y me fijo (por cada rol) si el usuario
		'tiene ese rol. Si lo tiene, agrego el ROL al vector a retornar
		Set vRolAux = New Vector(0)
		vRolAux.values = docFormulario.getItemValue(CAMPO_ORGROL_CREADOR)
		If vRolAux.isMember(sNombre,pos,False) Then _
		RolesFormulario.InsertElement ROL_CREADOR ,RolesFormulario.cantElem + 1
		
		Set vRolAux = New Vector(0)
		vRolAux.values = docFormulario.getItemValue(CAMPO_ORGROL_RECEPTOR)
		If vRolAux.isMember(sNombre,pos,False) Then _
		RolesFormulario.InsertElement ROL_RECEPTOR,RolesFormulario.cantElem + 1
		
		Set vRolAux = New Vector(0)
		vRolAux.values = docFormulario.getItemValue(CAMPO_ORGROL_EDITOR)
		If vRolAux.isMember(sNombre,pos,False) Then _
		RolesFormulario.InsertElement ROL_EDITOR,RolesFormulario.cantElem + 1
		
		Set vRolAux = New Vector(0)
		vRolAux.values = docFormulario.getItemValue(CAMPO_ORGROL_FIRMANTE)
		If vRolAux.isMember(sNombre,pos,False) Then _
		RolesFormulario.InsertElement ROL_FIRMANTE,RolesFormulario.cantElem + 1
		
		Set vRolAux = New Vector(0)
		vRolAux.values = docFormulario.getItemValue(CAMPO_ORGROL_PASE)
		If vRolAux.isMember(sNombre,pos,False) Then _
		RolesFormulario.InsertElement ROL_PASE,RolesFormulario.cantElem + 1
		
		
		
		Set vRolAux = New Vector(0)
		vRolAux.values = docFormulario.getItemValue(CAMPO_ORGROL_ARCHIVO_FORM)
		If vRolAux.isMember(sNombre,pos,False) Then _
		RolesFormulario.InsertElement ROL_ARCHIVO_FORM,RolesFormulario.cantElem + 1
		
		Set vRolAux = New Vector(0)
		vRolAux.values = docFormulario.getItemValue(CAMPO_ORGROL_FINALIZAR)
		If vRolAux.isMember(sNombre,pos,False) Then _
		RolesFormulario.InsertElement ROL_FINALIZAR,RolesFormulario.cantElem + 1
		
		Exit Property
HANDLER:
		Call RegistraryGenerarError(NOMBRE_APLICACION,"Usuario - Procedimiento - Get RolesFormularios","")
		Exit Property
		
		
	End Property
	
	'******************************************************************************************************************


	Public Property Set RolesFormulario (ByVal codForm As Variant, ByVal unidad As String) As Vector
		'Setea los roles del usuario en el formulario de codigo codform en la unidad 
		On Error GoTo HANDLER
		
		
		Dim vistaMFUF As NotesView
		Dim vistaOrg As NotesView
		Dim docFormulario As NotesDocument
		Dim docUnidad As NotesDocument
		Dim vRolAux As Vector
		Dim pos As Long
		Dim flagSave As Boolean
		Dim vAux As Vector
		Dim i As integer
		
		If RolesFormulario.CantElem = 0 Then Error ERROR_INCORRECT_PARAMETER, _
		MSG_ERROR_INCORRECT_PARAMETER
		
		Set vAux = New Vector(0)
		
		Set vistaOrg = dbOrg.GetView(VISTA_ORGANIZACION_BUSQUEDAUNIDADES)
		If vistaOrg Is Nothing Then _
		Error ERROR_VIEW_NOT_FOUND,MSG_ERROR_VIEW_NOT_FOUND & " " & _
		VISTA_ORGANIZACION_BUSQUEDAUNIDADES
		
		Set docUnidad = vistaOrg.GetDocumentbyKey(unidad, True)
		If docUnidad Is Nothing Then _
		Error ERROR_DOCUMENT_NOT_FOUND,MSG_ERROR_DOCUMENT_NOT_FOUND & " Unidad"
		
		'obtengo la vista de miembros de formulario por unidad y codigo de formulario
		Set vistaMFUF = dbOrg.Getview(VISTA_MIEMBROS_FORMULARIO_PORUNIDADFORM)
		If vistaMFUF Is Nothing Then _
		Error ERROR_VIEW_NOT_FOUND,MSG_ERROR_VIEW_NOT_FOUND & " " & _
		VISTA_MIEMBROS_FORMULARIO_PORUNIDADFORM

		'obtengo el documento del formulario de codigo codform en la unidad sNroUnidad
		Set docFormulario = vistaMFUF.getdocumentbykey(docUnidad.Getitemvalue("sNroUnidad")(0)+"##"+codForm)
		If docFormulario Is Nothing Then _
		Error ERROR_DOCUMENT_NOT_FOUND,MSG_ERROR_DOCUMENT_NOT_FOUND & "Formulario"
		flagSave = False
		
		'Itero tantas veces como Roles tenga el vector al cual se seteo RolesFormulario
		'En cada case, me fijo si el usuario ya es miembro de ese rol en el formulario
		'de no serlo, le agrego ese rol
		For i = 1 To RolesFormulario.CantElem
			Delete vAux
			Set vAux = Nothing
			Set vAux = New Vector(0)
			Select Case RolesFormulario.GetElement(i)
			Case ROL_CREADOR : 
				vAux.values = docFormulario.getItemValue(CAMPO_ORGROL_CREADOR)
				If Not vAux.isMember(sNombre,pos,False) Then 
					vAux.InsertElement sNombre, vAux.cantElem + 1
					docFormulario.ReplaceItemValue CAMPO_ORGROL_CREADOR, vAux.Values
					flagSave=True
				End If
			Case ROL_RECEPTOR: 
				vAux.values = docFormulario.getItemValue(CAMPO_ORGROL_RECEPTOR)
				If Not vAux.isMember(sNombre,pos,False) Then 
					vAux.InsertElement sNombre ,vAux.cantElem + 1
					docFormulario.ReplaceItemValue CAMPO_ORGROL_RECEPTOR, vAux.Values
					flagSave=True
				End If
			Case ROL_EDITOR  : 
				vAux.values = docFormulario.getItemValue(CAMPO_ORGROL_EDITOR)
				If Not vAux.isMember(sNombre,pos,False) Then 
					vAux.InsertElement sNombre ,vAux.cantElem + 1
					docFormulario.ReplaceItemValue CAMPO_ORGROL_EDITOR, vAux.Values
					flagSave=True
				End If
			Case ROL_FIRMANTE: 
				vAux.values = docFormulario.getItemValue(CAMPO_ORGROL_FIRMANTE)
				If Not vAux.isMember(sNombre,pos,False) Then
					vAux.InsertElement sNombre ,vAux.cantElem + 1
					docFormulario.ReplaceItemValue CAMPO_ORGROL_FIRMANTE, vAux.Values
					flagSave=True
				End If
			Case ROL_PASE    : 
				vAux.values = docFormulario.getItemValue(CAMPO_ORGROL_PASE)
				If Not vAux.isMember(sNombre,pos,False) Then
					vAux.InsertElement sNombre ,vAux.cantElem + 1
					docFormulario.ReplaceItemValue CAMPO_ORGROL_PASE, vAux.Values
					flagSave=True
				End If
			Case ROL_FINALIZAR    : 
				vAux.values = docFormulario.getItemValue(CAMPO_ORGROL_FINALIZAR)
				If Not vAux.isMember(sNombre,pos,False) Then
					vAux.InsertElement sNombre ,vAux.cantElem + 1
					docFormulario.ReplaceItemValue CAMPO_ORGROL_FINALIZAR, vAux.Values
					flagSave=True
				End If
			Case ROL_ARCHIVO_FORM
				vAux.values = docFormulario.getItemValue(CAMPO_ORGROL_ARCHIVO_FORM)
				If Not vAux.isMember(sNombre,pos,False) Then
					vAux.InsertElement sNombre ,vAux.cantElem + 1
					docFormulario.ReplaceItemValue CAMPO_ORGROL_ARCHIVO_FORM, vAux.Values
					flagSave=True
				End If 
			Case Else
				Error ERROR_INCORRECT_OPTION, MSG_ERROR_INCORRECT_OPTION & " Rol: " & RolesFormulario.getElement(i)
		End Select
		Next
		
		'Si algun rol nuevo fue agregado entonces puedo guardar
		If flagSave Then
			If Not docFormulario.Save(False,False) Then _
			Error ERROR_CANT_SAVE_DOCUMENT,MSG_ERROR_CANT_SAVE_DOCUMENT + " de Formulario"
		End If

		Exit Property				
HANDLER:
		Call RegistraryGenerarError(NOMBRE_APLICACION,"Usuario - Procedimiento - Set RolesFormularios","")
		Exit Property
	End Property
	
	'******************************************************************************************************************	
	Public Property Set Roles(Byval unidad As String) As Vector
		On Error Goto HANDLER
		
		Dim vistaUnidades As NotesView, dc As notesdocumentcollection
		Dim pos As Long, i As Integer, docUnidad As NotesDocument
		Dim vAux As New Vector(0), flagSave As Boolean
		
		If Roles.CantElem = 0 Then Error ERROR_INCORRECT_PARAMETER, _
		MSG_ERROR_INCORRECT_PARAMETER
		
		Set vistaUnidades = dbOrg.GetView(VISTA_ORGANIZACION_BUSQUEDAUNIDADES)
		If vistaUnidades Is Nothing Then _
		Error ERROR_VIEW_NOT_FOUND,MSG_ERROR_VIEW_NOT_FOUND & " " & VISTA_ORGANIZACION_BUSQUEDAUNIDADES
		
		Set docUnidad = vistaUnidades.GetDocumentByKey(unidad,True)
		If docUnidad Is Nothing Then _
		Error ERROR_DOCUMENT_NOT_FOUND,MSG_ERROR_DOCUMENT_NOT_FOUND & " Unidad"
		flagSave = False
		For i = 1 To Roles.CantElem
			
			Delete vAux
			Set vAux = Nothing
			Set vAux = New Vector(0)
			
			Select Case Roles.GetElement(i)
			Case ROL_CREADOR : 
				vAux.values = docUnidad.getItemValue(CAMPO_ORGROL_CREADOR)
				If Not vAux.isMember(sNombre,pos,False) Then 
					vAux.InsertElement sNombre, vAux.cantElem + 1
					docUnidad.ReplaceItemValue CAMPO_ORGROL_CREADOR, vAux.Values
					flagSave=True
				End If
			Case ROL_RECEPTOR: 
				vAux.values = docUnidad.getItemValue(CAMPO_ORGROL_RECEPTOR)
				If Not vAux.isMember(sNombre,pos,False) Then 
					vAux.InsertElement sNombre ,vAux.cantElem + 1
					docUnidad.ReplaceItemValue CAMPO_ORGROL_RECEPTOR, vAux.Values
					flagSave=True
				End If
			Case ROL_EDITOR  : 
				vAux.values = docUnidad.getItemValue(CAMPO_ORGROL_EDITOR)
				If Not vAux.isMember(sNombre,pos,False) Then 
					vAux.InsertElement sNombre ,vAux.cantElem + 1
					docUnidad.ReplaceItemValue CAMPO_ORGROL_EDITOR, vAux.Values
					flagSave=True
				End If
			Case ROL_FIRMANTE: 
				vAux.values = docUnidad.getItemValue(CAMPO_ORGROL_FIRMANTE)
				If Not vAux.isMember(sNombre,pos,False) Then
					vAux.InsertElement sNombre ,vAux.cantElem + 1
					docUnidad.ReplaceItemValue CAMPO_ORGROL_FIRMANTE, vAux.Values
					flagSave=True
				End If
			Case ROL_PASE    : 
				vAux.values = docUnidad.getItemValue(CAMPO_ORGROL_PASE)
				If Not vAux.isMember(sNombre,pos,False) Then
					vAux.InsertElement sNombre ,vAux.cantElem + 1
					docUnidad.ReplaceItemValue CAMPO_ORGROL_PASE, vAux.Values
					flagSave=True
				End If
			Case ROL_GESTION : 
				vAux.values = docUnidad.getItemValue(CAMPO_ORGROL_GESTION)
				If Not vAux.isMember(sNombre,pos,False) Then
					vAux.InsertElement sNombre ,vAux.cantElem + 1
					docUnidad.ReplaceItemValue CAMPO_ORGROL_GESTION, vAux.Values
					flagSave=True
				End If 
			Case ROL_AMPLIARPLAZO : 
				vAux.values = docUnidad.getItemValue(CAMPO_ORGROL_AMPLIARPLAZO)
				If Not vAux.isMember(sNombre,pos,False) Then
					vAux.InsertElement sNombre ,vAux.cantElem + 1
					docUnidad.ReplaceItemValue CAMPO_ORGROL_AMPLIARPLAZO, vAux.Values
					flagSave=True
				End If 
			Case ROL_MANEJARCONF : 
				vAux.values = docUnidad.getItemValue(CAMPO_ORGROL_MANEJARCONF)
				If Not vAux.isMember(sNombre,pos,False) Then
					vAux.InsertElement sNombre ,vAux.cantElem + 1
					docUnidad.ReplaceItemValue CAMPO_ORGROL_MANEJARCONF, vAux.Values
					flagSave=True
				End If 
			Case ROL_CARTAS
				vAux.values = docUnidad.GetItemValue(CAMPO_ORGROL_CARTAS)
				If Not vAux.isMember(sNombre,pos,False) Then
					vAux.InsertElement sNombre ,vAux.cantElem + 1
					docUnidad.ReplaceItemValue CAMPO_ORGROL_CARTAS, vAux.Values
					flagSave=True
				End If 
			Case ROL_ARCHIVO
				vAux.values = docUnidad.getItemValue(CAMPO_ORGROL_ARCHIVO)
				If Not vAux.isMember(sNombre,pos,False) Then
					vAux.InsertElement sNombre ,vAux.cantElem + 1
					docUnidad.ReplaceItemValue CAMPO_ORGROL_ARCHIVO, vAux.Values
					flagSave=True
				End If 
			Case Else
				Error ERROR_INCORRECT_OPTION, MSG_ERROR_INCORRECT_OPTION & " Rol: " & Roles.GetElement(i)
		End Select
		Next
		
		If flagSave Then
			If Not docUnidad.Save(False,False) Then _
			Error ERROR_CANT_SAVE_DOCUMENT,MSG_ERROR_CANT_SAVE_DOCUMENT + " de Unidad"
		End If
		Exit Property		
HANDLER:
		Call RegistraryGenerarError(NOMBRE_APLICACION,"Usuario - Procedimiento - Set Roles","")
		Exit Property
	End Property
	
	'******************************************************************************************************************
	
	Public Property Get ComunicacionesEnUnidad (ByVal unidad As String) As Vector
		'Devuelve los Codigos de las comunicaciones que pertenecen a la unidad para los cuales
		'el usuario es miembro
		On Error GoTo HANDLER
		
		Dim s As New NotesSession
		Dim vistaMCUU As NotesView
		Dim vistaOrg As NotesView
		Dim comsAux As NotesDocumentCollection
		Dim key As Variant
		Dim docUnidad As NotesDocument
		Dim AbbName As NotesName
		Dim i As Integer
		Dim docComAux As NotesDocument
		

		Set ComunicacionesEnUnidad = New Vector(0)
		Set vistaOrg = dbOrg.GetView(VISTA_ORGANIZACION_BUSQUEDAUNIDADES)
		If vistaOrg Is Nothing Then _
		Error ERROR_VIEW_NOT_FOUND,MSG_ERROR_VIEW_NOT_FOUND & " " & _
		VISTA_ORGANIZACION_BUSQUEDAUNIDADES
		
		Set docUnidad = vistaOrg.GetDocumentbyKey(unidad, True)
		If docUnidad Is Nothing Then _
		Error ERROR_DOCUMENT_NOT_FOUND,MSG_ERROR_DOCUMENT_NOT_FOUND & " Unidad"
		
		'Creo el nombre abreviado para la busqueda en la vista
		Set AbbName = s.createname(sNombre)
		'obtengo la vista de miembros de cominicaciones por usuario unidad
		Set vistaMCUU = dbOrg.Getview(VISTA_MIEMBROS_COM_POUSUUNI)
		If vistaMCUU Is Nothing Then _
		Error ERROR_VIEW_NOT_FOUND,MSG_ERROR_VIEW_NOT_FOUND & " " & _
		VISTA_MIEMBROS_COM_POUSUUNI
		
		'key es la clave de busqueda en la vista, posee el nombre del usuario y la unidad
		key = AbbName.abbreviated +"##"+docUnidad.Getitemvalue("sNroUnidad")(0)
		
		'obtengo todos las comunicaciones para los cuales el usuario es miembro
		Set comsAux = vistaMCUU.Getalldocumentsbykey(key)
		If comsAux Is Nothing Then _
		Error ERROR_DOCUMENT_NOT_FOUND,MSG_ERROR_DOCUMENT_NOT_FOUND & "Comunicaciones"
		If comsAux.Count = 0 Then _
		Exit property
		
		'Agrego los sCodigoComm (codigos de comunicacion) al vector a retornar
		Call ComunicacionesEnUnidad.insertElement(comsAux.Getfirstdocument().Getitemvalue("sCodigoCom")(0), ComunicacionesEnUnidad.cantElem +1)	
		Set docComAux = comsAux.Getfirstdocument()
		For i=1 To comsAux.count -1
			Set docComAux = comsAux.getnextdocument(docComAux)
			Call ComunicacionesEnUnidad.insertElement(docComAux.Getitemvalue("sCodigoCom")(0), ComunicacionesEnUnidad.cantElem + 1)
		Next

		Exit Property		
HANDLER:
		Call RegistraryGenerarError(NOMBRE_APLICACION,"Usuario - Procedimiento - Get ComunicacionesEnUnidad","")
		Exit Property
	End Property
	
	'******************************************************************************************************************			
	
	Public Property Get RolesComunicacion (ByVal codCom As Variant, ByVal unidad As String) As vector
		'Dado un formulario y una unidad, devuelve los roles que posee el usuario en el mismo
		On Error GoTo HANDLER
		
		Dim vistaMCUF As NotesView
		Dim vistaOrg As NotesView
		Dim docComunicacion As NotesDocument
		Dim docUnidad As NotesDocument
		Dim vRolAux As Vector
		Dim pos As Long
		
		
		Set RolesComunicacion = New Vector(0)
		
		Set vistaOrg = dbOrg.GetView(VISTA_ORGANIZACION_BUSQUEDAUNIDADES)
		If vistaOrg Is Nothing Then _
		Error ERROR_VIEW_NOT_FOUND,MSG_ERROR_VIEW_NOT_FOUND & " " & _
		VISTA_ORGANIZACION_BUSQUEDAUNIDADES
		
		Set docUnidad = vistaOrg.GetDocumentbyKey(unidad, True)
		If docUnidad Is Nothing Then _
		Error ERROR_DOCUMENT_NOT_FOUND,MSG_ERROR_DOCUMENT_NOT_FOUND & " Unidad"
		
		Set vistaMCUF = dbOrg.Getview(VISTA_MIEMBROS_COM_PORUNIDADCOM)
		If vistaMCUF Is Nothing Then _
		Error ERROR_VIEW_NOT_FOUND,MSG_ERROR_VIEW_NOT_FOUND & " " & _
		VISTA_MIEMBROS_COM_PORUNIDADCOM

		Set docComunicacion = vistaMCUF.getdocumentbykey(docUnidad.Getitemvalue("sNroUnidad")(0)+"##"+codCom)
		If docComunicacion Is Nothing Then _
		Error ERROR_DOCUMENT_NOT_FOUND,MSG_ERROR_DOCUMENT_NOT_FOUND & "Comunicacion"
		
		'Ahora obtengo los miembros de cada uno de los roles y me fijo (por cada rol) si el usuario
		'tiene ese rol. Si lo tiene, agrego el ROL al vector a retornar
		Set vRolAux = New Vector(0)
		vRolAux.values = docComunicacion.getItemValue(CAMPO_ORGROL_CREADOR)
		If vRolAux.isMember(sNombre,pos,False) Then _
		RolesComunicacion.InsertElement ROL_CREADOR ,RolesComunicacion.cantElem + 1
		
		Set vRolAux = New Vector(0)
		vRolAux.values = docComunicacion.getItemValue(CAMPO_ORGROL_RECEPTOR)
		If vRolAux.isMember(sNombre,pos,False) Then _
		RolesComunicacion.InsertElement ROL_RECEPTOR,RolesComunicacion.cantElem + 1
		
		
		Set vRolAux = New Vector(0)
		vRolAux.values = docComunicacion.getItemValue(CAMPO_ORGROL_FIRMANTE)
		If vRolAux.isMember(sNombre,pos,False) Then _
		RolesComunicacion.InsertElement ROL_FIRMANTE,RolesComunicacion.cantElem + 1
		

		Set vRolAux = New Vector(0)
		vRolAux.values = docComunicacion.getItemValue(CAMPO_ORGROL_ARCHIVO_FORM)
		If vRolAux.isMember(sNombre,pos,False) Then _
		RolesComunicacion.InsertElement ROL_ARCHIVO_FORM,RolesComunicacion.cantElem + 1
		
		Set vRolAux = New Vector(0)
		vRolAux.values = docComunicacion.getItemValue(CAMPO_ORGROL_ENVIAR)
		If vRolAux.isMember(sNombre,pos,False) Then _
		RolesComunicacion.InsertElement ROL_ENVIAR,RolesComunicacion.cantElem + 1
		
		Set vRolAux = New Vector(0)
		vRolAux.values = docComunicacion.getItemValue(CAMPO_ORGROL_VERTODOS)
		If vRolAux.isMember(sNombre,pos,False) Then _
		RolesComunicacion.InsertElement ROL_VERTODOS,RolesComunicacion.cantElem + 1
		
		Exit Property
HANDLER:
		Call RegistraryGenerarError(NOMBRE_APLICACION,"Usuario - Procedimiento - Get RolesComunicaciones","")
		Exit Property
		
		
	End Property
	
	'******************************************************************************************************************
	
	Public Property Set RolesComunicacion (ByVal codCom As Variant, ByVal unidad As String) As Vector
		On Error GoTo HANDLER
		
		
		Dim vistaMCUC As NotesView
		Dim vistaOrg As NotesView
		Dim docComunicacion As NotesDocument
		Dim docUnidad As NotesDocument
		Dim vRolAux As Vector
		Dim pos As Long
		Dim flagSave As Boolean
		Dim vAux As Vector
		Dim i As Integer
		
		If RolesComunicacion.CantElem = 0 Then Error ERROR_INCORRECT_PARAMETER, _
		MSG_ERROR_INCORRECT_PARAMETER
		
		Set vAux = New Vector(0)
		
		Set vistaOrg = dbOrg.GetView(VISTA_ORGANIZACION_BUSQUEDAUNIDADES)
		If vistaOrg Is Nothing Then _
		Error ERROR_VIEW_NOT_FOUND,MSG_ERROR_VIEW_NOT_FOUND & " " & _
		VISTA_ORGANIZACION_BUSQUEDAUNIDADES
		
		Set docUnidad = vistaOrg.GetDocumentbyKey(unidad, True)
		If docUnidad Is Nothing Then _
		Error ERROR_DOCUMENT_NOT_FOUND,MSG_ERROR_DOCUMENT_NOT_FOUND & " Unidad"
		
		'obtengo la vista de miembros de comunicacion por unidad y codigo de comunicacion
		Set vistaMCUC = dbOrg.Getview(VISTA_MIEMBROS_COM_PORUNIDADCOM)
		If vistaMCUC Is Nothing Then _
		Error ERROR_VIEW_NOT_FOUND,MSG_ERROR_VIEW_NOT_FOUND & " " & _
		VISTA_MIEMBROS_COM_PORUNIDADCOM

		'obtengo el documento de miembros de comunicacion de codigo codcom en la unidad sNroUnidad
		Set docComunicacion = vistaMCUC.getdocumentbykey(docUnidad.Getitemvalue("sNroUnidad")(0)+"##"+codCom)
		If docComunicacion Is Nothing Then _
		Error ERROR_DOCUMENT_NOT_FOUND,MSG_ERROR_DOCUMENT_NOT_FOUND & "Comunicacion"
		flagSave = False
		
		'Itero tantas veces como Roles tenga el vector al cual se seteo RolesComunicacion
		'En cada case, me fijo si el usuario ya es miembro de ese rol en la comunicacion
		'de no serlo, le agrego ese rol
		For i = 1 To RolesComunicacion.CantElem
			Delete vAux
			Set vAux = Nothing
			Set vAux = New Vector(0)
			Select Case RolesComunicacion.GetElement(i)
			Case ROL_CREADOR : 
				vAux.values = docComunicacion.getItemValue(CAMPO_ORGROL_CREADOR)
				If Not vAux.isMember(sNombre,pos,False) Then 
					vAux.InsertElement sNombre, vAux.cantElem + 1
					docComunicacion.ReplaceItemValue CAMPO_ORGROL_CREADOR, vAux.Values
					flagSave=True
				End If
			Case ROL_RECEPTOR: 
				vAux.values = docComunicacion.getItemValue(CAMPO_ORGROL_RECEPTOR)
				If Not vAux.isMember(sNombre,pos,False) Then 
					vAux.InsertElement sNombre ,vAux.cantElem + 1
					docComunicacion.ReplaceItemValue CAMPO_ORGROL_RECEPTOR, vAux.Values
					flagSave=True
				End If
			Case ROL_ENVIAR  : 
				vAux.values = docComunicacion.getItemValue(CAMPO_ORGROL_ENVIAR)
				If Not vAux.isMember(sNombre,pos,False) Then 
					vAux.InsertElement sNombre ,vAux.cantElem + 1
					docComunicacion.ReplaceItemValue CAMPO_ORGROL_ENVIAR, vAux.Values
					flagSave=True
				End If
			Case ROL_FIRMANTE: 
				vAux.values = docComunicacion.getItemValue(CAMPO_ORGROL_FIRMANTE)
				If Not vAux.isMember(sNombre,pos,False) Then
					vAux.InsertElement sNombre ,vAux.cantElem + 1
					docComunicacion.ReplaceItemValue CAMPO_ORGROL_FIRMANTE, vAux.Values
					flagSave=True
				End If
			Case ROL_VERTODOS   : 
				vAux.values = docComunicacion.getItemValue(CAMPO_ORGROL_VERTODOS)
				If Not vAux.isMember(sNombre,pos,False) Then
					vAux.InsertElement sNombre ,vAux.cantElem + 1
					docComunicacion.ReplaceItemValue CAMPO_ORGROL_VERTODOS, vAux.Values
					flagSave=True
				End If
			Case ROL_ARCHIVO_FORM
				vAux.values = docComunicacion.getItemValue(CAMPO_ORGROL_ARCHIVO_FORM)
				If Not vAux.isMember(sNombre,pos,False) Then
					vAux.InsertElement sNombre ,vAux.cantElem + 1
					docComunicacion.ReplaceItemValue CAMPO_ORGROL_ARCHIVO_FORM, vAux.Values
					flagSave=True
				End If 
			Case Else
				Error ERROR_INCORRECT_OPTION, MSG_ERROR_INCORRECT_OPTION & " Rol: " & RolesComunicacion.getElement(i)
		End Select
		Next
		
		If flagSave Then
			If Not docComunicacion.Save(False,False) Then _
			Error ERROR_CANT_SAVE_DOCUMENT,MSG_ERROR_CANT_SAVE_DOCUMENT + " de Formulario"
		End If

		Exit Property				
HANDLER:
		Call RegistraryGenerarError(NOMBRE_APLICACION,"Usuario - Procedimiento - Set RolesComunicacion","")
		Exit Property
	End Property
	
	'******************************************************************************************************************
	Public Sub Retomarfunciones(Byval unidad As String,docSuplencia As NotesDocument)
		On Error Goto HANDLER
		
		Dim vistaSuplencias As NotesView, vistaUnidades As NotesView, pos As Long
		Dim i As Integer,  vAux As New Vector(0)
		Dim vRolesAgregadosSuplente As New vector(0), docUnidad As NotesDocument
		Dim vSuplentes As vector , j As Integer
		
		
		Set vistaUnidades = dbOrg.GetView(VISTA_ORGANIZACION_BUSQUEDAUNIDADES)
		If vistaUnidades Is Nothing Then _
		Error ERROR_VIEW_NOT_FOUND,MSG_ERROR_VIEW_NOT_FOUND & " " & VISTA_ORGANIZACION_BUSQUEDAUNIDADES
		
		Set vSuplentes = New Vector(0)
		vSuplentes.values = docSuplencia.GetItemValue(CAMPO_NOMBRE_USUARIO_SUPLENTE)
		
		Set docUnidad = vistaUnidades.GetDocumentByKey(unidad,True)
		
		If docUnidad Is Nothing Then _
		Error ERROR_DOCUMENT_NOT_FOUND,MSG_ERROR_DOCUMENT_NOT_FOUND & " Unidad"
		
		For j = 1 To vSuplentes.cantElem
			vRolesAgregadosSuplente.values = docSuplencia.GetItemValue(replaceSubstring(vSuplentes.Getelement(j)," ","_", 0) & "_RolesAdd")
			
			For i = 1 To vRolesAgregadosSuplente.CantElem
				
				Delete vAux
				Set vAux = Nothing
				Set vAux = New Vector(0)
				
				Select Case vRolesAgregadosSuplente.GetElement(i)
				Case ROL_CREADOR : 
					vAux.values = docUnidad.getItemValue(CAMPO_ORGROL_CREADOR)
					If vAux.isMember(vSuplentes.getelement(j),pos,False) Then 
						vAux.DeleteElement pos
						docUnidad.ReplaceItemValue CAMPO_ORGROL_CREADOR, vAux.Values
					End If
				Case ROL_RECEPTOR: 
					vAux.values = docUnidad.getItemValue(CAMPO_ORGROL_RECEPTOR)
					If vAux.isMember(vSuplentes.getelement(j),pos,False) Then 
						vAux.DeleteElement pos
						docUnidad.ReplaceItemValue CAMPO_ORGROL_RECEPTOR, vAux.Values
					End If
				Case ROL_EDITOR  : 
					vAux.values = docUnidad.getItemValue(CAMPO_ORGROL_EDITOR)
					If vAux.isMember(vSuplentes.getelement(j),pos,False) Then 
						vAux.deleteElement pos
						docUnidad.ReplaceItemValue CAMPO_ORGROL_EDITOR, vAux.Values
					End If
				Case ROL_FIRMANTE: 
					vAux.values = docUnidad.getItemValue(CAMPO_ORGROL_FIRMANTE)
					If vAux.isMember(vSuplentes.getelement(j),pos,False) Then
						vAux.deleteElement pos
						docUnidad.ReplaceItemValue CAMPO_ORGROL_FIRMANTE, vAux.Values
					End If
				Case ROL_PASE    : 
					vAux.values = docUnidad.getItemValue(CAMPO_ORGROL_PASE)
					If vAux.isMember(vSuplentes.getelement(j),pos,False) Then
						vAux.deleteElement pos
						docUnidad.ReplaceItemValue CAMPO_ORGROL_PASE, vAux.Values
					End If
				Case ROL_GESTION : 
					vAux.values = docUnidad.getItemValue(CAMPO_ORGROL_GESTION)
					If vAux.isMember(vSuplentes.getelement(j),pos,False) Then
						vAux.deleteElement pos
						docUnidad.ReplaceItemValue CAMPO_ORGROL_GESTION, vAux.Values
					End If 
				Case ROL_AMPLIARPLAZO : 
					vAux.values = docUnidad.getItemValue(CAMPO_ORGROL_AMPLIARPLAZO)
					If vAux.isMember(vSuplentes.getelement(j),pos,False) Then
						vAux.deleteElement pos
						docUnidad.ReplaceItemValue CAMPO_ORGROL_AMPLIARPLAZO, vAux.Values
					End If 
				Case ROL_MANEJARCONF : 
					vAux.values = docUnidad.getItemValue(CAMPO_ORGROL_MANEJARCONF)
					If vAux.isMember(vSuplentes.getelement(j),pos,False) Then
						vAux.deleteElement pos
						docUnidad.ReplaceItemValue CAMPO_ORGROL_MANEJARCONF, vAux.Values
					End If 
				Case ROL_ARCHIVO : 
					vAux.values = docUnidad.getItemValue(CAMPO_ORGROL_ARCHIVO)
					If vAux.isMember(vSuplentes.getelement(j),pos,False) Then
						vAux.deleteElement pos
						docUnidad.ReplaceItemValue CAMPO_ORGROL_ARCHIVO, vAux.Values
					End If 
				Case ROL_CARTAS : 
					vAux.values = docUnidad.getItemValue(CAMPO_ORGROL_CARTAS)
					If vAux.isMember(vSuplentes.getelement(j),pos,False) Then
						vAux.deleteElement pos
						docUnidad.ReplaceItemValue CAMPO_ORGROL_CARTAS, vAux.Values
					End If 	
				Case Else
					Error ERROR_INCORRECT_OPTION, MSG_ERROR_INCORRECT_OPTION & " Rol: " & vRolesAgregadosSuplente.GetElement(i)
			End Select
			Next
		Next		
		docUnidad.ReplaceItemValue "fechaActSupl",Now
		Call docSuplencia.ReplaceItemValue("ccEstado","Finalizada")
		docSuplencia.Save True,False
		If Not docUnidad.Save(False,False) Then _
		Error ERROR_CANT_SAVE_DOCUMENT,MSG_ERROR_CANT_SAVE_DOCUMENT + " de Unidad"
		
		docSuplencia.ReplaceItemValue CAMPO_ORGROL_SUPLENCIA_FINALIZADA	, VALOR_SUPLENCIA_FINALIZADA
		If Not docSuplencia.Save(False,False) Then _
		Error ERROR_CANT_SAVE_DOCUMENT,MSG_ERROR_CANT_SAVE_DOCUMENT + " de Suplencia"		
		
		Exit Sub		
HANDLER:
		Call RegistraryGenerarError(NOMBRE_APLICACION,"Usuario - Procedimiento - RetomarFunciones","")
		Exit Sub
	End Sub
	'*******************************************************************************************************************		
	
	Public Sub RetomarfuncionesFormulario(ByVal codForm As Variant ,ByVal unidad As String,docSuplencia As NotesDocument)
		On Error GoTo HANDLER
		
		Dim vistaSuplencias As NotesView, vistaUnidades As NotesView, pos As Long
		Dim i As Integer,  vAux As New Vector(0)
		Dim vRolesAgregadosSuplente As New vector(0), docUnidad As NotesDocument
		Dim vSuplentes As vector , j As Integer
		Dim vistaMFUF As NotesView
		Dim docFormulario As NotesDocument
		Dim rolesAddSupl As New Vector(0)
		Dim flagsave As Boolean
		'El flag save pasa a ser true cuando se modifica algo del documento
		'solo ahi puede ser salvado el mismo
		flagSave=false
		
		Set vistaUnidades = dbOrg.GetView(VISTA_ORGANIZACION_BUSQUEDAUNIDADES)
		If vistaUnidades Is Nothing Then _
		Error ERROR_VIEW_NOT_FOUND,MSG_ERROR_VIEW_NOT_FOUND & " " & VISTA_ORGANIZACION_BUSQUEDAUNIDADES
		
		Set vSuplentes = New Vector(0)
		vSuplentes.values = docSuplencia.GetItemValue(CAMPO_NOMBRE_USUARIO_SUPLENTE)
		
		Set docUnidad = vistaUnidades.GetDocumentByKey(unidad,True)
		
		If docUnidad Is Nothing Then _
		Error ERROR_DOCUMENT_NOT_FOUND,MSG_ERROR_DOCUMENT_NOT_FOUND & " Unidad"
		
		'vista de miembros de formularios por unidad y codigo de formulario
		Set vistaMFUF = dbOrg.Getview(VISTA_MIEMBROS_FORMULARIO_PORUNIDADFORM)
		If vistaMFUF Is Nothing Then _
		Error ERROR_VIEW_NOT_FOUND,MSG_ERROR_VIEW_NOT_FOUND & " " & _
		VISTA_MIEMBROS_FORMULARIO_PORUNIDADFORM
		
		'obtengo el documento del formulario correspondiente a la unidad y codigo pasados como parametros
		'a esta funcion 
		Set docFormulario = vistaMFUF.getdocumentbykey(docUnidad.Getitemvalue("sNroUnidad")(0)+"##"+codForm)
		If docFormulario Is Nothing Then _
		Error ERROR_DOCUMENT_NOT_FOUND,MSG_ERROR_DOCUMENT_NOT_FOUND & "Formulario"
		
		'Si tiene roles agregados en este formulario se le quitan, sino, no se hace nada
		'recordemos que se crea un campo en el docSuplencia por cada formulario en el cual
		'el suplente recibe nuevos roles
		If docSuplencia.hasitem(codform & "_RolesAdd") then
			rolesAddSupl.values = docSuplencia.Getitemvalue(codform & "_RolesAdd")
			For i = 1 To rolesAddSupl.CantElem
				Delete vAux
				Set vAux = Nothing
				Set vAux = New Vector(0)
				Select Case rolesAddSupl.GetElement(i)
				Case ROL_CREADOR : 
					vAux.values = docFormulario.getItemValue(CAMPO_ORGROL_CREADOR)
					If  vAux.isMember(vSuplentes.First,pos,False) Then 
						vAux.deleteElement pos
						docFormulario.ReplaceItemValue CAMPO_ORGROL_CREADOR, vAux.Values
						flagSave=True
					End If
				Case ROL_RECEPTOR: 
					vAux.values = docFormulario.getItemValue(CAMPO_ORGROL_RECEPTOR)
					If  vAux.isMember(vSuplentes.First,pos,False) Then 
						vAux.deleteElement pos
						docFormulario.ReplaceItemValue CAMPO_ORGROL_RECEPTOR, vAux.Values
						flagSave=True
					End If
				Case ROL_EDITOR  : 
					vAux.values = docFormulario.getItemValue(CAMPO_ORGROL_EDITOR)
					If  vAux.isMember(vSuplentes.First,pos,False) Then 
						vAux.deleteElement pos
						docFormulario.ReplaceItemValue CAMPO_ORGROL_EDITOR, vAux.Values
						flagSave=True
					End If
				Case ROL_FIRMANTE: 
					vAux.values = docFormulario.getItemValue(CAMPO_ORGROL_FIRMANTE)
					If  vAux.isMember(vSuplentes.First,pos,False) Then
						vAux.deleteElement pos
						docFormulario.ReplaceItemValue CAMPO_ORGROL_FIRMANTE, vAux.Values
						flagSave=True
					End If
				Case ROL_PASE    : 
					vAux.values = docFormulario.getItemValue(CAMPO_ORGROL_PASE)
					If  vAux.isMember(vSuplentes.First,pos,False) Then
						vAux.deleteElement pos
						docFormulario.ReplaceItemValue CAMPO_ORGROL_PASE, vAux.Values
						flagSave=True
					End If
				Case ROL_FINALIZAR    : 
					vAux.values = docFormulario.getItemValue(CAMPO_ORGROL_FINALIZAR)
					If  vAux.isMember(vSuplentes.First,pos,False) Then
						vAux.deleteElement pos
						docFormulario.ReplaceItemValue CAMPO_ORGROL_FINALIZAR, vAux.Values
						flagSave=True
					End If
				Case ROL_ARCHIVO_FORM
					vAux.values = docFormulario.getItemValue(CAMPO_ORGROL_ARCHIVO_FORM)
					If  vAux.isMember(vSuplentes.First,pos,False) Then
						vAux.deleteElement pos
						docFormulario.ReplaceItemValue CAMPO_ORGROL_ARCHIVO_FORM, vAux.Values
						flagSave=True
					End If 
				Case Else
					Error ERROR_INCORRECT_OPTION, MSG_ERROR_INCORRECT_OPTION & " Rol: " & rolesAddSupl.getElement(i)
			End Select
			Next
		
			If flagSave Then	
				If Not docFormulario.Save(False,False) Then _
				Error ERROR_CANT_SAVE_DOCUMENT,MSG_ERROR_CANT_SAVE_DOCUMENT + " de Formulario"
			End if
		End if
		Exit Sub
HANDLER:
		Call RegistraryGenerarError(NOMBRE_APLICACION,"Usuario - Procedimiento - RetomarFuncionesFormulario","")
		Exit Sub
	End sub

    '*******************************************************************************************************************

	Public Sub RetomarfuncionesComunicacion(ByVal codCom As Variant ,ByVal unidad As String,docSuplencia As NotesDocument)
		On Error GoTo HANDLER
		
		Dim vistaSuplencias As NotesView, vistaUnidades As NotesView, pos As Long
		Dim i As Integer,  vAux As New Vector(0)
		Dim vRolesAgregadosSuplente As New vector(0), docUnidad As NotesDocument
		Dim vSuplentes As vector , j As Integer
		Dim vistaMCUC As NotesView
		Dim docComunicacion As NotesDocument
		Dim rolesAddSupl As New Vector(0)
		Dim flagsave As Boolean
		'El flag save pasa a ser true cuando se modifica algo del documento
		'solo ahi puede ser salvado el mismo
		flagSave=False
		
		Set vistaUnidades = dbOrg.GetView(VISTA_ORGANIZACION_BUSQUEDAUNIDADES)
		If vistaUnidades Is Nothing Then _
		Error ERROR_VIEW_NOT_FOUND,MSG_ERROR_VIEW_NOT_FOUND & " " & VISTA_ORGANIZACION_BUSQUEDAUNIDADES
		
		Set vSuplentes = New Vector(0)
		vSuplentes.values = docSuplencia.GetItemValue(CAMPO_NOMBRE_USUARIO_SUPLENTE)
		
		Set docUnidad = vistaUnidades.GetDocumentByKey(unidad,True)
		
		If docUnidad Is Nothing Then _
		Error ERROR_DOCUMENT_NOT_FOUND,MSG_ERROR_DOCUMENT_NOT_FOUND & " Unidad"
		
		'vista de miembros de la comunicacion por unidad por codigo de comunicacion
		Set vistaMCUC = dbOrg.Getview(VISTA_MIEMBROS_COM_PORUNIDADCOM)
		If vistaMCUC Is Nothing Then _
		Error ERROR_VIEW_NOT_FOUND,MSG_ERROR_VIEW_NOT_FOUND & " " & _
		VISTA_MIEMBROS_COM_PORUNIDADCOM
		
		'obtengo el documento de la comunicacion cuyo codigo fue pasado como parametro a esta funcion
		Set docComunicacion = vistaMCUC.getdocumentbykey(docUnidad.Getitemvalue("sNroUnidad")(0)+"##"+codCom)
		If docComunicacion Is Nothing Then _
		Error ERROR_DOCUMENT_NOT_FOUND,MSG_ERROR_DOCUMENT_NOT_FOUND & "Comunicacion"
		
		'Si tiene roles agregados en esta comunicacion se le quitan, sino, no se hace nada
		'recordemos que se crea un campo en el docSuplencia por cada comunicacion en la cual
		'el suplente recibe nuevos roles
		If docSuplencia.hasitem("Com_" & codCom & "_RolesAdd") Then
			rolesAddSupl.values = docSuplencia.Getitemvalue("Com_" & codCom & "_RolesAdd")
			For i = 1 To rolesAddSupl.CantElem
				Delete vAux
				Set vAux = Nothing
				Set vAux = New Vector(0)
				Select Case rolesAddSupl.GetElement(i)
				Case ROL_CREADOR : 
					vAux.values = docComunicacion.getItemValue(CAMPO_ORGROL_CREADOR)
					If  vAux.isMember(vSuplentes.First,pos,False) Then 
						vAux.deleteElement pos
						docComunicacion.ReplaceItemValue CAMPO_ORGROL_CREADOR, vAux.Values
						flagSave=True
					End If
				Case ROL_RECEPTOR: 
					vAux.values = docComunicacion.getItemValue(CAMPO_ORGROL_RECEPTOR)
					If  vAux.isMember(vSuplentes.First,pos,False) Then 
						vAux.deleteElement pos
						docComunicacion.ReplaceItemValue CAMPO_ORGROL_RECEPTOR, vAux.Values
						flagSave=True
					End If
				Case ROL_ENVIAR  : 
					vAux.values = docComunicacion.getItemValue(CAMPO_ORGROL_ENVIAR)
					If  vAux.isMember(vSuplentes.First,pos,False) Then 
						vAux.deleteElement pos
						docComunicacion.ReplaceItemValue CAMPO_ORGROL_ENVIAR, vAux.Values
						flagSave=True
					End If
				Case ROL_FIRMANTE: 
					vAux.values = docComunicacion.getItemValue(CAMPO_ORGROL_FIRMANTE)
					If  vAux.isMember(vSuplentes.First,pos,False) Then
						vAux.deleteElement pos
						docComunicacion.ReplaceItemValue CAMPO_ORGROL_FIRMANTE, vAux.Values
						flagSave=True
					End If
				Case ROL_VERTODOS    : 
					vAux.values = docComunicacion.getItemValue(CAMPO_ORGROL_VERTODOS)
					If  vAux.isMember(vSuplentes.First,pos,False) Then
						vAux.deleteElement pos
						docComunicacion.ReplaceItemValue CAMPO_ORGROL_VERTODOS, vAux.Values
						flagSave=True
					End If
				Case ROL_ARCHIVO_FORM
					vAux.values = docComunicacion.getItemValue(CAMPO_ORGROL_ARCHIVO_FORM)
					If  vAux.isMember(vSuplentes.First,pos,False) Then
						vAux.deleteElement pos
						docComunicacion.ReplaceItemValue CAMPO_ORGROL_ARCHIVO_FORM, vAux.Values
						flagSave=True
					End If 
				Case Else
					Error ERROR_INCORRECT_OPTION, MSG_ERROR_INCORRECT_OPTION & " Rol: " & rolesAddSupl.getElement(i)
			End Select
			Next
		
			If flagSave Then	
				If Not docComunicacion.Save(False,False) Then _
				Error ERROR_CANT_SAVE_DOCUMENT,MSG_ERROR_CANT_SAVE_DOCUMENT + " de Comunicacion"
			End If
		End If
		Exit Sub
HANDLER:
		Call RegistraryGenerarError(NOMBRE_APLICACION,"Usuario - Procedimiento - RetomarFuncionesComunicacion","")
		Exit Sub
	End Sub


	'*******************************************************************************************************************	
	Public Property Get RealRoles(Byval Clavedb As String)As vector
		Dim db As New NotesDatabase("",""), vRealRoles As New vector(0)
		Dim acl As NotesACL,  entry As NotesACLEntry,Pers As Usuario
		
		If c Is Nothing Then Set c = New ConfigRD
		Set db = c.ReferenciarBaseDeDatos(Clavedb)
		
		If db Is Nothing Then _
		Error ERROR_DB_NOT_OPEN, MSG_ERROR_DB_NOT_OPEN + " " + Clavedb
		
		Set acl = db.ACL
		Set entry = acl.GetEntry( sNombre )
		If entry Is Nothing Then _
		Error ERROR_ENTRY_NOT_FOUND_IN_ACL, MSG_ERROR_ENTRY_NOT_FOUND_IN_ACL + " :" + sNombre
		
		Set RealRoles =entry.Roles
		
		Exit Property		
HANDLER:
		Call RegistraryGenerarError(NOMBRE_APLICACION,"Usuario - Procedimiento - Get RealRoles","")
		Exit Property
	End Property
	
	'******************************************************************************************************************	
	
	Public Property Set RealRoles(Byval Clavedb As String)As vector
		
		Dim  vRealRoles As New vector(0), db As New NotesDatabase("","")
		Dim acl As NotesACL,  entry As NotesACLEntry,Pers As Usuario, i As Integer
		
		If c Is Nothing Then Set c = New ConfigRD
		Set db = c.ReferenciarBaseDeDatos(Clavedb)
		
		If db Is Nothing Then _
		Error ERROR_DB_NOT_OPEN, MSG_ERROR_DB_NOT_OPEN + " " + Clavedb
		
		Set acl = db.ACL
		Set entry = acl.GetEntry( sNombre )
		
		If entry Is Nothing Then _
		Error ERROR_ENTRY_NOT_FOUND_IN_ACL, MSG_ERROR_ENTRY_NOT_FOUND_IN_ACL + " :" +sNombre
		
		For i=1 To RealRoles.cantElem
			Call entry.EnableRole( RealRoles.getElement(i) )
		Next
		acl.Save
		Exit Property		
HANDLER:
		Call RegistraryGenerarError(NOMBRE_APLICACION,"Usuario - Procedimiento - Set RealRoles","")
		Exit Property
	End Property
	
	'******************************************************************************************************************	
	
	Public Sub DisableRoles(Byval Clavedb As String, Byval rol As String)
		
		Dim db As New NotesDatabase("","") 
		Dim acl As NotesACL,  entry As NotesACLEntry,Pers As Usuario, i As Integer
		
		If c Is Nothing Then Set c = New ConfigRD
		Set db = c.ReferenciarBaseDeDatos(Clavedb)
		
		If db Is Nothing Then _
		Error ERROR_DB_NOT_OPEN, MSG_ERROR_DB_NOT_OPEN + " " + Clavedb
		
		Set acl = db.ACL
		Set entry = acl.GetEntry( sNombre )
		
		If entry Is Nothing Then _
		Error ERROR_ENTRY_NOT_FOUND_IN_ACL, MSG_ERROR_ENTRY_NOT_FOUND_IN_ACL + " :" + sNombre
		
		If rol<>"" Then
			Call entry.DisableRole( rol)
		End If
		
		acl.Save
		Exit Sub	
HANDLER:
		Call RegistraryGenerarError(NOMBRE_APLICACION,"Usuario - Procedimiento - DisableRoles","")
		Exit Sub
	End Sub
	
	'******************************************************************************************************************		
	
End Class
'++LotusScript Development Environment:2:1:replaceSubstring:2:8
Private Function replaceSubstring(Byval x As String, Byval repfrom As String, Byval repto As String, _
Byval caseflag As Integer) As String
	Dim pos As Long, lastpos As Long
	lastpos = 1
	Do
		pos = Instr(lastpos, x, repfrom, caseflag)
		If pos = 0 Then Exit Do
		replaceSubstring = replaceSubstring & Mid$(x, lastpos, pos-lastpos) & repto
		lastpos = pos + Len(repfrom)
	Loop
	replaceSubstring = replaceSubstring & Mid$(x, lastpos)
End Function











