'++LotusScript Development Environment:2:5:(Options):0:74
'******************************************************************************************************************	
'*
'*									CLASS <CONFIGURACION>
'*
'******************************************************************************************************************	

'*	CONSTRUCTOR
'*
'*		New()
'*			Constructor de la clase
'*
'*	PROPIEDADES
'*	
'*		Get/Set BaseDeDatos(Byval clave As String) As String
'*			Dada una clave retorna/setea el FilePath. 
'*			GET: Si no encuentra la clave retorna "". Si el profile no tiene cargadas las claves retorna error.
'*			SET: Si no lo encuentra genera un error ERRORCONF_CLAVE_NOTFOUND
'*
'*		Get/Set ServidorDomino(Byval clave As String) As String
'*			Dada una clave retorna/setea el Servidor. 
'*			GET: Si no encuentra la clave retorna "". Si el profile no tiene cargadas las claves retorna error.
'*			SET: Si no lo encuentra genera un error ERRORCONF_CLAVE_NOTFOUND
'*
'*		Get Claves() As vector
'*		Retorna un vector con la lista de claves de la tabla interoperabilidad
'*
'*		Get/Set Host(Byval clave As String) As String
'*			Dada una clave retorna/setea el Host.
'*			GET: Si no encuentra la clave retorna "". Si el profile no tiene cargadas las claves retorna error.
'*			SET: Si no lo encuentra genera un error ERRORCONF_CLAVE_NOTFOUND
'*
'*		Set Interoperabilidad() As Vector
'*			Recibe un vector de vectores con las columnas de la tabla
'*			Setea toda la informacion de la tabla de interoperabilidad con dichos vectores
'*
'*		Public Property Set FechasCreacionAuditoria As Variant
'*			Setea el Campo
'*
'*		Public Property Get FechasCreacionAuditoria As Variant
'*			Devuelve el campo
'*
'*		Public Property Get ClavesCreacionAuditoria As Variant
'*			Devuelve el campo
'*
'*		Public Property Set ClavesCreacionAuditoria As Variant
'*			Setea el Campo
'*
'*		Public Property Get TiempoMaximoAuditoria()As Integer
'*
'*
'*		Public Function insertLineaInteroperabilidad(vIns As Vector,nColOrdenar As Integer)
'*			nColOrdenar es la columna por la cual ordenar la tabla
'*			Inserta en forma ordenada segun  nColOrdenar
'*			Si nColOrdenar=0 inserta al final de la tabla
'*
'*		Public Sub addAuditoriaDate(sClave As String,dCreacion As Variant)
'*		dCreacion es de tipo Date, sClave es la clave de la base
'*
'*		Set LineaInteroperabilidad () As Vector
'*			Recibe un vector con los valores a agregar y agrega una línea a la tabla
'*             de interoperabilidad con ellos
'*
'*		Get/Set FormaDocumental() As Vector
'*			Retorna/setea una lista de formas documentales del sistema
'*
'*		Get/Set Administradores() As Vector
'*			Retorna/setea una lista de Administradores del sistema
'*		
'*		Get/Set CSS() As String
'*			Retorna/setea el estilo del sistema
'*		
'*		Get/Set FormatoNumerador(Byval clave As String) As String
'*			Retorna/setea el formato de numeración dada una clave
'*			SET: Si no lo encuentra genera un error ERRORCONF_CLAVE_NOTFOUND
'*
'*		Set FormatoNumeracion() As Vector
'*			Setea toda la información de la tabla de formato de numeración
'*
'*		Get/Set CantidadFirmas() As Integer
'*			Retorna/Setea la cantidad de Firmas necesarias para
'*			realizar el pase de un expediente a otra unidad
'*
'*		Get/Set TiempoArchivadoAutomatico() As Integer
'*			Retorna/Setea la cantidad de días en que se archivará
'*			en forma automática un expediente si no es modificado
'*			
'*		Get/Set DesvioDeRutas() As Integer
'*			Retorna/Setea la bandera booleana que permite desvios en la ruta
'*			de un expediente	
'*
'*		Get/Set TiempoMaximoActuacion() As Integer
'*			Retorna/Setea la cantidad máxima de días que tiene una oficina
'*			para actuar
'*
'*		Get/Set NotificarParaRecibir() As Integer
'*			Retorna/Setea si esta habilitada la Notificación de recepción de documentos
'*
'*		Get/Set TiempoMaximoActuacionExterna() As Integer
'*			Retorna/Setea la cantidad máxima de días que tiene una oficina
'*			para actuar
'*
'*		Get/Set TamañoMaximoAnexo() As Integer
'*			Retorna/Setea el tamaño maximo de los anexos por actuación
'*
'*		Get/Set TiposArchivosAnexos() As Integer
'*			Retorna/Setea u vector de los tipos de archivos que se pueden anexar
'*
'*		Get/Set TiempoMaximoDevolucion() As Integer
'*			Retorna/Setea el tiempo maximo de devolución de un expediente
'*
'*		Get/Set LectoresCaratula() As Integer
'*			Retorna/Setea la lista de lectores por defecto de las caratulas
'*
'*		Get/Set AutoresCaratula() As Integer
'*			Retorna/Setea la lista de autores por defecto de las caratulas
'*
'*		Get/Set LectoresActuacion() As Integer
'*			Retorna/Setea la lista de lectores por defecto de las actuaciones
'*
'*		Get/Set AutoresActuacion() As Integer
'*			Retorna/Setea la lista de autores por defecto de las actuaciones
'*
'*	MÉTODOS
'*
'*
'*		HabilitarNotificarArchivados()
'*			Habilita
'*
'*		DeshabilitarNotificarArchivados()
'*			Deshabilita
'*
'*		HabilitarNotificarRD()
'*			Habilita la notificacion de creación de la 
'*			Resolución Directorio a la persona/unidad que inicio el documento
'*
'*		DeshabilitarNotificarRD()
'*			deshabilitada la notificacion de creación de la 
'*			Resolución Directorio a la persona/unidad que inicio el documento
'*
'*		HabilitarNotificarRecepcion()
'*			Habilita la notificacion de hay nuevos
'*			documentos para recibir en la unidad
'*
'*		DeshabilitarNotificarRecepcion()
'*			Deshabilitada la notificacion de hay nuevos
'*			documentos para recibir en la unidad
'*
'*		HabilitarAlarmaProximoExpirar()
'*			Habilita la alarma de aviso que un documento
'*			está próximo a expirar el tiempo de tramitacion
'*
'*		DeshabilitarAlarmaProximoExpirar()
'*			Deshabilita la alarma de aviso que un documento
'*			está próximo a expirar el tiempo de tramitacion
'*
'*		HabilitarAlarmaJefeExpiro()
'*			Habilita la alarma al jefe de la unidad que expiro
'*			el tiempo de tramitacion de los documetos de la unidad
'*
'*		DeshabilitarAlarmaJefeExpiro()
'*			Deshabilita la alarma al jefe de la unidad que expiro
'*			el tiempo de tramitacion de los documetos de la unidad
'*
'*		HabilitarRutaLibre()
'*			Habilita la ruta libre
'*
'*		DeshabilitarRutaLibre()
'*			Deshabilita la ruta libre
'*
'*		ReferenciarBaseDeDatos(byval nombreBase as string) as NotesDatabase
'*			Retorna una referencia a la base de datos que recibe como parámetro.
'*			En caso de que no encuentra el nombre de la base en la configuración retorna Nothing
'*
'*		GetFirstDatabase() As NotesDatabase
'*			Esta funcion permite iterar sobre la lista de bases de datos de la
'*			configuración. Para continuar recorriendo la lista utilizar el
'*			método GetNextDatabase.
'*			Si no hay ninguna base de datos en la lista retorna Nothing.
'*
'*		GetNextDatabase(dbClave As NotesDatabase) As NotesDatabase
'*			Esta funcion retorna la siguiente base de datos en la lista.
'*			Si no hay ninguna base de datos en la lista retorna Nothing.
'*
'*		Save
'*			Salva la configuración del sistema. Siempre que se modifique la configuración
'*			se debe llamar a este método para que los cambios queden almacenados
'*			en la base de datos.
'*			Actualiza el doc profile de todas las bases que figuran en la tabla de interoperabilidad
'*			Nota: No actualiza las acl's con los administradores (se hace desde la interfase)
'*
'*		NumerarFormateado (NOMBRENUMERADOR As String) As String
'*             Devuelve el nro que corresponde según el nombre del numerador que recibe, con el formato 
'*             indicado en el doc de perfil para ese numerador
'*
'*		BaseDeDatosNroExp (nroexp As String) As NotesDatabase
'*			Dado un nro de expediente setea la base de datos de gestión documental que corresponda 
'*			para él y la devuelve. Si la base de dicho año no existe, la crea y agrega la linea a la tabla
'*             de interoperabilidad
'*			Suposiciones: 
'*				1) En el doc profile está el camino de la base templategestiondoc, la cual se va a tomar para crear otras bases
'*				2) La clave para las bases anuales de gestión documental está formada por la cte 
'*                     CLAVE_DBGESTIONDOC + los dos ultimos digitos del año	
'*		BaseDeDatosAnio (anio As String) As NotesDatabase
'*			Dado un año setea la base de datos de gestión documental que corresponda 
'*			para él y la devuelve. Si la base de dicho año no existe, la crea y agrega la linea a la tabla
'*             de interoperabilidad
'*			Suposiciones: 
'*				1) En el doc profile está el camino de la base templategestiondoc, la cual se va a tomar para crear otras bases
'*				2) La clave para las bases anuales de gestión documental está formada por la cte 
'*                     CLAVE_DBGESTIONDOC + los dos ultimos digitos del año	

'******************************************************************************************************************

Option Declare

Use "NumeradorClient"
Use "FuncionesGenerales"
Use "VectorClass 2.05"

'++LotusScript Development Environment:2:5:(Forward):0:1
Declare Public Class Configuracion

'++LotusScript Development Environment:2:5:(Declarations):0:10
'CONSTANTES PUBLICAS
Public Const CONF_SERVIDOR_ACTUAL						= "SERVER_ACTUAL"	
Public Const CONF_SERVIDOR_LOCAL						= "LOCAL"



'Claves de numeradores
Public Const NUMERADOR_EXP							= "EE_NroExp_yy"

'Campo de claves (se usa desde la base portal)
private Const CAMPO_CLAVE_DB 							= "sClave"

'ERRORES PARTICULARES DE LA CLASE
Public Const ERRORCONF_INTERNAL_ERROR					= 10001

Public Const ERRORCONF_CLAVE_NOTFOUND					= 10002
Public Const MSG_ERRORCONF_CLAVE_NOTFOUND				= "No se puede encontrar la clave en la tabla de interoperabilidad"

Public Const ERROR_NUMERATION							= 10003
Public Const MSG_ERROR_NUMERATION						= "No se puede asignar el número automático"

Public Const ERROR_PATH_INCOMPLETED					= 10005
Public Const MSG_ERROR_PATH_INCOMPLETED					= "La tabla de interoperabilidad no tiene el path completo"

Public Const ERROR_PROFILE_NOTHING						= 10006
Public Const MSG_ERROR_PROFILE_NOTHING					= "El documento de perfil no tiene toda la información necesaria"

'CONSTANTES PRIVADAS
Private Const NOMBRE_FORM_CONF						= "(ConfiguracionEv)"
Private Const CAMPO_RUTA_DB							= "sPath"
Private Const CAMPO_SERVIDOR_DB						= "sServidor"
Private Const CAMPO_HOST_DB 							= "sHost"
Private Const CAMPO_TIPORUTA							= "lTipoRutas"
Private Const CAMPO_NOTIFARCHIVADO						= "lNotifArchivado"
Private Const CAMPO_NOTIF_RD							= "lNotifRD"
Private Const CAMPO_NOTIFRECIBIR						= "lNotifRecibir"
Private Const CAMPO_ALARMAPROXEXPIRAR					= "lAlarmaProxExpirar"
Private Const CAMPO_ALARMAJEFEEXPIRO					= "lAlarmaJefeExpiro"
Private Const CAMPO_ADMINISTRADORES					= "sAdministradores"
Private Const CAMPO_CSS								= "sCSS"
Private Const CAMPO_FORMATO_NUMERACION					= "sFormato"
Private Const CAMPO_CLAVE_NUMERACION					= "sClaveNum"
Private Const CAMPO_FORMADOCUMENTAL					= "sFormaDoc"
Private Const CAMPO_CANTIDAD_FIRMAS					= "lCantidadFirmas"
Private Const CAMPO_ARCHIVOAUTOMATICO					= "nArchivadoAuto"
Private Const CAMPO_PERMITIRDESVIOS					= "lPermitirDesvios"
Private Const CAMPO_DIASMAXTRAMITE						= "nDiasMaxTramite"
Private Const CAMPO_DIASMAXTRAMITEETERNO				= "nDiasMaxTramiteExterno"
Private Const CAMPO_NOTIFICARPARAREVISAR				= "lNotifRevisar"
Private Const CAMPO_TAMMAXIMOANEXOS					= "nTamMaxAnexosAct"
Private Const CAMPO_TIPOSANEXOS						= "sTiposPermitidosAnexos"
Private Const CAMPO_TIEMPODEVOLUCION					="nTiempoMaximoDev"
Private Const CAMPO_TIEMPOVIDAAUDITORIA					="nTiempoVidaAuditoria"
Private Const CAMPO_CREACION_AUDITORIA					="dFechaCreacionAuditoria"
Private Const CAMPO_CLAVE_CREACION_AUDITORIA				="sClaveCreacionAuditoria"
Private Const CAMPO_LECTORES_CARATULA					= "sLectoresCaratula"
Private Const CAMPO_AUTORES_CARATULA					= "sAutoresCaratula"
Private Const CAMPO_LECTORES_ACTUACION					= "sLectoresActuacion"
Private Const CAMPO_AUTORES_ACTUACION					= "sAutoresActuacion"

'Valores de los campos
Private Const RUTA_HABILITADA							= "1"
Private Const RUTA_DESABILITADA						= "0"
Private Const NOTIFARCHIVADO_CHECKED					= "1"
Private Const NOTIFRD_CHECKED							= "1"
Private Const NOTIFRECIBIR_CHECKED						= "1"
Private Const ALARMAPROXEXPIRAR_CHECKED					= "1"
Private Const ALARMAJEFEEXPIRO_CHECKED					= "1"


private Const CAMPO_PROTOCOLO						="rProtocolo"
private Const CAMPO_PUERTO								="sPuerto"

'******************************************************************************************************************	
'*
'*									CLASS <CONFIGURACION>
'*
'******************************************************************************************************************	

'******************************************************************************************************************
Public Class Configuracion
'******************************************************************************************************************	
	
'MIEMBROS PRIVADOS
	Private ses As NotesSession
	Private docConfiguracion As NotesDocument
	Private vKeyDB As Vector
	Private vServer As Vector
	Private vHost As Vector
	Private vFilePath As Vector
	Private vFormNum As Vector	
	Private vKeyNum As Vector
	
'******************************************************************************************************************	
	
'FUNCIONES Y PROCEDIMIENTOS PRIVADOS	
	
	Private Function ObtenerNombreServidor(Byval sValor As String) As String
	' Retorna el verdadero valor del servidor en caso que sea una clave
		On Error Goto HANDLER
		
		If sValor = CONF_SERVIDOR_ACTUAL Then
			ObtenerNombreServidor = ses.CurrentDatabase.Server
		Elseif sValor = CONF_SERVIDOR_LOCAL Then
			ObtenerNombreServidor = ""
		Else
			ObtenerNombreServidor = sValor
		End If
		
		Exit Function
HANDLER:
		Call RegistraryGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Procedimiento ObtenerNombreServidor","")
		Exit Function
	End Function
	
'******************************************************************************************************************		
	
	Private Function AgregarInteroperabilidad(Byval clave As String, srv As String, host As String, path As String)
	'Recibe la lista de parámetros de una nueva linea y los agrega a la tabla de interoperabilidad	
		On Error Goto HANDLER
		
		Dim vNuevaLinea As Vector
		
		Set vNuevaLinea = New Vector(0)
		Call vNuevaLinea.insertElement(clave,1)
		Call vNuevaLinea.insertElement(srv,2)
		Call vNuevaLinea.insertElement(host,3)
		Call vNuevaLinea.insertElement(path,4)
		Set Me.LineaInteroperabilidad = vNuevaLinea
		
		Exit Function
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Funcion AgregarInteroperabilidad","")
		Exit Function
	End Function
	
'******************************************************************************************************************		
	
	Private Function PedirNumero (Byval nombrenumerador As String) As Long
	'Pide un número a la clase numeración para el numerador que recibe y lo devuelve
	'Suposiciones:
		' 1) Si se utiliza un numerador diferente por año, el nombre del numerador indicará que va 
		'    el año con yy o yyyy en el lugar que corresponda. Esta función sustituye ese indicador
		'	por el año actual
		On Error Goto HANDLER
		
		Dim num As NumClient, BASENUMERACION As String, SERVIDORNUMERACION As String
		
		'Sustituyo el indicador de año por el año actual
		nombrenumerador = SustituirAnio(nombrenumerador)
		
		'Pido el número
		'Busco srv y path de la base de numeracion
		SERVIDORNUMERACION  = Me.ServidorDomino(CLAVE_DBNUMERACION)
		BASENUMERACION  = Me.BaseDeDatos(CLAVE_DBNUMERACION)
		If (nombrenumerador <> "") And (BASENUMERACION <> "") Then
			'Creo el objeto numerador
			Set num = New NumClient(nombrenumerador,SERVIDORNUMERACION,BASENUMERACION)		
			PedirNumero = num.GetNumber()			
		Else
			Error ERROR_NUMERATION,MSG_ERROR_NUMERATION
		End If
		
		Exit Function
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Funcion PedirNumero","")
		Exit Function
	End Function
	
'******************************************************************************************************************		
	
	Private Function SustituirAnio (Byval formato As String)As String
	'Busca el indicador del año (yy o yyyy) dentro del formato y lo sustituye por el año actual
	'Si el indicador del año no está devuelve el formato como lo recibió
		On Error Goto HANDLER
		
		Dim anioactual As String, pos As Integer
		
		'Veo si va el año con cuatro digitos
		anioactual = Cstr(Year(Today))
		pos = Instr(formato, INDICADOR_AÑO_CUATRO_DIGITOS)
		If pos = 0 Then  'veo si va el año con dos digitos
			anioactual = Right(Cstr(Year(Today)),2)
			pos = Instr(formato, INDICADOR_AÑO_DOS_DIGITOS)
		End If
		If pos <> 0 Then  'va el año
			Mid$ (formato, pos,Len(anioactual)) = anioactual
		End If  'si no va el año no modifiqué nada al texto		
		SustituirAnio = formato
		
		Exit Function
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Funcion SustituirAnio","")
		Exit Function
	End Function
	
'******************************************************************************************************************		
	
	Private Function SustituirCantDigitos (Byval formato As String, Byval nro As String) As String
	'Chequea la cantidad de veces que aparece el indicador de un digito y lo sustituye
	'por el nro formateado con esa cantidad de digitos
		On Error Goto HANDLER
		
		Dim pos As Integer, digitos As Integer, prefijo As String, resto As String, sufijo As String
		
		'Busco la cantidad de dígitos para el número
		pos = Instr(formato,INDICADOR_DIGITO)	'debe haber por lo menos un indicador (digitos segun los que tenga el nro)
		If pos = 0 Then Error ERROR_INDICADOR_DIGITO_NOT_FOUND, MSG_ERROR_INDICADOR_DIGITO_NOT_FOUND
		digitos = 1
		prefijo = Left(formato, pos-1)
		resto = Right(formato, Len(formato)-pos)
		pos = Instr(resto,INDICADOR_DIGITO)		
		While pos <> 0  'cuento los dígitos
			digitos = digitos + 1
			resto = Right(resto, Len(resto)-pos)
			pos = Instr(resto,INDICADOR_DIGITO)
		Wend
		sufijo = resto
		'Agrego 0's al nro hasta llegar a la cant de dígitos
		While Len(nro)<digitos
			nro = "0" + nro
		Wend
		'Armo el nuevo formato
		SustituirCantDigitos = prefijo + nro + sufijo
		
		Exit Function
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Funcion SustituirCantDigitos","")
		Exit Function
	End Function
	
'******************************************************************************************************************		
	
	Private Function AnioNroExp(nroexp As String) As String
	'Devuelve el año correspondiente al nro de expediente que recibe
		On Error Goto HANDLER
		
		Dim formato As String, pos As Integer, largo As Integer
		
		'Busco el formato correpondiente al numerador de expedientes
		formato = Me.FormatoNumerador(NUMERADOR_EXP)  'Utilizo una constante que tiene el nombre del numerador de expedientes
		If formato = "" Then Error ERRORCONF_CLAVE_NOTFOUND, MSG_ERRORCONF_CLAVE_NOTFOUND+" "+NUMERADOR_EXP
		'Veo si está el año con 4 digitos
		pos = Instr(formato, INDICADOR_AÑO_CUATRO_DIGITOS)
		largo = Len(INDICADOR_AÑO_CUATRO_DIGITOS)
		If pos = 0 Then  'no está el año con 4 digitos, veo si va el año con dos
			pos = Instr(formato, INDICADOR_AÑO_DOS_DIGITOS)
			largo = Len(INDICADOR_AÑO_DOS_DIGITOS)
		End If
		If pos <> 0 Then  'si está alguno de los dos, saco el año del nro con dos digitos
			AnioNroExp = Right(Mid$(nroexp,pos,largo),2)
		Else
			AnioNroExp = ""  'no está el año
		End If
		
		Exit Function
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Funcion AnioNroExp","")
		Exit Function
	End Function
	
'******************************************************************************************************************	
	
	Private Function GenerarDbGestion(Byval anio As String, srvt As String, hostt As String, path As String) As NotesDatabase
	'Si no existe, setea la base template y crea una base de datos de gestion para el año que recibe en base a ella
	'También devuelve los datos srvt,hostt y path
		On Error Goto HANDLER
		
		Dim pos As Integer, patht As String, dbGestionDoc As NotesDatabase, dbTemplate As NotesDatabase
		Dim existe As Integer
		
		'Seteo datos de la base template
		srvt = Me.ServidorDomino(CLAVE_DBTEMPLATEGESTIONDOC)
		If srvt = "" Then Error ERRORCONF_CLAVE_NOTFOUND, MSG_ERRORCONF_CLAVE_NOTFOUND+" "+CLAVE_DBTEMPLATEGESTIONDOC
		patht = Me.BaseDeDatos(CLAVE_DBTEMPLATEGESTIONDOC)
		hostt = Me.Host(CLAVE_DBTEMPLATEGESTIONDOC)
		Set dbTemplate = New NotesDataBase ("","")
		existe = dbTemplate.Open(srvt,patht)
		If Not existe Then Error ERROR_DB_NOT_OPEN, MSG_ERROR_DB_NOT_OPEN+" "+CLAVE_DBTEMPLATEGESTIONDOC
		'Armo el path de la nueva base de datos incluyendo los dos digitos del año
		pos = Instr(Ucase(patht),".NSF") 
		If pos = 0 Then Error ERROR_PATH_INCOMPLETED, MSG_ERROR_PATH_INCOMPLETED+" "+CLAVE_DBTEMPLATEGESTIONDOC
		path = Left(patht,pos-1)+ anio + Right(patht,4)
		'Controlo que no exista la base de gestion para el año
		Set dbGestionDoc = New NotesDataBase ("","")
		existe = dbGestionDoc.Open(srvt,path)
		If Not existe Then   'no existe
			'Creo la nueva base de datos como copia de la template para no perder la acl		
			Set dbGestionDoc = dbTemplate.CreateCopy(srvt,path)
			'Le cambio el título
			dbGestionDoc.title = "Gestión documental "+anio	
		End If
		Set GenerarDbGestion = dbGestionDoc
		
		Exit Function
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Funcion GenerarDbGestion","")
		Exit Function
	End Function
	
'******************************************************************************************************************		
	
	Private Sub GuardarProfile(doc As NotesDocument, docContext As NotesDocument)
	'Carga los campos del doc con los del docContext	
		On Error Goto HANDLER
		
		' Cargo tabla interoperabilidad
		doc.ReplaceItemValue CAMPO_VISPROFILE_CLAVEDBS, docContext.GetItemValue(CAMPO_VISPROFILE_CLAVEDBS) 
		doc.ReplaceItemValue CAMPO_VISPROFILE_SERVIDORES, docContext.GetItemValue(CAMPO_VISPROFILE_SERVIDORES) 
		doc.ReplaceItemValue CAMPO_VISPROFILE_HOSTS, docContext.GetItemValue(CAMPO_VISPROFILE_HOSTS) 
		doc.ReplaceItemValue CAMPO_VISPROFILE_RUTAS, docContext.GetItemValue(CAMPO_VISPROFILE_RUTAS) 
		' Cargo Tabla formato de numeración
		doc.ReplaceItemValue CAMPO_VISPROFILE_CLAVENUM, docContext.GetItemValue(CAMPO_VISPROFILE_CLAVENUM) 
		doc.ReplaceItemValue CAMPO_VISPROFILE_FORMATONUM, docContext.GetItemValue(CAMPO_VISPROFILE_FORMATONUM) 
		' Guardo Ruta habilitada	
		doc.ReplaceItemValue CAMPO_VISPROFILE_RUTALIBRE, docContext.GetItemValue(CAMPO_VISPROFILE_RUTALIBRE)(0)
		'Cargo nuevos Administradores	
		doc.ReplaceItemValue CAMPO_ADMINISTRADORES, docContext.GetItemValue(CAMPO_ADMINISTRADORES)
		' Guardo Forma Documental
		doc.ReplaceItemValue CAMPO_VISPROFILE_FORMADOCUMENTAL, docContext.GetItemValue(CAMPO_VISPROFILE_FORMADOCUMENTAL)
		' Guardo estilo
		doc.ReplaceItemValue CAMPO_VISPROFILE_CSS, docContext.GetItemValue(CAMPO_VISPROFILE_CSS)(0)
		' Guardo Alarmas
		doc.ReplaceItemValue CAMPO_VISPROFILE_NOTIFARCHIVADO, docContext.GetItemValue(CAMPO_VISPROFILE_NOTIFARCHIVADO)(0) 
		doc.ReplaceItemValue CAMPO_VISPROFILE_NOTIF_RD, docContext.GetItemValue(CAMPO_VISPROFILE_NOTIF_RD)(0)
		doc.ReplaceItemValue CAMPO_VISPROFILE_NOTIFRECIBIR, docContext.GetItemValue(CAMPO_VISPROFILE_NOTIFRECIBIR)(0)
		doc.ReplaceItemValue CAMPO_VISPROFILE_ALARMAPROXIMOEXPIRAR, docContext.GetItemValue(CAMPO_VISPROFILE_ALARMAPROXIMOEXPIRAR)(0) 
		doc.ReplaceItemValue CAMPO_VISPROFILE_ALARMAJEFEEXPIRO, docContext.GetItemValue(CAMPO_VISPROFILE_ALARMAJEFEEXPIRO)(0)
		' Guardo Configuración global expedientes
		doc.ReplaceItemValue CAMPO_VISPROFILE_CANTIDAD_FIRMAS, docContext.GetItemValue(CAMPO_VISPROFILE_CANTIDAD_FIRMAS)(0)
		doc.ReplaceItemValue CAMPO_VISPROFILE_ARCHIVOAUTOMATICO, docContext.GetItemValue(CAMPO_VISPROFILE_ARCHIVOAUTOMATICO)(0)
		doc.ReplaceItemValue CAMPO_VISPROFILE_PERMITIRDESVIOS, docContext.GetItemValue(CAMPO_VISPROFILE_PERMITIRDESVIOS)(0)
		doc.ReplaceItemValue CAMPO_VISPROFILE_DIASMAXTRAMITE, docContext.GetItemValue(CAMPO_VISPROFILE_DIASMAXTRAMITE)(0)
		doc.ReplaceItemValue CAMPO_VISPROFILE_DIASMAXTRAMITE_EXTERNO, docContext.GetItemValue(CAMPO_VISPROFILE_DIASMAXTRAMITE_EXTERNO)(0)
		doc.ReplaceItemValue CAMPO_VISPROFILE_TAMMAXIMOANEXOS, docContext.GetItemValue(CAMPO_VISPROFILE_TAMMAXIMOANEXOS)(0)
		doc.ReplaceItemValue CAMPO_VISPROFILE_TIEMPODEVOLUCION, docContext.GetItemValue(CAMPO_VISPROFILE_TIEMPODEVOLUCION)(0)
		' tipos permitidos de archivos anexos
		doc.ReplaceItemValue CAMPO_VISPROFILE_TIPOSANEXOS, docContext.GetItemValue(CAMPO_VISPROFILE_TIPOSANEXOS)
		'Guardo lectores y autores de caratula y actuaciones
		doc.ReplaceItemValue CAMPO_LECTORES_CARATULA, docContext.GetItemValue(CAMPO_LECTORES_CARATULA)
		doc.ReplaceItemValue CAMPO_AUTORES_CARATULA, docContext.GetItemValue(CAMPO_AUTORES_CARATULA)
		doc.ReplaceItemValue CAMPO_LECTORES_ACTUACION, docContext.GetItemValue(CAMPO_LECTORES_ACTUACION)
		doc.ReplaceItemValue CAMPO_AUTORES_ACTUACION, docContext.GetItemValue(CAMPO_AUTORES_ACTUACION)
		'Auditoria
		doc.ReplaceItemValue CAMPO_TIEMPOVIDAAUDITORIA, docContext.GetItemValue(CAMPO_TIEMPOVIDAAUDITORIA)
		doc.ReplaceItemValue CAMPO_CREACION_AUDITORIA, docContext.GetItemValue(CAMPO_CREACION_AUDITORIA)
		doc.ReplaceItemValue CAMPO_CLAVE_CREACION_AUDITORIA, docContext.GetItemValue(CAMPO_CLAVE_CREACION_AUDITORIA)
		
		'Guardo el doc
		If Not doc.save(False, False) Then Error ERROR_CANT_SAVE_DOCUMENT, MSG_ERROR_CANT_SAVE_DOCUMENT
		
		Exit Sub
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Procedimiento GuardarProfile","")
		Exit Sub
	End Sub
	
'******************************************************************************************************************	
	
'CONSTRUCTOR
	Public Sub new()
		On Error Goto HANDLER
		
		'Referencio Variables globales
		Set ses = New NotesSession		

		'Se carga el documento de profile
		Set docConfiguracion = ses.CurrentDatabase.GetProfileDocument(NOMBRE_FORM_CONF)
		
		Set vKeyDB = New Vector(0)
		Set vServer = New Vector(0)
		Set vHost = New Vector(0)
		Set vFilePath = New Vector(0)
		Set vFormNum = New Vector(0)
		Set vKeyNum = New Vector(0)

		vKeyDB.values = docConfiguracion.getItemValue(CAMPO_CLAVE_DB)
		vServer.values = docConfiguracion.getItemValue(CAMPO_SERVIDOR_DB)
		vHost.values = docConfiguracion.getItemValue(CAMPO_HOST_DB)
		vFilePath.values = docConfiguracion.getItemValue(CAMPO_RUTA_DB)
		vFormNum.values = docConfiguracion.getItemValue(CAMPO_FORMATO_NUMERACION)
		vKeyNum.values = docConfiguracion.getItemValue(CAMPO_CLAVE_NUMERACION)
		
		'En caso de que nunca haya sido editado se setea el campo form para poderse editar
		If Not docConfiguracion.HasItem("Form") Then
			docConfiguracion.ReplaceItemValue "Form",NOMBRE_FORM_CONF
		End If
		
		Exit Sub
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Método new","")
		Exit Sub
	End Sub
	
'******************************************************************************************************************	
	
	Public Property Get BaseDeDatos(Byval clave As String) As String
	' Dada una clave retorna el FilePath. Si no lo encuentra retorna "".
	'Si el vector de claves no está cargado retorna error.
		On Error Goto HANDLER
		
		Dim pos As Long
		
		If vKeyDB.cantElem = 0 Then Error ERROR_PROFILE_NOTHING, MSG_ERROR_PROFILE_NOTHING

		If vKeyDB.isMember(clave, pos, False) Then 
		
		BaseDeDatos = vFilePath.getElement(pos)
		End if
		Exit Property
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Propiedad Get BaseDeDatos","")
		Exit Property
	End Property
	
'******************************************************************************************************************	
	
	Public Property Set BaseDeDatos(Byval clave As String) As String
	' Dada una clave setea el FilePath. Si no lo encuentra genera un error 
	' ERRORCONF_CLAVE_NOTFOUND
		On Error Goto HANDLER
		
		Dim pos As Long
		
		If vKeyDB.isMember(clave, pos, False) Then 
			Call vFilePath.ReplaceElement(pos,BaseDeDatos)
		Else
			Error ERRORCONF_CLAVE_NOTFOUND, "BaseDeDatos: No se encuentra la clave " _ 
			& clave & " en la tabla de bases de datos."
		End If
		
		Exit Property
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Propiedad Set BaseDeDatos","")
		Exit Property
	End Property
	
'******************************************************************************************************************	
	
	Public Property Get Claves() As vector
	' Retorna un vector con la lista de claves de la tabla interoperabilidad
		On Error Goto HANDLER
		
		Set Claves = New Vector(0)
		Claves.Values = docConfiguracion.GetItemValue(CAMPO_CLAVE_DB)
		
		Exit Property
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Propiedad Get Claves","")
		Exit Property
	End Property
	
'******************************************************************************************************************	
	
	Public Property Get ServidorDomino(Byval clave As String) As String
	' Dada una clave retorna el Servidor. Si no lo encuentra retorna "".
	'Si el vector de claves no está cargado retorna error.
		On Error Goto HANDLER
		
		Dim pos As Long
		
		If vKeyDB.cantElem = 0 Then Error ERROR_PROFILE_NOTHING, MSG_ERROR_PROFILE_NOTHING
		
		If vKeyDB.isMember(clave, pos, False) Then _
		ServidorDomino = ObtenerNombreServidor(vServer.getElement(pos))
		
		Exit Property
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Propiedad Get ServidorDomino","")
		Exit Property
	End Property
	
'******************************************************************************************************************	
	
	Public Property Set ServidorDomino(Byval clave As String) As String
	' Dada una clave setea el Servidor. Si no lo genera un error
	' ERRORCONF_CLAVE_NOTFOUND
		On Error Goto HANDLER
		
		Dim pos As Long
		
		If vKeyDB.isMember(clave, pos, False) Then 
			Call vServer.ReplaceElement(pos,ServidorDomino)
		Else
			Error ERRORCONF_CLAVE_NOTFOUND, "ServidorDomino: No se encuentra la clave " _ 
			& clave & " en la tabla de bases de datos."
		End If
		
		Exit Property
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Propiedad Set ServidorDomino","")
		Exit Property
	End Property
'******************************************************************************************************************	
	
	Public Property Get Host(Byval clave As String) As String
	' Dada una clave retorna el Host. Si lo encuentra retorna "".
	'Si el vector de claves no está cargado retorna error.
		On Error Goto HANDLER
		
		Dim pos As Long
		
		If vKeyDB.cantElem = 0 Then Error ERROR_PROFILE_NOTHING, MSG_ERROR_PROFILE_NOTHING
		
		If vKeyDB.isMember(clave, pos, False) Then _
		Host = vHost.getElement(pos)
		
		Exit Property
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Propiedad Get Host","")
		Exit Property
	End Property	
'******************************************************************************************************************	
	
	Public Property Set Host(Byval clave As String) As String
	' Dada una clave setea el Host. Si no retorna un error ERRORCONF_CLAVE_NOTFOUND
		On Error Goto HANDLER
		
		Dim pos As Long
		
		If vKeyDB.isMember(clave, pos, False) Then 
			Call vHost.ReplaceElement(pos,Host)
		Else
			Error ERRORCONF_CLAVE_NOTFOUND, "Host: No se encuentra la clave " _ 
			& clave & " en la tabla de bases de datos."
		End If
		
		Exit Property
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Propiedad Set Host","")
		Exit Property
	End Property
	
'******************************************************************************************************************			
	
	Public Property Set Interoperabilidad() As Vector
	'Recibe un vector de vectores con las columnas de la tabla
	'Setea toda la informacion de la tabla de interoperabilidad con dichos vectores
		On Error Goto HANDLER
		
		vKeyDB.Values = Interoperabilidad.GetElement(1).Values
		vServer.Values = Interoperabilidad.GetElement(2).Values
		vHost.Values = Interoperabilidad.GetElement(3).Values
		vFilePath.Values = Interoperabilidad.GetElement(4).Values
		
		Exit Property
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Propiedad Set Interoperabilidad","")
		Exit Property
	End Property
	
'******************************************************************************************************************				
	
	Public Property Set TiempoMaximoAuditoria()As Integer
		docConfiguracion.replaceItemValue CAMPO_TIEMPOVIDAAUDITORIA,TiempoMaximoAuditoria
	End Property
	
'******************************************************************************************************************				
	
	Public Property Get TiempoMaximoAuditoria()As Integer
		If docConfiguracion.hasItem(CAMPO_TIEMPOVIDAAUDITORIA) Then
			TiempoMaximoAuditoria=docConfiguracion.getItemValue(CAMPO_TIEMPOVIDAAUDITORIA)(0)	
		End If		
	End Property
	
'******************************************************************************************************************				
	
	Public Property Set ClavesCreacionAuditoria As Variant
		If docConfiguracion.hasItem(CAMPO_CLAVE_CREACION_AUDITORIA) Then
			docConfiguracion.replaceItemValue CAMPO_CLAVE_CREACION_AUDITORIA,ClavesCreacionAuditoria
		End If	
		
	End Property
	
'******************************************************************************************************************				
	
	Public Property Get ClavesCreacionAuditoria As Variant
		Dim vector As Vector
		Dim vectorAux As Vector
		Dim i As integer
		Dim elem As String

		
		Set vector = New vector(0)
		Set vectorAux = New Vector(0)
		vector.Values=docConfiguracion.Getitemvalue(CAMPO_CLAVE_DB)
		'Recorro todas las claves y agrego a un vector auxiliar
		' todas las que son de auditoria menos la
		'auditoria template
		i=0
		While i<vector.cantElem
			elem = CStr(vector.Values(i))
			If  InStr(elem,"AUDITORIAEV")=1 And InStr(elem,"AUDITORIAEVTEMP")<>1 Then
				Call vectorAux.insertElement(elem, vectorAux.cantElem+1)
			End If
			i=i+1
		Wend
		

		ClavesCreacionAuditoria=VectorAux.Values
	End Property
	
'******************************************************************************************************************				
	
	Public Property Set FechasCreacionAuditoria As Variant
		If docConfiguracion.hasItem(CAMPO_CREACION_AUDITORIA) Then
			docConfiguracion.replaceItemValue CAMPO_CREACION_AUDITORIA,FechasCreacionAuditoria
		End If	
		
	End Property
	
'******************************************************************************************************************				
	
	Public Property Get FechasCreacionAuditoria As Variant
		If docConfiguracion.hasItem(CAMPO_CREACION_AUDITORIA) Then
			FechasCreacionAuditoria=docConfiguracion.getItemValue(CAMPO_CREACION_AUDITORIA)
		End If	
	End Property
	
'******************************************************************************************************************				
	
	Public Function insertLineaInteroperabilidad(vIns As Vector,nColOrdenar As Integer)
	'Inserta en forma ordenada segun la clave si nColOrdenar<>0
	'nColOrdenar es la columna por la cual ordenar
	'Si nColOrdenar=0 inserta al final
		Dim posIns As Long
		
		If nColOrdenar<>0 Then
			Select Case(nColOrdenar)
			Case 1:
				posIns=vKeyDB.InsertPos(vIns.getElement(1),True)
			Case 2:
				posIns=vServer.InsertPos(vIns.getElement(2),True)
			Case 3:
				posIns=vHost.InsertPos(vIns.getElement(3),True)
			Case 4:
				posIns=vFilePath.InsertPos(vIns.getElement(4),True)
			End Select			
		Else
			posIns = vKeyDB.cantElem + 1
		End If
		vKeyDB.insertElement vIns.getElement(1),posIns
		vServer.insertElement vIns.getElement(2),posIns
		vHost.insertElement vIns.getElement(3),posIns
		vFilePath.insertElement vIns.getElement(4),posIns
	End Function
	
'******************************************************************************************************************				
	
	Public Sub addAuditoriaDate(sClave As String,dCreacion As Variant)
		'dCreacion es de tipo Date, sClave=clave de la base
		
		Dim itClaves As notesItem,itFechas As notesItem,aFechas As Variant
		
		If docConfiguracion.hasItem(CAMPO_CLAVE_CREACION_AUDITORIA) Then
			Set itClaves=docConfiguracion.getFirstItem(CAMPO_CLAVE_CREACION_AUDITORIA)
		Else
			Set itClaves=New notesItem(docConfiguracion,CAMPO_CLAVE_CREACION_AUDITORIA,"")	
		End If
		itClaves.appendToTextlist sClave
		If docConfiguracion.hasItem(CAMPO_CREACION_AUDITORIA) Then
			Set itFechas=docConfiguracion.getFirstItem(CAMPO_CREACION_AUDITORIA)
		Else
			Set itFechas=New notesItem(docConfiguracion,CAMPO_CREACION_AUDITORIA,"")		
		End If
		aFechas=itFechas.values
		Redim Preserve aFechas(Lbound(itClaves.values) To Ubound(itClaves.values))
		aFechas(Ubound(itClaves.values))=dCreacion
		itFechas.values=aFechas
	End Sub
	
'******************************************************************************************************************				
	
	'Deprecated
	Public Property Set LineaInteroperabilidad () As Vector
	'Recibe un vector con los valores a agregar y los agrega a la tabla de interoperabilidad
		On Error Goto HANDLER
		
		Dim pos As Long, elemento As String
		
		pos = vkeyDB.cantElem + 1  'posición a agregar
		elemento = LineaInteroperabilidad.GetElement(1)
		Call vKeyDB.insertElement(elemento,pos)		
		elemento = LineaInteroperabilidad.GetElement(2)
		Call vServer.insertElement(elemento,pos)
		elemento = LineaInteroperabilidad.GetElement(3)
		Call vHost.insertElement(elemento,pos)
		elemento = LineaInteroperabilidad.GetElement(4)
		Call vFilePath.insertElement(elemento,pos)
		
		Exit Property
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Propiedad Set LineaInteroperabilidad","")
		Exit Property
	End Property
'******************************************************************************************************************			
	
	Public Property Get FormaDocumental() As Vector
	' Retorna una lista de formas documentales del sistema
		On Error Goto HANDLER
		
		Set FormaDocumental = New Vector(0)
		FormaDocumental.Values = docConfiguracion.GetItemValue(CAMPO_FORMADOCUMENTAL)
		
		Exit Property
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Propiedad Get FormaDocumental","")
		Exit Property
	End Property
	
'******************************************************************************************************************			
	
	Public Property Set FormaDocumental() As Vector
	' setea una lista de FormasDocumentales del sistema
		On Error Goto HANDLER
		
		Call docConfiguracion.ReplaceItemValue( CAMPO_FORMADOCUMENTAL ,FormaDocumental.Values)
		
		Exit Property
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Propiedad Set FormaDocumental","")
		Exit Property
	End Property
	
	
'******************************************************************************************************************			
	
	Public Property Get Administradores() As Vector
	' Retorna una lista de Administradores del sistema
		On Error Goto HANDLER
		
		Set Administradores = New Vector(0)
		Administradores.Values = docConfiguracion.GetItemValue(CAMPO_ADMINISTRADORES)
		
		Exit Property
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Propiedad Get Administradores","")
		Exit Property
	End Property
	
'******************************************************************************************************************			
	
	Public Property Set Administradores() As Vector
	' setea una lista de Administradores del sistema
		On Error Goto HANDLER
		
		Call docConfiguracion.ReplaceItemValue( CAMPO_ADMINISTRADORES ,Administradores.Values)
		
		Exit Property
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Propiedad Set Administradores","")
		Exit Property
	End Property
	
	
'******************************************************************************************************************			
	
	Public Property Get CSS() As String
	' Retorna el estilo del sistema
		On Error Goto HANDLER
		
		CSS = docConfiguracion.GetItemValue(CAMPO_CSS)(0)
		
		Exit Property
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Propiedad Get CSS","")
		Exit Property
	End Property
	
'******************************************************************************************************************			
	
	Public Property Set CSS() As String
	' Setea el estilo del sistema
		On Error Goto HANDLER
		
		Call docConfiguracion.ReplaceItemValue(CAMPO_CSS,CSS)
		
		Exit Property
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Propiedad Set CSS","")
		Exit Property
	End Property
	
'******************************************************************************************************************				
	Public Property Get FormatoNumerador(Byval ClaveNum As String) As String
	' Retorna el formato de numeración dada una clave
		On Error Goto HANDLER
		
		Dim pos As Long
		
		If vKeyNum.isMember(ClaveNum, pos, False) Then _
		FormatoNumerador = vFormNum.getElement(pos)	
		
		Exit Property
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Propiedad Get FormatoNumerador","")
		Exit Property
	End Property
	
'******************************************************************************************************************			
	
	Public Property Set FormatoNumerador(Byval ClaveNum As String) As String
	' Dada una clave setea el Formato de la Numeración. Si no lo encuentra genera un error 
	' ERRORCONF_CLAVE_NOTFOUND
		On Error Goto HANDLER
		
		Dim pos As Long
		
		If vKeyNum.isMember(ClaveNum, pos, False) Then 
			Call vFormNum.ReplaceElement(pos,FormatoNumerador)
		Else
			Error ERRORCONF_CLAVE_NOTFOUND, "FormatoNumerador: No se encuentra la clave " _ 
			& ClaveNum & " en la tabla de Formato de numeradores."
		End If	
		
		Exit Property
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Propiedad Set FormatoNumerador","")
		Exit Property
	End Property
	
'***************************************************************************************************************			
	
	Public Property Set FormatoNumeracion() As Vector
	' Setea toda la informacion de la tablas de Formato de numeración
		On Error Goto HANDLER
		
		vKeyNum.Values = FormatoNumeracion.GetElement(1).Values
		vFormNum.Values = FormatoNumeracion.GetElement(2).Values
		
		Exit Property
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Propiedad Set FormatoNumeracion","")
		Exit Property
	End Property	
	
'***************************************************************************************************************			
	Public Property Get CantidadFirmas() As Integer
	'	Retorna/Setea la cantidad de Firmas necesarias para
	'	realizar el pase de un expediente a otra unidad
		On Error Goto HANDLER
		
		CantidadFirmas = docConfiguracion.GetItemValue(CAMPO_CANTIDAD_FIRMAS)(0)
		
		Exit Property
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Propiedad Get CantidadFirmas","")
		Exit Property
	End Property		
	
'***************************************************************************************************************			
	Public Property Set CantidadFirmas() As Integer
	'	Retorna/Setea la cantidad de Firmas necesarias para
	'	realizar el pase de un expediente a otra unidad
		On Error Goto HANDLER
		
		Call docConfiguracion.ReplaceItemValue(CAMPO_CANTIDAD_FIRMAS,CantidadFirmas)	
		
		
		Exit Property
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Propiedad Set CantidadFirmas","")
		Exit Property
	End Property	
	
'***************************************************************************************************************				
	
	Public Property Get TiempoArchivadoAutomatico() As Integer
	' Retorna/Setea la cantidad de días en que se archivará
	' en forma automática un expediente si no es modificado
		On Error Goto HANDLER
		
		TiempoArchivadoAutomatico = docConfiguracion.GetItemValue(CAMPO_ARCHIVOAUTOMATICO)(0)
		
		
		Exit Property
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Propiedad Get TiempoArchivadoAutomatico","")
		Exit Property
	End Property		
	
'***************************************************************************************************************			
	Public Property Set TiempoArchivadoAutomatico() As Integer
	' Retorna/Setea la cantidad de días en que se archivará
	' en forma automática un expediente si no es modificado
		On Error Goto HANDLER
		
		Call docConfiguracion.ReplaceItemValue(CAMPO_ARCHIVOAUTOMATICO,TiempoArchivadoAutomatico)	
		
		Exit Property
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Propiedad Set TiempoArchivadoAutomatico","")
		Exit Property
	End Property	
	
'***************************************************************************************************************				
	
	Public Property Get DesvioDeRutas() As Integer
	' Retorna/Setea la bandera booleana que permite desvios en la ruta
	' de un expediente	
		On Error Goto HANDLER
		
		DesvioDeRutas = docConfiguracion.GetItemValue(CAMPO_PERMITIRDESVIOS)(0)
		
		Exit Property
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Propiedad Get DesvioRutas","")
		Exit Property
	End Property		
	
'***************************************************************************************************************			
	Public Property Set DesvioDeRutas() As Integer
	' Retorna/Setea la bandera booleana que permite desvios en la ruta
	' de un expediente	
		On Error Goto HANDLER
		
		Call docConfiguracion.ReplaceItemValue(CAMPO_PERMITIRDESVIOS,DesvioDeRutas)
		
		Exit Property
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Propiedad Set DesvioRutas","")
		Exit Property
	End Property	
	
'***************************************************************************************************************				
	
	Public Property Get TiempoMaximoActuacion() As Integer
	' Retorna/Setea la cantidad máxima de días que tiene una oficina
	' para actuar
		On Error Goto HANDLER
		
		TiempoMaximoActuacion = docConfiguracion.GetItemValue(CAMPO_DIASMAXTRAMITE)(0)
		
		Exit Property
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Propiedad Get TiempoMaximoActuacion","")
		Exit Property
	End Property		
	
'***************************************************************************************************************			
	Public Property Set TiempoMaximoActuacion() As Integer
	' Retorna/Setea la cantidad máxima de días que tiene una oficina
	' para actuar
		On Error Goto HANDLER
		
		Call docConfiguracion.ReplaceItemValue(CAMPO_DIASMAXTRAMITE,TiempoMaximoActuacion)	
		
		Exit Property
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Propiedad Set TiempoMaximoActuacion","")
		Exit Property
	End Property	
	
'***************************************************************************************************************				
	Public Property Get TiempoMaximoActuacionExterna() As Integer
	' Retorna/Setea la cantidad máxima de días que tiene una oficina
	' para actuar
		On Error Goto HANDLER
		
		TiempoMaximoActuacionExterna = docConfiguracion.GetItemValue(CAMPO_DIASMAXTRAMITEETERNO)(0)
		
		Exit Property
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Propiedad Get TiempoMaximoActuacionExterna","")
		Exit Property
	End Property		
	
'***************************************************************************************************************			
	Public Property Set TiempoMaximoActuacionExterna() As Integer
	' Retorna/Setea la cantidad máxima de días que tiene una oficina
	' para actuar
		On Error Goto HANDLER
		
		Call docConfiguracion.ReplaceItemValue(CAMPO_DIASMAXTRAMITEETERNO,TiempoMaximoActuacionExterna)	
		
		Exit Property
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Propiedad Set TiempoMaximoActuacionExterna","")
		Exit Property
	End Property	
'***************************************************************************************************************				
	Public Property Get TamañoMaximoAnexo() As Integer
	' Retorna/Setea el tamaño maximo de los anexos por actuación
		On Error Goto HANDLER
		
		TamañoMaximoAnexo = docConfiguracion.GetItemValue(CAMPO_TAMMAXIMOANEXOS)(0)
		
		Exit Property
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Propiedad Get TiempoMaximoAnexo","")
		Exit Property
	End Property		
	
'***************************************************************************************************************			
	Public Property Set TamañoMaximoAnexo() As Integer
	' Retorna/Setea el tamaño maximo de los anexos por actuación
		On Error Goto HANDLER
		
		Call docConfiguracion.ReplaceItemValue(CAMPO_TAMMAXIMOANEXOS,TamañoMaximoAnexo)	
		
		Exit Property
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Propiedad Set TiempoMaximoAnexo","")
		Exit Property
	End Property	
	
'***************************************************************************************************************				
	Public Property Get TiposArchivosAnexos() As Vector
	' Retorna un vector con los tipos de anexos permitidos
		On Error Goto HANDLER
		
		Set TiposArchivosAnexos = New Vector(0)
		TiposArchivosAnexos.Values = docConfiguracion.GetItemValue(CAMPO_TIPOSANEXOS)	
		
		Exit Property
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Propiedad Get TiposArchivosAnexos","")
		Exit Property
	End Property		
	
'***************************************************************************************************************			
	Public Property Set TiposArchivosAnexos() As Vector
		' Devuelve un vector con los tipos de anexos permitidos
		On Error Goto HANDLER
		
		Call docConfiguracion.ReplaceItemValue( CAMPO_TIPOSANEXOS ,TiposArchivosAnexos.Values)
		
		Exit Property
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Propiedad Set TiposArchivosAnexos","")
		Exit Property
	End Property	
	
'***************************************************************************************************************				
	Public Property Get TiempoMaximoDevolucion() As Integer
	' Retorna/Setea el tiempo maximo de devolución de un expediente
		On Error Goto HANDLER
		
		TiempoMaximoDevolucion = docConfiguracion.GetItemValue(CAMPO_TIEMPODEVOLUCION)(0)
		
		Exit Property
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Propiedad Get TiempoMaximoDevolucion","")
		Exit Property
	End Property		
	
'***************************************************************************************************************			
	Public Property Set TiempoMaximoDevolucion() As Integer
	' Retorna/Setea el tiempo maximo de devolución de un expediente
		On Error Goto HANDLER
		
		Call docConfiguracion.ReplaceItemValue(CAMPO_TIEMPODEVOLUCION,TiempoMaximoDevolucion)
		
		Exit Property
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Propiedad Set TiempoMaximoDevolucion","")
		Exit Property
	End Property	
	
'******************************************************************************************************************			
	
	Public Property Get LectoresCaratula() As Vector
	' Retorna una lista con los lectores por defecto de las caratulas
		On Error Goto HANDLER
		
		Set LectoresCaratula = New Vector(0)
		LectoresCaratula.Values = docConfiguracion.GetItemValue(CAMPO_LECTORES_CARATULA)
		
		Exit Property
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Propiedad Get LectoresCaratula","")
		Exit Property
	End Property
	
'******************************************************************************************************************			
	
	Public Property Set LectoresCaratula() As Vector
	' Setea la lista de lectores de caratulas
		On Error Goto HANDLER
		
		Call docConfiguracion.ReplaceItemValue( CAMPO_LECTORES_CARATULA ,LectoresCaratula.Values)
		
		Exit Property
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Propiedad Set LectoresCaratula","")
		Exit Property
	End Property	
	
'******************************************************************************************************************				
	
	Public Property Get AutoresCaratula() As Vector
	' Retorna una lista con los autores por defecto de las caratulas
		On Error Goto HANDLER
		
		Set AutoresCaratula = New Vector(0)
		AutoresCaratula.Values = docConfiguracion.GetItemValue(CAMPO_AUTORES_CARATULA)
		
		Exit Property
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Propiedad Get AutoresCaratula","")
		Exit Property
	End Property
	
'******************************************************************************************************************			
	
	Public Property Set AutoresCaratula() As Vector
	' Setea la lista de autores de caratulas
		On Error Goto HANDLER
		
		Call docConfiguracion.ReplaceItemValue( CAMPO_AUTORES_CARATULA ,AutoresCaratula.Values)
		
		Exit Property
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Propiedad Set AutoresCaratula","")
		Exit Property
	End Property	
	
'******************************************************************************************************************				
	
	Public Property Get LectoresActuacion() As Vector
	' Retorna una lista con los lectores por defecto de las actuaciones
		On Error Goto HANDLER
		
		Set LectoresActuacion = New Vector(0)
		LectoresActuacion.Values = docConfiguracion.GetItemValue(CAMPO_LECTORES_ACTUACION)
		
		Exit Property
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Propiedad Get LectoresActuacion","")
		Exit Property
	End Property
	
'******************************************************************************************************************			
	
	Public Property Set LectoresActuacion() As Vector
	' Setea la lista de lectores de actuaciones
		On Error Goto HANDLER
		
		Call docConfiguracion.ReplaceItemValue( CAMPO_LECTORES_ACTUACION ,LectoresActuacion.Values)
		
		Exit Property
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Propiedad Set LectoresActuacion","")
		Exit Property
	End Property	
	
'******************************************************************************************************************				
	
	Public Property Get AutoresActuacion() As Vector
	' Retorna una lista con los autores por defecto de las actuaciones
		On Error Goto HANDLER
		
		Set AutoresActuacion = New Vector(0)
		AutoresActuacion.Values = docConfiguracion.GetItemValue(CAMPO_AUTORES_ACTUACION)
		
		Exit Property
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Propiedad Get AutoresActuacion","")
		Exit Property
	End Property
	
'******************************************************************************************************************			
	
	Public Property Set AutoresActuacion() As Vector
	' Setea la lista de autores de actuaciones
		On Error Goto HANDLER
		
		Call docConfiguracion.ReplaceItemValue( CAMPO_AUTORES_ACTUACION ,AutoresActuacion.Values)
		
		Exit Property
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Propiedad Set AutoresActuacion","")
		Exit Property
	End Property	
	
'******************************************************************************************************************				
	
	
'METODOS
	
	Public Function HabilitarNotificarArchivados()
		On Error Goto HANDLER
		
		Call docConfiguracion.ReplaceItemValue(CAMPO_NOTIFARCHIVADO, NOTIFARCHIVADO_CHECKED)
		
		Exit Function
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Método HabilitarNotificarArchivados","")
		Exit Function
	End Function
	
'******************************************************************************************************************				
	
	Public Function DeshabilitarNotificarArchivados()
		On Error Goto HANDLER
		
		Call docConfiguracion.RemoveItem(CAMPO_NOTIFARCHIVADO)	
		
		Exit Function
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Método DeshabilitarNotificarArchivados","")
		Exit Function
	End Function
	
'******************************************************************************************************************			
	
	Public Function HabilitarNotificarRD()
		On Error Goto HANDLER
		
		Call docConfiguracion.ReplaceItemValue(CAMPO_NOTIF_RD, NOTIFRD_CHECKED)
		
		Exit Function
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Método HabilitarNotificarRD","")
		Exit Function
	End Function
	
'******************************************************************************************************************			
	
	Public Function DeshabilitarNotificarRD()
		On Error Goto HANDLER
		
		Call docConfiguracion.RemoveItem(CAMPO_NOTIF_RD)
		
		Exit Function
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Método DeshabilitarNotificarRD","")
		Exit Function
	End Function
	
'******************************************************************************************************************			
	
	Public Function HabilitarNotificarRecepcion()
		On Error Goto HANDLER
		
		Call docConfiguracion.ReplaceItemValue(CAMPO_NOTIFRECIBIR, NOTIFRECIBIR_CHECKED	)
		
		Exit Function
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Método HabilitarNotificarRecepcion","")
		Exit Function
	End Function
	
'******************************************************************************************************************			
	
	Public Function DeshabilitarNotificarRecepcion()
		On Error Goto HANDLER
		
		Call docConfiguracion.RemoveItem(CAMPO_NOTIFRECIBIR)
		
		Exit Function
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Método DeshabilitarNotificarRecepcion","")
		Exit Function
	End Function
	
'******************************************************************************************************************			
	
	Public Function HabilitarAlarmaProximoExpirar()
		On Error Goto HANDLER
		
		Call docConfiguracion.ReplaceItemValue(CAMPO_ALARMAPROXEXPIRAR, ALARMAPROXEXPIRAR_CHECKED	)
		
		Exit Function
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Método HabilitarAlarmaProximoExpirar","")
		Exit Function
	End Function
	
'******************************************************************************************************************			
	
	Public Function DeshabilitarAlarmaProximoExpirar()
		On Error Goto HANDLER
		
		Call docConfiguracion.RemoveItem(CAMPO_ALARMAPROXEXPIRAR)
		
		Exit Function
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Método DeshabilitarAlarmaProximoExpirar","")
		Exit Function
	End Function
	
'******************************************************************************************************************			
	
	Public Function HabilitarAlarmaJefeExpiro()
	' Habilita AlarmaJefeExpiro
		On Error Goto HANDLER
		
		Call docConfiguracion.ReplaceItemValue( CAMPO_ALARMAJEFEEXPIRO, ALARMAJEFEEXPIRO_CHECKED )
		
		Exit Function
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Método HabilitarAlarmaJefeExpiro","")
		Exit Function
	End Function
	
'******************************************************************************************************************			
	
	Public Function DeshabilitarAlarmaJefeExpiro()
	' Desabilita AlarmaJefeExpiro
		On Error Goto HANDLER
		
		Call docConfiguracion.RemoveItem(CAMPO_ALARMAJEFEEXPIRO)	
		
		Exit Function
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Método DeshabilitarAlarmaJefeExpiro","")
		Exit Function
	End Function
	
'******************************************************************************************************************			
	
	Public Function HabilitarRutaLibre()
	' Habilita ruta libre
		On Error Goto HANDLER
		
		Call docConfiguracion.replaceItemValue (CAMPO_TIPORUTA , RUTA_HABILITADA)
		
		Exit Function
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Método HabilitarRutaLibre","")
		Exit Function
	End Function
	
'******************************************************************************************************************		
	
	Public Function DeshabilitarRutaLibre()
	' Deshabilita ruta libre
		On Error Goto HANDLER
		
		Call docConfiguracion.replaceItemValue (CAMPO_TIPORUTA , RUTA_DESABILITADA)	
		
		Exit Function
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Método DeshabilitarRutaLibre","")
		Exit Function
	End Function
	
'******************************************************************************************************************			
	
	Public Function ReferenciarBaseDeDatos(Byval clave As String) As NotesDatabase
		'Retorna una referencia a la base de datos que recibe como parámetro.
		'En caso de que no encuentra el nombre de la base en la configuración retorna Nothing
		On Error Goto HANDLER
		
		Dim pos As Long
		
		Set ReferenciarBaseDeDatos = Nothing
		If vKeyDB.isMember(Ucase(clave), pos, False) Then _
		Set ReferenciarBaseDeDatos = New NotesDatabase(ObtenerNombreServidor(vServer.getElement(pos)), vFilePath.getElement(pos))
		
		Exit Function
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Método ReferenciarBaseDeDatos","")
		Exit Function
		
	End Function
	
'******************************************************************************************************************		
	
	Public Function GetFirstDatabase() As NotesDatabase
	' Esta funcion permite iterar sobre la lista de bases de datos de la
	' configuración. Para continuar recorriendo la lista utilizar el
	' método GetNextDatabase.
	' Si no hay ninguna base de datos en la lista retorna Nothing.
		On Error Goto HANDLER
		
		Set GetFirstDatabase = Nothing
		If vServer.CantElem > 0 Then
			Set GetFirstDatabase = New NotesDatabase(ObtenerNombreServidor(vServer.getElement(1)), vFilePath.getElement(1))
		End If			
		
		Exit Function
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Método GetFirstDatabase","")
		Exit Function
	End Function
	
'******************************************************************************************************************		
	
	Public Function GetNextDatabase(dbClave As NotesDatabase) As NotesDatabase
	' Esta funcion retorna la siguiente base de datos en la lista.
	' Si no hay ninguna base de datos en la lista retorna Nothing.
		On Error Goto HANDLER
		
		Dim pos As Long
		
		Set GetNextDatabase = Nothing
		
		If dbClave Is Nothing Then Exit Function		
		
		If vFilePath.IsMember(dbClave.FilePath,pos, False) Then
			If pos < vFilePath.CantElem Then _
			Set GetNextDatabase = Me.ReferenciarBaseDeDatos(vKeyDB.GetElement(pos+1))
		End If
		
		Exit Function
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Método GetNextDatabase","")
		Exit Function
	End Function
	
'******************************************************************************************************************		
	
	Public Function Save()
	'Salva la configuracion del sistema y la copia a todas las bases de datos
		On Error Goto HANDLER
		
		Dim dbSetear As NotesDatabase,docDestino As NotesDocument, srv As String, path As String
		
		Call docConfiguracion.ReplaceItemValue(CAMPO_CLAVE_DB,vKeyDB.Values)
		Call docConfiguracion.ReplaceItemValue(CAMPO_SERVIDOR_DB,vServer.Values)
		Call docConfiguracion.ReplaceItemValue(CAMPO_RUTA_DB,vFilePath.Values)
		Call docConfiguracion.ReplaceItemValue(CAMPO_HOST_DB,vHost.Values)
		Call docConfiguracion.ReplaceItemValue(CAMPO_CLAVE_NUMERACION,vKeyNum.Values)
		Call docConfiguracion.ReplaceItemValue(CAMPO_FORMATO_NUMERACION,vFormNum.Values)
		
		If Not docConfiguracion.Save(False,False) Then _
		Error ERRORCONF_INTERNAL_ERROR,"Fallo al salvar el documento de configuración."
		
		'Actualizo el profile en las demás bases de datos
		Forall ClaveBd In vKeyDB.Values
			If Ucase(ClaveBd) <> Ucase(CLAVE_NAMES) Then  'si no es el names
				'Seteo la base de datos
				srv = Me.ServidorDomino(ClaveBd)
				path = Me.BaseDeDatos(ClaveBd)
				Set dbSetear = New NotesDatabase("","")
				If Not dbSetear.Open (srv,path)Then 
					Error ERROR_DB_NOT_OPEN, MSG_ERROR_DB_NOT_OPEN+" "+ClaveBd
				Else
					'Actualizo su profile
					Set docDestino = dbSetear.GetProfileDocument(DOCUMENTO_PERFIL)
					If Not docDestino Is Nothing Then
						Call GuardarProfile(docDestino,docConfiguracion)
					End If
				End If
			End If
		End Forall
		
		'Nota: este método debería actualizar también las acl's de las bases de datos con los administradores nuevos
		'En principio no lo hacemos porque los administradores solo se agregan desde la interfase y allí se actualizan las acl's
		
		Exit Function
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Método Save","")
		Exit Function
	End Function
	
'******************************************************************************************************************		
	
	Public Function NumerarFormateado (Byval NOMBRENUMERADOR As String) As String
	'Devuelve el nro que corresponde según el nombre del numerador y con el formato indicado en el doc de perfil	
		On Error Goto HANDLER
		
		Dim formato As String, nro As String
		
		'Pido número a la clase de numeración
		nro = Cstr(PedirNumero(NOMBRENUMERADOR))
		'Obtengo el formato del nro
		formato = Me.FormatoNumerador(NOMBRENUMERADOR)
		If formato = "" Then Error ERRORCONF_CLAVE_NOTFOUND, "FormatoNumerador: No se encuentra la clave " _ 
		& NOMBRENUMERADOR & " en la tabla de Formato de numeradores."
		'Sustituyo el indicador de año por el año actual
		formato = SustituirAnio(formato)
		'Sustituyo el indicador de digitos por el nro
		NumerarFormateado = SustituirCantDigitos(formato,nro)	
		
		Exit Function
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Método NumerarFormateado","")
		Exit Function
	End Function
	
'******************************************************************************************************************		
	
	Public Function BaseDeDatosNroExp (Byval nroexp As String) As NotesDatabase
	'Dado un nro de expediente setea la base de datos de gestión documental que corresponda 
	'para él y la devuelve. Si la base de dicho año no existe, la crea y agrega la linea a la tabla
	'de interoperabilidad
	'Suposiciones: 
	'1) En el doc profile está el camino de la base templategestiondoc, la cual se va a tomar para crear otras bases
	'2) La clave para las bases anuales de gestión documental está formada por la cte 
	'   CLAVE_DBGESTIONDOC + los dos ultimos digitos del año	
		On Error Goto HANDLER
		
		Dim anio As String, claveint As String, srv As String, srvt As String, hostt As String, path As String, dbGestionDoc As NotesDatabase
		
		'Busco el año en el número
		anio = AnioNroExp(nroexp)
		'Busco srv y path del la base de gestiondoc que corresponda segun el año
		claveint = CLAVE_DBGESTIONDOC + anio
		srv = Me.ServidorDomino(claveint)
		path = Me.BaseDeDatos(claveint)
		If srv = "" Then   'no encontro la clave
			'Si no existe, creo la nueva base de gestion 
			Set BaseDeDatosNroExp = GenerarDbGestion(anio,srvt,hostt,path)	
			'Agrego la línea a la interoperabilidad
			Call AgregarInteroperabilidad(claveint,srvt,hostt,path)
			'Salvo el doc configuracion para copiarlo a la nueva bd
			Call Me.Save()
		Else   'encontro la clave
			Set BaseDeDatosNroExp = New NotesDatabase("","")
			If Not BaseDeDatosNroExp.Open (srv,path)Then Error ERROR_DB_NOT_OPEN, MSG_ERROR_DB_NOT_OPEN+" "+claveint
		End If
		
		Exit Function
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Método BaseDeDatosNroExp","")
		Exit Function
	End Function
	
'******************************************************************************************************************
	
	Public Function BaseDeDatosAnio (Byval anio As Integer) As NotesDatabase
	'Dado un año setea la base de datos de gestión documental que corresponda 
	'para él y la devuelve. Si la base de dicho año no existe, la crea y agrega la linea a la tabla
	'de interoperabilidad
	'Suposiciones: 
	'1) En el doc profile está el camino de la base templategestiondoc, la cual se va a tomar para crear otras bases
	'2) La clave para las bases anuales de gestión documental está formada por la cte 
	'   CLAVE_DBGESTIONDOC + los dos ultimos digitos del año	
		On Error Goto HANDLER
		
		Dim claveanio As String, claveint As String, srv As String, srvt As String, hostt As String, path As String, dbGestionDoc As NotesDatabase
		
		'Seteo las dos últimas cifras del año
		claveanio = Right(Cstr(anio),2)
		'Busco srv y path del la base de gestiondoc que corresponda segun el año
		claveint = CLAVE_DBGESTIONDOC + claveanio
		srv = Me.ServidorDomino(claveint)
		path = Me.BaseDeDatos(claveint)
		If srv = "" Then   'no encontro la clave
			'Si no existe, creo la nueva base de gestion 
			Set BaseDeDatosAnio = GenerarDbGestion(claveanio,srvt,hostt,path)	
			'Agrego la línea a la interoperabilidad
			Call AgregarInteroperabilidad(claveint,srvt,hostt,path)
			'Salvo el doc configuracion para copiarlo a la nueva bd
			Call Me.Save()
		Else   'encontro la clave
			Set BaseDeDatosAnio = New NotesDatabase("","")
			If Not BaseDeDatosAnio.Open (srv,path)Then Error ERROR_DB_NOT_OPEN, MSG_ERROR_DB_NOT_OPEN+" "+claveint
		End If
		
		Exit Function
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Método BaseDeDatosAnio","")
		Exit Function
	End Function
	'******************************************************************************************************************	
	Public Property Set Protocolo As String
		On Error Goto handler
		docConfiguracion.ReplaceItemValue CAMPO_PROTOCOLO,Cstr(Protocolo)
		Exit Property
handler:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Método set Protocolo","")
		Exit Property
	End Property
		'******************************************************************************************************************	
	Public Property Get Protocolo As String
		On Error Goto handler
		Protocolo =Cstr(docConfiguracion.GetItemValue(CAMPO_PROTOCOLO)(0))
		Exit Property
handler:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Método get Protocolo","")
		Exit Property
	End Property
		'******************************************************************************************************************	
	Public Property Set Puerto As String
		On Error Goto handler
		docConfiguracion.ReplaceItemValue CAMPO_PUERTO,Cstr(Puerto)
		Exit Property
handler:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Método set Puerto","")
		Exit Property
	End Property
		'******************************************************************************************************************	
	Public Property Get Puerto As String
		On Error Goto handler
		Puerto =Cstr(docConfiguracion.GetItemValue(CAMPO_PUERTO)(0))
		Exit Property
handler:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Método get Puerto","")
		Exit Property
	End Property
'******************************************************************************************************************	
	Public Function clavesAuditoria() As Vector
		On Error Goto handler
		Dim i As Integer
		Dim clave As String
		Dim vKeys As New Vector(0)
		
		vKeys.values = docConfiguracion.GetItemValue(CAMPO_CLAVE_DB)
		Set clavesAuditoria = New Vector(0)
		For i=1 To vKeys.CantElem
			clave = vKeys.getElement(i)
			If Instr(clave,CLAVE_DBAUDITORIA)>0 And Not Instr(clave,CLAVE_DBAUDITORIA_TEMPLATE) Then
				Call clavesAuditoria.insertElement(clave,clavesAuditoria.CantElem+1)
			End If
		Next
		
		Exit Function
handler:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase ConfEE 1.0 - Método clavesAuditoria","")
		Exit Function
	End Function
'******************************************************************************************************************
	
End Class
'******************************************************************************************************************