'++LotusScript Development Environment:2:5:(Options):0:74
%REM
	Library ClaseDosListasConCorrespondencia
	Created Apr 11, 2012 by Guillermo Segalerba/ISA
	Description: Comments for Library
%END REM

Option Public

Option Declare
Use "VectorClass 2.05"

'++LotusScript Development Environment:2:5:(Forward):0:1
Declare Public Class DosListasConCorrespondencia

'++LotusScript Development Environment:2:5:(Declarations):0:10
'CONTANTES VARIAS
Private Const OBJECT_STRING_VALUE			= "<Objeto>"
Private Const ERROR_STRING_VALUE			= "<Error de Tipo>"
Private Const DATATYPE_NOT_ASIGNED			= -1

'TIPOS DE DATOS QUE MANEJA LOTUSSCRIPT
Private Const V_EMPTY					= 0	
Private Const V_NULL					= 1
Private Const V_INTEGER					= 2	
Private Const V_LONG					= 3	
Private Const V_SINGLE					= 4	
Private Const V_DOUBLE					= 5	
Private Const V_CURRENCY					= 6	
Private Const V_DATE					= 7	 
Private Const V_STRING					= 8	
Private Const V_DISPATCH					= 9	
Private Const V_ERROR					= 10	
Private Const V_BOOLEAN					= 11	
Private Const V_VARIANT					= 12	
Private Const V_IUNKNOWN					= 13	
Private Const V_LSOBJ					= 34	
Private Const V_PRODOBJ					= 35	


%REM
	Class DosListasConCorrespondencia
	Description: Comments for Class
%END REM
Public Class DosListasConCorrespondencia
	
	Private v1 As Vector		'Elementos del vector1
	Private v2 As Vector		'Elementos del vector2
	Private largo As Long			'Cantidad de elementos de los vectores
	Private tipo1 As Integer			'Tipo de datos del vector1
	Private tipo2 As Integer			'Tipo de datos del vector2
	
	'********************************************************************************************************	
	Public Sub New2()
		'Constructor de la clase. El parametro cantElements indica la 
		'cantidad de elementos que tendra inicialmente el vector.
		'Se indica 0 (cero) para que el parametro no se tome en cuenta.
		On Error GoTo HANDLER
		
		largo = 0	
		tipo1 = DATATYPE_NOT_ASIGNED
		tipo2 = DATATYPE_NOT_ASIGNED		
		Set v1=New Vector(0)
		Set v2=New Vector(0)
		Exit Sub
HANDLER:
		'		Call RegistraryGenerarError(NOMBRE_APLICACION,"Clase VectorClass 2.05 - Método new","")
		Exit Sub
	End Sub
	'********************************************************************************************************	
	Public Sub New(vec1 As Vector,vec2 As Vector)
		'Constructor de la clase. El parametro cantElements indica la 
		'cantidad de elementos que tendra inicialmente el vector.
		'Se indica 0 (cero) para que el parametro no se tome en cuenta.
		On Error GoTo HANDLER
		
		largo = 0	
		tipo1 = DATATYPE_NOT_ASIGNED
		tipo2 = DATATYPE_NOT_ASIGNED		
		Set v1=vec1
		Set v2=vec2
		Exit Sub
HANDLER:
		'		Call RegistraryGenerarError(NOMBRE_APLICACION,"Clase VectorClass 2.05 - Método new","")
		Exit Sub
	End Sub
	
	'********************************************************************************************************  
	
	Public Function getElement(ByVal pos As Long) As Variant
		' Retorna el elemento del vector que se encuentra en la posicion POS	
		On Error GoTo HANDLER
		
		If pos < 1 Or pos > largo Then
			Error INCORRECTPOS,"Posición incorrecta."
		Else
			getElement=v1.getElement(pos)+","+v2.getElement(pos)
			
			'If IsObject(arreglo(pos)) Then
			'Set getElement = arreglo(pos)
			'Else
			'getElement = arreglo(pos)
			'End If
		End If
		
		Exit Function
HANDLER:
		'	Call RegistraryGenerarError(NOMBRE_APLICACION,"Clase VectorClass 2.05 - Método getElement","")
		Exit Function
	End Function	
	
	'********************************************************************************************************
	
	Public Sub insertElement(element1 As Variant,element2 As Variant, ByVal pos As Long)
		' Inserta el elemento 'element' en la posicion pos
		On Error GoTo HANDLER
		
		Dim i As Integer, tipoAInsertar As Integer
		
		If pos < 1 Or pos > 1 + largo Then Error INCORRECTPOS,"Posición incorrecta."
		If tipo1 = DATATYPE_NOT_ASIGNED Then	'En la primera insercion guardo
			tipo1 = DataType(element1)			'el tipo de datos del vector
		ElseIf tipo1 = DATATYPE_NOT_ASIGNED Then
			tipo1 = DataType(element1)
		Else
			If Not IsCorrectDataType1(element1) Then Error INCORRECT_DATATYPE, _
			"El tipo de datos " & TypeName(element1) & " a insertar no coincide con el del vector: " & TipoToString(tipo1)
		End If
		If tipo2 = DATATYPE_NOT_ASIGNED Then	'En la primera insercion guardo
			tipo2 = DataType(element2)			'el tipo de datos del vector
		ElseIf tipo2= DATATYPE_NOT_ASIGNED Then
			tipo2 = DataType(element2)
		Else
			If Not IsCorrectDataType2(element2) Then Error INCORRECT_DATATYPE, _
			"El tipo de datos " & TypeName(element2) & " a insertar no coincide con el del vector: " & TipoToString(tipo2)
		End If
		
		Call v1.insertElement(element1,pos)
		Call v2.insertElement(element2,pos)
		largo=largo+1
		
		Exit Sub
HANDLER:
		'Call RegistraryGenerarError(NOMBRE_APLICACION,"Clase VectorClass 2.05 - Método insertElement","")
		Exit Sub
	End Sub
	
	'********************************************************************************************************	
	'********************************************************************************************************	
	
	Public Sub deleteElement(ByVal pos As Long)
		' Elimina el elemento de la posicion pos del vector
		On Error GoTo HANDLER
		
		Dim i As Integer
		
		If largo < 1 Then Exit Sub	' El vector esta vacio
		
		If pos < 1 Or pos > largo Then
			Error 11001,"Posición incorrecta."
		Else
			Call v1.deleteElement(pos)
			Call v2.deleteElement(pos)
		End If
		Exit Sub
HANDLER:
		'	Call RegistraryGenerarError(NOMBRE_APLICACION,"Clase VectorClass 2.05 - Método deleteElement","")
		Exit Sub
	End Sub
	
	'********************************************************************************************************	
	
	Private Function IsCorrectDataType1(valor As Variant) As Integer 
		' Retorna true si el valor de parametro es el correcto tipo de datos
		' para insertar en el vector.
		' Convierte el valor de parametro al tipo del vector. Generalmente se usa
		' cuando el valor del vector por ejemplo es un Double, y se esta insertando un
		' Integer.
		' Retorna true si la conversion fue exitosa, false en caso contrario
		Dim tipoACheckear As Integer
		
		On Error GoTo HANDLER
		IsCorrectDataType1 = False
		
		tipoACheckear = DataType(valor)
		If EsTipoNumerico(tipo1) And EsTipoNumerico(tipoACheckear) Then
			If tipoACheckear >= V_INTEGER And tipoACheckear < tipo1 Then
				AsignarAlTipoDelVector1 valor
			End If
		ElseIf tipo1 <> tipoACheckear Then 'Tipo incorrectos
			Exit Function
		End If
		
		IsCorrectDataType1 = True
		Exit Function
HANDLER:
		'	Call RegistraryGenerarError(NOMBRE_APLICACION,"Clase VectorClass 2.05 - Función IsCorrectDataType","")
		Exit Function
	End Function
	'********************************************************************************************************	

	Private Function IsCorrectDataType2(valor As Variant) As Integer 
		' Retorna true si el valor de parametro es el correcto tipo de datos
		' para insertar en el vector.
		' Convierte el valor de parametro al tipo del vector. Generalmente se usa
		' cuando el valor del vector por ejemplo es un Double, y se esta insertando un
		' Integer.
		' Retorna true si la conversion fue exitosa, false en caso contrario
		Dim tipoACheckear As Integer
		
		On Error GoTo HANDLER
		IsCorrectDataType2 = False
		
		tipoACheckear = DataType(valor)
		If EsTipoNumerico(tipo2) And EsTipoNumerico(tipoACheckear) Then
			If tipoACheckear >= V_INTEGER And tipoACheckear < tipo2 Then
				AsignarAlTipoDelVector2 valor
			End If
		ElseIf tipo1 <> tipoACheckear Then 'Tipo incorrectos
			Exit Function
		End If
		
		IsCorrectDataType2 = True
		Exit Function
HANDLER:
		'	Call RegistraryGenerarError(NOMBRE_APLICACION,"Clase VectorClass 2.05 - Función IsCorrectDataType","")
		Exit Function
	End Function
	
	'********************************************************************************************************  
	Private Function EsTipoNumerico(ByVal tipo As Integer) As Integer
		' Retorna true si el tipo de parametro es numerico  
		On Error GoTo HANDLER
		
		Select Case tipo
			Case V_INTEGER, V_LONG, V_SINGLE, V_DOUBLE: EsTipoNumerico = True
			Case Else
				EsTipoNumerico = False
		End Select 
		
		Exit Function
HANDLER:
		'Call RegistraryGenerarError(NOMBRE_APLICACION,"Clase VectorClass 2.05 - Función EsTipoNumerico","")
		Exit Function
	End Function
	
	
	Private Function AsignarAlTipoDelVector1(valor As Variant) As Integer
		On Error GoTo HANDLER
		
		Select Case tipo1
			Case V_EMPTY:
			Case V_NULL:
			Case V_INTEGER: valor = CInt(valor)
			Case V_LONG:  valor = CLng(valor)
			Case V_SINGLE:  valor = CSng(valor)
			Case V_DOUBLE:  valor = CDbl(valor)
			Case V_CURRENCY: valor = CCur(valor)
			Case V_DATE:  valor = CDat(valor)
			Case V_STRING:  valor = CStr(valor)
			Case V_DISPATCH:
			Case V_ERROR:
			Case V_BOOLEAN:
			Case V_VARIANT:
			Case V_IUNKNOWN:
			Case V_LSOBJ:
			Case V_PRODOBJ:
			Case Else
				Error PARAMETER_PROBLEM,"El valor de parametro tiene un tipo incorrecto: " & CStr(DataType(tipo1))
		End Select
		
		Exit Function
HANDLER:
		'Call RegistraryGenerarError(NOMBRE_APLICACION,"Clase VectorClass 2.05 - Funcion AsignarAlTipoDelVector","")
		Exit Function
	End Function
	Private Function AsignarAlTipoDelVector2(valor As Variant) As Integer
		On Error GoTo HANDLER
		
		Select Case tipo1
			Case V_EMPTY:
			Case V_NULL:
			Case V_INTEGER: valor = CInt(valor)
			Case V_LONG:  valor = CLng(valor)
			Case V_SINGLE:  valor = CSng(valor)
			Case V_DOUBLE:  valor = CDbl(valor)
			Case V_CURRENCY: valor = CCur(valor)
			Case V_DATE:  valor = CDat(valor)
			Case V_STRING:  valor = CStr(valor)
			Case V_DISPATCH:
			Case V_ERROR:
			Case V_BOOLEAN:
			Case V_VARIANT:
			Case V_IUNKNOWN:
			Case V_LSOBJ:
			Case V_PRODOBJ:
			Case Else
				Error PARAMETER_PROBLEM,"El valor de parametro tiene un tipo incorrecto: " & CStr(DataType(tipo2))
		End Select
		
		Exit Function
HANDLER:
		'Call RegistraryGenerarError(NOMBRE_APLICACION,"Clase VectorClass 2.05 - Funcion AsignarAlTipoDelVector","")
		Exit Function
	End Function
	
	'********************************************************************************************************  
	
	Private Function TipoToString(ByVal intTipo As Integer) As String
		' Dado el valor numerico que retorna la funcion DataType, esta funcion
		' retorna un string con el nombre del tipo de datos
		On Error GoTo HANDLER
		
		Select Case intTipo
			Case V_EMPTY:  	TipoToString = ""
			Case V_NULL:  		TipoToString = ""
			Case V_INTEGER: 	TipoToString = "INTEGER"
			Case V_LONG:  		TipoToString = "LONG"
			Case V_SINGLE:  	TipoToString = "SINGLE"
			Case V_DOUBLE:  	TipoToString = "DOUBLE"
			Case V_CURRENCY: 	TipoToString = "CURRENCY"
			Case V_DATE:  		TipoToString = "DATE"
			Case V_STRING:  	TipoToString = "STRING"
			Case V_DISPATCH: 	TipoToString = "DISPATCH"
			Case V_ERROR:  	TipoToString = "ERROR"
			Case V_BOOLEAN: 	TipoToString = "BOOLEAN"
			Case V_VARIANT: 	TipoToString = "VARIANT"
			Case V_IUNKNOWN: 	TipoToString = "IUNKNOWN"
			Case V_LSOBJ:  	TipoToString = "LSOBJ"
			Case V_PRODOBJ: 	TipoToString = "PRODOBJ"
			Case Else
				Error PARAMETER_PROBLEM,"El valor de parametro tiene un tipo incorrecto: " & CStr(DataType(intTipo))
		End Select  
		
		Exit Function
HANDLER:
		'	Call RegistraryGenerarError(NOMBRE_APLICACION,"Clase VectorClass 2.05 - Función TipoToString","")
		Exit Function
	End Function
	'************************************************************************************
	Public Property Get cantElem As Long
		' Retorna la cantidad de elementos que componen el objeto vector
		On Error GoTo HANDLER
		
		cantElem = largo
		
		Exit Property
HANDLER:
		'Call RegistraryGenerarError(NOMBRE_APLICACION,"Clase VectorClass 2.05 - Propiedad Get cantElem","")
		Exit Property
	End Property
	'Public Function vec1 As Vector
		' Retorna la cantidad de elementos que componen el objeto vector
	'	On Error GoTo HANDLER
	'	vec1 = v1
		
	'	Exit Function
'HANDLER:
		'Call RegistraryGenerarError(NOMBRE_APLICACION,"Clase VectorClass 2.05 - Propiedad Get cantElem","")
'		Exit Function
'	End Function
'	Public Function  vec2 As Vector
'		' Retorna la cantidad de elementos que componen el objeto vector
'		On Error GoTo HANDLER
'		
'		vec2 = v2
'		
'		Exit Function
'HANDLER:
	'	'Call RegistraryGenerarError(NOMBRE_APLICACION,"Clase VectorClass 2.05 - Propiedad Get cantElem","")
	'	Exit Function
	'End Function



'++LotusScript Development Environment:2:3:vec2 Get:0:8

End Class