'++LotusScript Development Environment:2:5:(Options):0:74
Option Public

Use "UnidadForm Class"
Use "UsuarioForm"
Use "NumeradorClient"
Use "Roles Class"
Use "IGDocConfig"
Use "MXGraph 1.0"
Use "ClaseIndiceFormularios"
Use "ClaseAuditoriaFormularios"
Use "ClaseSolictudAvisoFormularios"
Use "VectorClass 2.05"
Use "WSCGenerarDoc"
 
'******************************************************************************************************************	
'*                                                 
'*								CLASS <FORMULARIO>
'* 
'******************************************************************************************************************	
%REM
CONSTRUCTOR:
	Sub new (id As String, creado As Boolean, usuarioF As UsuarioForm)


'******************************************************************************************************************	
	
'MÉTODOS PÚBLICOS
	
'******************************************************************************************************************

	Public Function Crear(codigoFormulario As Integer) As String

	Public Function Enviar(codigoFormulario As Integer, unidadAEnviar As String) As String

	Public Function Reenviar(unidadDestino As String, razon As String) As String

	Public Function ReenviarUnidadSuperior(razon As String) As String

	Public Function Devolver(razonDevolver As String) As String

	Public Function Recibir As String

	Public Function Editar As String

	Public Function Guardar As String

	Public Function Firmar(Byval sFirma As String) As String

	Public Function FirmarDarPase(Byval sFirma As String, Byval unidadAEnviar As String) As String

	Public Function Asignar (Byval usuarioEditor As String) As String

	Public Function AsignarParaFirmar(Byval usuarioEditor As String) As String

	Public Function DarPase(unidadAEnviar As String) As String

	Public Function Finalizar(razonFinalizacion As String) As String

	Public Function Archivar(Byval razon As String) As String

	Public Function Reservar As String

	Public Function Liberar As String



'******************************************************************************************************************	
	
'FUNCIONES Y PROCEDIMIENTOS PRIVADOS
	
'******************************************************************************************************************

	Sub checkGuardar

	Sub checkArchivar

	Sub checkFinalizar

	Sub checkDevolver

	Sub checkReenviar(unidadDestino As String)

	Sub checkLiberar

	Sub checkRecibir

	Sub enviarMail(destinatarios As Vector, asunto As String, body As String)
		'Éste método permite enviar un mail controlando que el remitente no sea quien moificó el código de la clase

	Sub checkEditar

	Sub checkAsignar

	Sub checkDarPaseFormInterno

	Sub checkDarPase(unidad As UnidadFormClass)

	Sub checkCrear

	Sub checkUsuarioEnOficinaActual
		'Valida que el usuario que ejecuta el método pertenezca a la oficina actual y tenga acceso al formulario

	Sub checkFormularioEstado(estado As String)

	Sub checkReservadoPorUsuario

	Sub checkOficina()

	Sub checkUsuarioEnOficina(codOficina As String)

	Sub checkAccesoOficina(codOficina As String, codigoFormulario As String)

	Sub MoverFormToArchivo(dbA As notesDatabase)

	Function calcularDestinoPase(unidad As String)

	
%END REM

Use "ClaseSolictudAvisoFormularios"
Use "ClaseSolictudAvisoFormularios"

'++LotusScript Development Environment:2:5:(Forward):0:1
Declare Public Class ClaseFormulario
Declare Sub Terminate
Declare Sub archivarFormIntegrado(doc As NotesDocument, dbForms As NotesDatabase, link As String)
Declare Sub agregarValor(doc As NotesDocument, nombreCampo As String, valor As Variant)
Declare Function estaActivadaNotificacion(accion As String) As Boolean
Declare Sub quitarUltimoValor(doc As NotesDocument, nombreCampo As String)
Declare Sub borrarIndice (ByVal numero As String)
Declare Sub actualizarIndice(Byval numero As String, dbForms As NotesDatabase)
Declare Sub agregarUnidadLectora(doc As NotesDocument, nroUnidad As String)
Declare Sub finalizarFormIntegrado(doc As NotesDocument, dbForms As NotesDatabase)

'++LotusScript Development Environment:2:5:(Declarations):0:10

Const V_TM_POR_ID					="VTiposMarcaxId"
Public Const CMP_M_FORM				="FMarca"
Public Const CMP_M_USUARIO			="sUsuario"
Public Const CMP_M_USUARIO_AUT		="sUsuarioAutor"
Public Const CMP_M_LECT_PER			="sLectPer"
Public Const CMP_M_ID_TIPO_MARCA	="nIdMarca"
Public Const CMP_M_TEXTO			="sTexto"
Public Const CMP_M_COLOR			="sColor"
Public Const CMP_M_NRO_EXP			="sNroExp"
Public Const CMP_M_TEXTO_EXP		="sTextoExp"
Public Const CMP_M_UNIDAD			="sUnidad" 
Const CMP_TM_FORM					="FTipoMarca"
Const CMP_TM_USUARIO				="sUsuario"
Const CMP_TM_NRO_EXP				="sNroExp"
Const CMP_TM_ID						="nId"
Const CMP_TM_TEXTO					="sTextoMarca"
Const CMP_TM_COLOR					="sColorMarca"
Public Const CMP_INTEGRACION_EXPEDIENTES 	= "sExpedientes"
Public Const CMP_INTEGRACION_BLOQUEANTES 	= "sBloqueantes"
Public Const CMP_INTEGRACION_OFICINAS	 	= "sOficinas"
Public Const CMP_INTEGRACION_ASUNTOS		= "sAsuntos"
Public Const CMP_INTEGRACION_SCCIONES		= "sSecciones"
Public Const CMP_INTEGRACION_SERVERS		= "sServidoresExp"
Public Const CMP_INTEGRACION_DBS			= "sBasesExp"
Public Const CMP_INTEGRACION_UNIVERSAL_IDS	= "sUIdExp"
' Vistas

Private Const VISTA_GRUPO_POR_CODIGO				= "GruposxCodigo"

'CONSTANTES

Private Const FORMATO_FORM_CODIGO					= "IGDOC_FORM_c_yy"

'Nombre de vistas
Private Const NOMBRE_VISTA_TODOS_POR_NUMERO_Y_SECCION	= "TodosXNumeroYSeccion"
Private Const NOMBRE_VISTA_UNIDADES_POR_NUMERO			= "BusquedaUnixNro"

Private Const FRM_ROL_DESARROLLO					= "[Desarrollo]"
Private Const FRM_ROL_VER_TODOS					= "[VerTodos]"

'Tags de Formato de Mensaje
Private Const MSG_TAG_ACCION						= "%ACCION%"
Private Const MSG_TAG_TEMA						= "%TEMA%"
Private Const MSG_TAG_NUMERO_DOC					= "%NUMERO%"
Private Const MSG_TAG_TIPO_DOC					= "%TIPOFORMULARIO% "
Private Const MSG_TAG_FECHA_DOC					= "%FECHA% "
Private Const MSG_TAG_LINK						= "%LINK%"
Private Const MSG_TAG_UNIDAD_EXP					= "%UNIDAD%"
Private Const MSG_TAG_ASUNTO						= "%ASUNTO%"

'ROLES
Private Const ROL_CREADOR						= "RolCreador"
Private Const ROL_EDITOR							= "RolEditor"
Private Const ROL_RECEPTOR						= "RolReceptor"
Private Const ROL_PASE							= "RolPase"
Private Const ROL_FIRMAR							= "RolFirmante"
Private Const ROL_ARCHIVAR						= "RolArchivo"
Private Const ROL_FINALIZAR						= "RolFinalizar"

' CLAVES A LAS BASES DE INTEROPERABILIDAD
Private Const CLAVE_BASE_FORMULARIOS_ACCIONES 		= "FORMULARIOSACCIONES"

'CAMPOS
Private Const CAMPO_DEFFORMULARIO_ACCESOGLOBAL 		= "sAccesoGlobal"
Private Const CAMPO_DEFFORMULARIO_UNIDADINICIO		= "sUnidadDeInicio"
Private Const CAMPO_DEFFORMULARIO_INICIORESTRINGIDO 	= "sInicioRestringido"
Private Const CAMPO_DEFFORMULARIO_VISIBILIDAD		= "sVisibilidad"
Private Const CAMPO_DEFFORMULARIO_CODIGO			= "sCodigo"
Private Const CAMPO_DEFFORMULARIO_ACUSERECEPCION		= "sAcuse" 
Private Const CAMPO_DEFFORMULARIO_UNIDAD			= "sUnidad"
Private Const CAMPO_DEFFORMULARIO_SEL_UNIDADES_ENVIAR	= "sSeleccionaUnidadEnviar"
Private Const CAMPO_DEFFORMULARIO_CCTEMAS			= "ccTemas"
Private Const CAMPO_DEFFORMULARIO_TEMAS				= "sTemas"
Private Const CAMPO_DEFFORMULARIO_UNIDADESTEMAS		= "sUnidadesTemas"
Private Const CAMPO_DEFFORMULARIO_FIRMAENVIAR		= "sFirmarAlEnviar"
Private Const CAMPO_DEFFORMULARIO_CANT_SECCIONES		= "nCantSecciones"
Private Const CAMPO_DEFFORMULARIO_XML				= "XML"
Private Const CAMPO_DEFFORMULARIO_DESCRIPCION_SEC	= "DescripcionSeccion"
Private Const CAMPO_DEFFORMULARIO_SLA				= "activoMailPlazos"
Private Const CAMPO_DEFFORMULARIO_PLAZORECEPCION	= "tipoMailPlazos"
Private Const CAMPO_DEFFORMULARIO_AVISO_MAIL		= "sCamposAvisosMail"
Private Const CAMPO_DEFFORMULARIO_AVISO_TEL			= "sCamposAvisosTelefono"
Private Const CAMPO_DEFFORMULARIO_AVISO_CEL			= "sCamposAvisosCelular"
Private Const CAMPO_DEFFORMULARIO_AVISOS_ACTIVOS	= "rAvisosActivos"
Private Const CAMPO_DEFFORMULARIO_AVISOS_SIEMPRE	= "rAvisosSiempre"
Private Const CAMPO_DEFFORMULARIO_AVISOS_ACCION		= "rAvisosAccion"
Private Const CAMPO_FORMULARIO_USUARIOPASE		    = "sUsuariosPaseSeccion"
Private Const CAMPO_FORMULARIO_FECHADEPASE			= "sFechasDePase"

Private Const CAMPO_FORMULARIO_TEMAS				= "sTemas"
Private Const CAMPO_FORMULARIO_CODIGOFORM			= "Codigo"
Private Const CAMPO_FORMULARIO_UNIDAD				= "sUnidad"
Private Const CAMPO_FORMULARIO_UNIDADACTUAL			= "UnidadActual"
Private Const CAMPO_FORMULARIO_UNIDADANTERIOR		= "UnidadAnterior"
Private Const CAMPO_FORMULARIO_ESTADO				= "sEstado"	
Private Const CAMPO_FORMULARIO_RESERVADOPOR			= "sReservadoPor"
Private Const CAMPO_FORMULARIO_USUARIORECEPTOR		= "sUsuarioRecepcion"
Private Const CAMPO_FORMULARIO_USUARIORECORRIDO		= "sUsuarioRecorrido"
Private Const CAMPO_FORMULARIO_NUMERO				= "Numero"
Private Const CAMPO_FORMULARIO_FECHASRECEPCION		= "FechasRecepcion"
Private Const CAMPO_FORMULARIO_AUTOR				= "Autor"
Private Const CAMPO_FORMULARIO_REENVIADO			= "Reenviado"
Private Const CAMPO_FORMULARIO_FECHAFIRMA			= "sFechaFirma"
Private Const CAMPO_FORMULARIO_FIRMA				= "sFirma"
Private Const CAMPO_FORMULARIO_FIRMANTE				= "sFirmante"
Private Const CAMPO_FORMULARIO_A_FIRMAR				= "aFirmar"
Private Const CAMPO_FORMULARIO_CAMPOS_A_FIRMAR		= "sCamposAFirmar"
Private Const CAMPO_FORMULARIO_FECHASENVIO			= "FechasEnvio"
Private Const CAMPO_FORMULARIO_UNIDADRECORRIDO		= "sUnidadRecorrido"
Private Const CAMPO_FORMULARIO_RAZONDEVOLVER			= "sRazonDevolver"
Private Const CAMPO_FORMULARIO_UNIDADESPREVIAS		= "UnidadesPrevias"
Private Const CAMPO_FORMULARIO_RECORRIDO_UNIDADES		= "recorridoUnidades"
Private Const CAMPO_FORMULARIO_FECHAFINALIZACION		= "fFinalizacion"
Private Const CAMPO_FORMULARIO_USUARIOFINALIZACION	= "sUsuarioFin"
Private Const CAMPO_FORMULARIO_RAZONFINALIZACION		= "sRazonFinalizar"
Private Const CAMPO_FORMULARIO_USUARIOINICIO			= "sUsuarioInicio"
Private Const CAMPO_FORMULARIO_FECHACREACION			= "sFechaCreacion"
Private Const CAMPO_FORMULARIO_UNIDADINICIO			= "sUnidadInicio"
Private Const CAMPO_FORMULARIO_LECTORES				= "Lectores"
Private Const CAMPO_FORMULARIO_LECTORESPERMANENTES	= "LectoresPermanentes"
Private Const CAMPO_FORMULARIO_ARCHIVOS_ADJUNTOS		= "NombresArchivosSeccion"
Private Const CAMPO_FORMULARIO_FORM				= "Form"
Private Const CAMPO_FORMULARIO_RAZON_ARCHIVAR		= "sRazonArchivar"
Private Const CAMPO_FORMULARIO_FORMATONUMERACION		= "sNumeracion"
Private Const CAMPO_FORMULARIO_FECHA_VENCIMIENTO	= "fechaPlazosVencimiento"
Private Const CAMPO_FORMULARIO_TIEMPO_LIMITE_SECCION = "fechaLimiteSeccionSLA"
Private Const CAMPO_FORMULARIO_ESTADO_VENCIMIENTO	= "estadoPorSeccion"
Private Const CAMPO_FORMULARIO_DESCRIPCION_SECCIONES= "descripcionSecciones"
Private Const CAMPO_FORMULARIO_ERROR_GUARDADO 		= "ErrorGuardado"
Private Const CAMPO_FORMULARIO_NOMBRE				= "sNombreForm"
Private Const CAMPO_FORMULARIO_VISIBILIDAD			= "sVisibilidad"
Private Const CAMPO_FORMULARIO_FIRMARALENVIAR		= "sFirmarAlEnviar"
Private Const CAMPO_FORMULARIO_SECCION				= "Seccion"
Private Const CAMPO_FORMULARIO_CANT_SECCIONES		= "nCantSecciones"
Private Const CAMPO_FORMULARIO_PROXIMA_SECCION		= "nProximaSeccion"
Private Const CAMPO_FORMULARIO_SECCION_ANTERIOR		= "nSeccionAnterior"
Private Const CAMPO_FORMULARIO_RECORRIDO_SECCIONES	= "recorridoSecciones"
Private Const CAMPO_FORMULARIO_CORREOS_AVISOS		= "ccCorreosAvisos"
Private Const CAMPO_FORMULARIO_CELULARES_AVISOS		= "ccCelularesAvisos"
Private Const CAMPO_FORMULARIO_TELEFONOS_AVISOS		= "ccTelefonosAvisos"

Private Const CAMPO_UNIDAD_CODIGOFORM				= "sCodigoForm"
Private Const CAMPO_UNIDAD_NOMBRE					= "sUnidad"

'CAMPOS INTEGRACION FORMULARIOS
Private Const CAMPO_DEF_FORM_CAMPOS_FORM			= "sCamposFormularios"
Private Const CAMPO_INT_FORM_EXIST_PADRE			= "sIntegracionForm"
Private Const CAMPO_INT_FORM_NRO_FORM_PADRE			= "sNroFormPadre"
Private Const CAMPO_INT_FORM_SEC_FORM_PADRE			= "sSecFormPadre"
Private Const CAMPO_INT_FORM_NRO_FORM_HIJO 			= "sFormularios"
Private Const CAMPO_INT_FORM_UNIDAD_HIJO			= "sOficinasForm"
Private Const CAMPO_INT_FORM_NOM_FORM_HIJO			= "sNombresForm"
Private Const CAMPO_INT_FORM_BLOQUEANTE_HIJO		= "sBloqueantesForm"
Private Const CAMPO_INT_FORM_SEC_HIJO				= "sSeccionesForm"
Private Const CAMPO_INT_FORM_BLOQUEADO				= "sFormBloqueadoForm"
Private Const CAMPO_INT_FORM_FECHA_CREAC_HIJO		= "sFechaCreacionForm"
Private Const CAMPO_INT_FORM_URL_HIJO				= "sURLsForm"

'ESTADOS DE FORMULARIOS
Private Const ESTADO_FORM_ENUNIDAD					= "En Unidad"
Private Const ESTADO_FORM_ENTRANSITO				= "En Tránsito"
Private Const ESTADO_FORM_RESERVADO					= "Reservado"
Private Const ESTADO_FORM_RESERVADO_PARA_FIRMAR		= "Reservado para firmar"
Private Const ESTADO_FORM_FINALIZADO				= "Finalizado"
Private Const ESTADO_FORM_ARCHIVADO					= "Archivado"
Private Const ESTADO_FORM_ENGENERACION				= "En Generacion"
Private Const ESTADO_FORM_FIRMADO					= "Firmado"

Private Const ESTADO_FORM_A_BORRAR					= "ABorrar"

' MX GRAPH
Private Const MXGRAPH_ID_UNIDAD_CUALQUIERA			= "@idCualquiera"
Private Const MXGRAPH_ID_UNIDAD_SUPERIOR			= "@idSuperior"
Private Const MXGRAPH_ID_UNIDAD_INICIAL				= "@idInicial"
Private Const MXGRAPH_ID_UNIDAD_GRUPO				= "@idGrupo"
Private Const MXGRAPH_ID_UNIDAD_ANTERIOR				= "@idAnterior"
Private Const CAMPO_FORMULARIO_ID_ELEMENTO			= "mxIdElemento"
Private Const CAMPO_FORMULARIO_ID_ELEMENTO_INICIO	= "mxIdElementoInicio"
Private Const CAMPO_FORMULARIO_ID_ELEMENTO_PROXIMAU		="mxIdProximaUnidad"
Private Const CAMPO_FORMULARIO_RECORRIDO_IDS		= "mxRecorridoIdNodos"
Private Const CAMPO_FORMULARIO_XML					= "mxXML"
Private Const CAMPO_FORMULARIO_PROXIMA_UNIDAD			= "mxAccionProximaUnidad"
Private Const TIPO_ACCION_SELECCIONAR_UNIDAD		= 2
Private Const TIPO_ACCION_MODIFICAR_CAMPO			= 1
Private Const TIPO_ACCION_GUARDAR 					= 3


'ERRORES GENERADOS
Private Const ERROR_ID_FORM_NOTHING				= 16000
Private Const MSG_ERROR_ID_FORM_NOTHING				= "El id de formulario no está seteado"

Private Const ERROR_CREADO_FORM_NOTHING				= 16001
Private Const MSG_ERROR_CREADO_FORM_NOTHING			= "La varibale creado no está seteada"

Private Const ERROR_COD_FORM_NOTHING				= 16002
Private Const MSG_ERROR_COD_FORM_NOTHING			= "El código de formulario no está seteado"

Private Const ERROR_DEF_FORM_NOTHING				= 16003
Private Const MSG_ERROR_DEF_FORM_NOTHING			= "No se encontró la definición del formulario"

Private Const ERROR_USUARIO_NOTHING				= 16004
Private Const MSG_ERROR_USUARIO_NOTHING				= "El usuario no está seteado"

Private Const ERROR_OFICINA_CREAR					= 16005
Private Const MSG_ERROR_OFICINA_CREAR				= "La unidad no está en la lista de unidades que pueden crear el formulario"

Private Const ERROR_USUARIO_OFICINA				= 16006
Private Const MSG_ERROR_USUARIO_OFICINA				= "El usuario no pertenece a la unidad o no tiene acceso al formulario"

Private Const ERROR_ROL_USUARIO_CREADOR				= 16007
Private Const MSG_ERROR_ROL_USUARIO_CREADOR			= "El usuario no cuenta con el rol de creador dentro de la unidad"

Private Const ERROR_ROL_USUARIO_EDITOR				= 16008
Private Const MSG_ERROR_ROL_USUARIO_EDITOR			= "El usuario no cuenta con el rol de edicion dentro de la unidad"

Private Const ERROR_ROL_USUARIO_RECEPTOR			= 16009
Private Const MSG_ERROR_ROL_USUARIO_RECEPTOR			= "El usuario no cuenta con el rol de receptor dentro de la unidad"

Private Const ERROR_ROL_USUARIO_FIRMAR				= 16010
Private Const MSG_ERROR_ROL_USUARIO_FIRMAR			= "El usuario no cuenta con el rol de firmar dentro de la unidad"

Private Const ERROR_ROL_USUARIO_PASE				= 16011
Private Const MSG_ERROR_ROL_USUARIO_PASE			= "El usuario no cuenta con el rol de dar pase dentro de la unidad"

Private Const ERROR_ROL_USUARIO_ARCHIVAR			= 16012
Private Const MSG_ERROR_ROL_USUARIO_ARCHIVAR			= "El usuario no cuenta con el rol de archivar dentro de la unidad"

Private Const ERROR_USUARIO_OFICINAACTUAL			= 16013
Private Const MSG_ERROR_USUARIO_OFICINAACTUAL		= "El usuario no pertenece a la unidad actual"

Private Const ERROR_FORMULARIO_ESTADO				= 16014
Private Const MSG_ERROR_FORMULARIO_ESTADO			= "El estado del formulario no es "

Private Const ERROR_FORMULARIO_RESERVADOPOR			= 16015
Private Const MSG_ERROR_FORMULARIO_RESERVADOPOR		= "El formulario no está reservado por el usuario "

Private Const ERROR_ROL_USUARIO_EDITORAASIGNAR		= 16016
Private Const MSG_ERROR_ROL_USUARIO_EDITORAASIGNAR	= "El usuario a asignarle el formulario no tiene rol de editor"

Private Const ERROR_USUARIO_OFICINAACTUAL2			= 16017
Private Const MSG_ERROR_USUARIO_OFICINAACTUAL2		= "El usuario al que se quiere asignar el formulario no pertenece a la unidad actual"

Private Const ERROR_FORMULARIO_ESTADO_ENTRANSITO		= 16018
Private Const MSG_ERROR_FORMULARIO_ESTADO_ENTRANSITO	= "El formulario no puede asignarse cuando su estado está en tránsito"

Private Const ERROR_FORMULARIO_ESTADO_FINALIZADO		= 16019
Private Const MSG_ERROR_FORMULARIO_ESTADO_FINALIZADO	= "El formulario no puede asignarse cuando su estado está en finalizado"

Private Const ERROR_UNIDAD_RECEPTOR				= 16020
Private Const MSG_ERROR_UNIDAD_RECEPTOR				= "La oficina de destino no tiene miembros con rol de receptor"

Private Const ERROR_FORMULARIO_SECCION				= 16021
Private Const MSG_ERROR_FORMULARIO_SECCION			= "No se puede devolver el formulario en ésta sección."

Private Const ERROR_ROL_USUARIO_FINALIZAR			= 16022
Private Const MSG_ERROR_ROL_USUARIO_FINALIZAR		= "El usuario no cuenta con el rol de finalizar dentro de la unidad"

Private Const ERROR_UNIDAD_DARPASE					= 16023
Private Const MSG_ERROR_UNIDAD_DARPASE				= "La unidad no está habilitada para dar pase"

Private Const ERROR_UNIDADDESTINO_VACIA				= 16024
Private Const MSG_ERROR_UNIDADDESTINO_VACIA			= "La unidad de destino no puede ser vacía"

Public Const ERROR_UNIDAD_ARCHIVAR					= 16025
Public Const MSG_ERROR_UNIDAD_ARCHIVAR_1			= "La siguiente unidad no está habilitada a realizar Archivado de Expedientes: "

Private Const ERROR_ACCESO_FORMULARIO				= 16026
Private Const MSG_ERROR_ACCESO_FORMULARIO			= "La oficina no tiene acceso al formulario"

Private Const ERROR_FORMULARIO_NO_ENCONTRADO_1		= 16027
Private Const MSG_ERROR_FORMULARIO_NO_ENCONTRADO_1	= "No se encontró el formulario de número "

Private Const ERROR_FORMULARIO_NO_ENCONTRADO_2		= 16028
Private Const MSG_ERROR_FORMULARIO_NO_ENCONTRADO_2	= "No se encontró el formulario de UNID "

Private Const ERROR_NUMERACION_NROUNIDAD			= 16029
Private Const MSG_ERROR_NUMERACION_NROUNIDAD			= "El formato de numeración no puede contener un número de unidad si éste está definido como externo"

Private Const ERROR_UNIDAD_CREACION				= 16030
Private Const MSG_ERROR_UNIDAD_CREACION				= "La unidad en la que se encuentra no es la unidad de inicio en la definición del flujo del formulario"

Private Const ERROR_USUARIO_ANONIMO				= 16031
Private Const MSG_ERROR_USUARIO_ANONIMO				= "No se permite la creación de este formulario por parte de usuario anónimos"

Private Const ERROR_UNIDAD_A_ENVIAR				= 16032
Private Const MSG_ERROR_UNIDAD_A_ENVIAR				= "No existe una unidad para enviar en la definición del flujo del formulario"

Private Const ERROR_PASE_UNIDAD_SUPERIOR			= 16033
Private Const MSG_ERROR_PASE_UNIDAD_SUPERIOR			= "Error al dar pase. Según la definición del flujo del formulario debe darse pase a la unidad superior y no existe tal."

Private Const ERROR_CORRER_AGENTE_ACCION			= 16034
Private Const MSG_ERROR_CORRER_AGENTE_ACCION			= "Error al dar pase. No se ha podido correr el agente asociado a la acción."

Private Const ERROR_ACCION_NO_MODIFICO_UNIDAD			= 16035
Private Const MSG_ERROR_ACCION_NO_MODIFICO_UNIDAD			= "No se modificó la unidad en la acción, por favor revise el agente asociado a dicha accion"

Private Const ERROR_ACCION_GUARDAR						= 16036
Private Const MSG_ERROR_ACCION_GUARDAR					= "No se guardo el formulario correctamente en la acción de guardado"

Private Const ERROR_UNIDAD_FUERA_DE_GRUPO						= 16037
Private Const MSG_ERROR_UNIDAD_FUERA_DE_GRUPO					= "La unidad no pertenece al grupo definido en el flujo del Formulario"

Private Const ERROR_DARPASE_GENERAL						= 16038
Private Const MSG_ERROR_DARPASE_USUARIO_NO_AUTORIZADO = "Error al dar pase. Este formulario ya fue reservado por "
Private Const MSG_ERROR_FIRMAR_USUARIO_NO_AUTORIZADO = "Error al firmar. Este formulario fue reservado por "

Private Const ERROR_FORMULARIO_DEVOLUCION_INFORME = "1639"
Private Const MSG_ERROR_FORMULARIO_DEVOLUCION_INFORME ="No se puede devolver el formulario en ésta sección, ya que contiene un pedido de informe en la misma"


Dim docProfile As NotesDocument

'******************************************************************************************************************	
Public Class ClaseFormulario
'******************************************************************************************************************	
'MIEMBROS PRIVADOS	
	 
	Private conf As ConfigForms
	Private dbOrgan As NotesDatabase
	Private dbFormularios As NotesDatabase
	Private dbAdministracion As NotesDatabase
	Private dbArchivo As NotesDatabase
	Private dbAcciones As NotesDatabase
	Private doc As NotesDocument
	Private estaCreado As Boolean
	Private vistaDefFormCodigo As NotesView
	Private usuario As UsuarioForm
	Private userCanonical As String
	Private docDefFormulario As NotesDocument
	Private igdocConf As IGDocConfig
	Private mxController As MXController
	Private Auditoria As AuditoriaFormularios
	
'******************************************************************************************************************	
	
'PROPERTIES	
	
'******************************************************************************************************************	
	
	
	
	
'******************************************************************************************************************	
	
'CONSTRUCTOR	
	
'******************************************************************************************************************	
	Public Sub New (id As String, creado As Boolean, strUsuario As String, pathBase As string)
		On Error Goto HANDLER
		
		Dim vistaFormPorNumero As NotesView
		Dim xml As String
		Dim cantSecciones As Integer
		Dim nname As New NotesName(strUsuario)
		Dim mimeXML As NotesMIMEEntity
		Dim stream As NotesStream
		Dim session As New NotesSession
		Dim rtitem As NotesRichTextItem
		Dim item As NotesItem
		
		
		estaCreado = creado
		'Inicializo la Auditoria
		
		Set Auditoria = New AuditoriaFormularios("IGDoc - Formularios")
		Auditoria.tipoDoc = "Formulario"
		Auditoria.usuario = strUsuario
		Auditoria.numeroDoc = id
		
		Set conf = New ConfigForms()
		userCanonical = nname.Canonical
		Set usuario = New UsuarioForm(strUsuario)
		
	'	session.ConvertMime= False
		Set stream = session.CreateStream
		Set dbOrgan = conf.ReferenciarBaseDeDatos(CLAVE_DBORGANIZACION)
		Set dbFormularios = session.Getdatabase("", pathBase)
		
		Set dbAdministracion= conf.ReferenciarBaseDeDatos(CLAVE_DBADMINCONF)
		Set dbArchivo = conf.ReferenciarBaseDeDatos(CLAVE_DBARCHIVO)
		Set dbAcciones = conf.ReferenciarBaseDeDatos(CLAVE_BASE_FORMULARIOS_ACCIONES)
		
		Set vistaDefFormCodigo = dbAdministracion.GetView("vDefFormxCodigo")
		
		Set igdocConf = New IGDocConfig()
		
		'Si está creado lo busco el formulario por el código
		'Si no está creado, lo busco por el UNID
		If Not estaCreado Then
			'docId = doc.getItemValue("DocDatosID")(0)
			'Set doc = Nothing
			'Set doc = dbFormularios.Getview("DocDatosPorID").getDocumentByKey(docId,True)
			Set doc = dbFormularios.GetDocumentByUNID(id)
			If doc Is Nothing Then
				Error ERROR_FORMULARIO_NO_ENCONTRADO_2, MSG_ERROR_FORMULARIO_NO_ENCONTRADO_2 & id
			End If
		Else
			'Busco el documento por número en la base dbFormularios
			
			
			Set vistaFormPorNumero = dbFormularios.GetView("TodosXNum")
			Set doc = vistaFormPorNumero.GetDocumentByKey(id, True)
			'Si no lo encuentra puede ser que el formulario esté archivado, 
			'asi que lo busco en la base dbArchivo
			
			If doc Is Nothing Then
				Set vistaFormPorNumero = dbArchivo.GetView("TodosXNum")
				Set doc = vistaFormPorNumero.GetDocumentByKey(id, True)
			End If

			If doc Is Nothing Then
				Error ERROR_FORMULARIO_NO_ENCONTRADO_1, MSG_ERROR_FORMULARIO_NO_ENCONTRADO_1 & id
			End If
			
		End If
		
		
		Set docDefFormulario = vistaDefFormCodigo.GetDocumentByKey(doc.GetItemValue(CAMPO_FORMULARIO_CODIGOFORM)(0), True)
		If docDefFormulario Is Nothing Then
			Msgbox "ES NULO "
		End If
		
		' Obtengo la definicion del flujo del formulario
		'Se cambia el 20140226 transformando los campos a richtext
		Dim rt As NotesRichTextItem
		If doc.HasItem(CAMPO_FORMULARIO_XML) Then
			If doc.Getfirstitem(CAMPO_FORMULARIO_XML).Type = RICHTEXT Then 
				Set rt = doc.Getfirstitem(CAMPO_FORMULARIO_XML)
				xml = rt.Getunformattedtext()'doc.GetItemValue(CAMPO_FORMULARIO_XML)(0)
			Else
				xml = doc.GetItemValue(CAMPO_FORMULARIO_XML)(0)
			End If
			cantSecciones = doc.GetItemValue(CAMPO_FORMULARIO_CANT_SECCIONES)(0)
		Else
			' Si no esta creado voy a buscar el xml y cantSecciones al documento de definicion
			Set rt = docDefFormulario.Getfirstitem(CAMPO_DEFFORMULARIO_XML)
			xml = rt.Getunformattedtext() 'docDefFormulario.GetItemValue(CAMPO_DEFFORMULARIO_XML)(0)
			cantSecciones = CInt(docDefFormulario.GetItemValue(CAMPO_DEFFORMULARIO_CANT_SECCIONES)(0))
			Call rt.Copyitemtodocument(doc, CAMPO_FORMULARIO_XML)
			Call doc.ReplaceItemValue(CAMPO_FORMULARIO_CANT_SECCIONES, cantSecciones)
		End If
		%rem
		If doc.HasItem(CAMPO_FORMULARIO_XML) Then
			'Call doc.Copyitem(doc.getfirstItem(CAMPO_DEFFORMULARIO_XML), CAMPO_FORMULARIO_XML)
			Set item = doc.getFirstItem(CAMPO_FORMULARIO_XML)
			Set mimeXML = doc.getMimeEntity(CAMPO_FORMULARIO_XML)
			'Set mimeXML = item.getMimeEntity()
			'If (item.Type = MIME_PART) Then
			'	MsgBox "ETSE"
			'Else
			'	MsgBox "TIPOOOOOOOO " & item.Text
			'End If
			If Not mimeXML Is Nothing Then
				Call mimeXML.GetContentAsText(stream)
				stream.Position=0
				xml = stream.ReadText
			Else
				'MsgBox "VACIO el richtext"
				'Call doc.Copyitem(docDefFormulario.getfirstItem(CAMPO_DEFFORMULARIO_XML), CAMPO_FORMULARIO_XML)
				'Set mimeXML = doc.getMimeEntity(CAMPO_FORMULARIO_XML)
				'Call mimeXML.GetContentAsText(stream)
				'stream.Position=0
				xml = item.Text
				
			End If
			
			cantSecciones = doc.GetItemValue(CAMPO_FORMULARIO_CANT_SECCIONES)(0)
		Else
			Call doc.Copyitem(docDefFormulario.getfirstItem(CAMPO_DEFFORMULARIO_XML), CAMPO_FORMULARIO_XML)
			' Si no esta creado voy a buscar el xml y cantSecciones al documento de definicion
			Set mimeXML = docDefFormulario.Getmimeentity(CAMPO_DEFFORMULARIO_XML)
			If Not mimeXML Is Nothing Then
				Call mimeXML.GetContentAsText(stream)
				stream.Position=0				
				xml = stream.ReadText
			Else
				xml = docDefFormulario.Getitemvalue(CAMPO_DEFFORMULARIO_XML)(0)
			End If
			cantSecciones = CInt(docDefFormulario.GetItemValue(CAMPO_DEFFORMULARIO_CANT_SECCIONES)(0))
			Call doc.ReplaceItemValue(CAMPO_FORMULARIO_CANT_SECCIONES, cantSecciones)
		End If
		%end rem
		'Call context.Save(True,False)
		
		Set Me.mxController = New MXController(xml, cantSecciones)
		
		'MsgBox "ID PROXIMO EN NEW" & Me.obtenerSiguiente("87").getIdElemento()
		
		'¡Call doc.save (True,False)
	'	Call stream.Close
'		session.ConvertMime=True
		Exit Sub
HANDLER:
		Msgbox "ClaseFormulario - New: " & Error$ & " " & Erl
		If Not usuarioF Is Nothing Then
			Call RegistrarYGenerarError2(Err, Error, NOMBRE_APLICACION, "Clase Formulario - Método new", "", usuarioF.nombreUsuario)	
		Else
			Call RegistrarYGenerarError2(Err, Error, NOMBRE_APLICACION, "Clase Formulario - Método new", "", "")	
		End If
		Exit Sub
	End Sub
'******************************************************************************************************************	
	
'FUNCIONES Y PROCEDIMIENTOS PÚBLICOS
	
'******************************************************************************************************************	
	
	
	Public Function Crear(codigoFormulario As Integer, enunidad As Boolean) As String
		On Error Goto HANDLER
		
		Dim nroUnidad As String
		Dim formato As String
		Dim numero As String
		Dim formato_form As String
		Dim secuencia As Long
		Dim vLectoresPermanentes As New Vector(0)
		Dim visibilidadForm As String
		Dim fechaActual As NotesDateTime
		Dim docId As String
		Dim session As New NotesSession
		Dim xml As String		
		Dim stream As NotesStream
		Dim mimeXML As NotesMIMEEntity
		
		Set fechaActual = New NotesDateTime("")
		fechaActual.Setnow
		
		formato_form = FORMATO_FORM_CODIGO
		
		'VALIDACIONES
		'************************************************
		If Isnull(codigoFormulario) Then
			Error ERROR_COD_FORM_NOTHING, MSG_ERROR_COD_FORM_NOTHING	
		End If
		'************************************************
		
		'Cargo la definición del formulario según el código
		Set docDefFormulario = vistaDefFormCodigo.GetDocumentByKey(Cstr(codigoFormulario), True)
		
		Call checkCrear()		
		
		
		'NUMERACIÓN
		'**********************************************************************************************
		'Obtengo el formato de la numeración del formulario, a partir de la definición del formulario
		formato = docDefFormulario.GetItemValue(CAMPO_FORMULARIO_FORMATONUMERACION)(0)
		formato_form = conf.SustituirAnio(formato_form)
		formato_form = conf.SustituirCodigoFormulario(formato_form, codigoFormulario)
		
		'Obtengo el código de la unidad
		nroUnidad = doc.GetItemValue(CAMPO_FORMULARIO_UNIDADACTUAL)(0)		
		'Obtengo el número para sustituir los la secuencia de numerales
		secuencia = conf.PedirNumero(formato_form)
		
		largoSec = Len(Cstr(secuencia))
		
		'Sustituyo la secuencia
		numero = conf.SustituirNumeroSecuencia(formato, secuencia)	
		'Sustituyo el indicador de año por el año actual
		numero = conf.SustituirAnio(numero)
		'Sustituir el codigo de formulario
		numero = conf.SustituirCodigoFormulario(numero, codigoFormulario)	
		'Sustituir el codigo de la unidad
		numero = conf.SustituirCodigoUnidad(numero, nroUnidad)
		
		'Seteo la numeración del formulario en el documento del formulario
		Call doc.ReplaceItemValue(CAMPO_FORMULARIO_NUMERO, numero)
		
		'**********************************************************************************************
		If docDefFormulario.GetItemValue(CAMPO_DEFFORMULARIO_VISIBILIDAD)(0) = "Interno" Then
			
			'Seteo el usuario de inicio 
			Call doc.ReplaceItemValue(CAMPO_FORMULARIO_USUARIOINICIO, usuario.NombreUsuario)
			'Seteo la unidad de inicio
			Call doc.ReplaceItemValue(CAMPO_FORMULARIO_UNIDADINICIO, nroUnidad)
			
			
			session.ConvertMime= False
			Set mimeXML = docDefFormulario.Getmimeentity(CAMPO_DEFFORMULARIO_XML)
			If Not mimeXML Is Nothing then
				Set stream = session.CreateStream			
				Call mimeXML.GetContentAsText(stream)			
				stream.Position=0
				xml = stream.ReadText
			Else
				xml = docDefFormulario.Getitemvalue(CAMPO_DEFFORMULARIO_XML)(0)
			End If
			
			If docDefFormulario.HasItem(CAMPO_DEFFORMULARIO_XML) And xml <> "" Then
				'Relativo a MxGraph:
				Dim recorrido As New Vector(0)
				Dim infoNodo As InfoNodo
				Dim infoNodoNext As InfoNodo
				Dim idNodoPrimeraUnidad As String
				Dim numeroPrimeraUnidad
				Set infoNodo = Me.obtenerUnidadInicial()
				idNodoPrimeraUnidad = infoNodo.GetIdElemento()
				numeroPrimeraUnidad = infoNodo.GetUnidad()
				Call doc.ReplaceItemValue(CAMPO_FORMULARIO_ID_ELEMENTO, idNodoPrimeraUnidad)
				Call doc.ReplaceItemValue(CAMPO_FORMULARIO_ID_ELEMENTO_INICIO, idNodoPrimeraUnidad)
				
				Call agregarValor(doc, CAMPO_FORMULARIO_RECORRIDO_IDS, idNodoPrimeraUnidad)
				
				
				' ************* Plazos para formularios ************'
				' Agrego fecha y hora del vencimiento con formato yyyy-mm-dd-hh
				fechaVencimientoSLA = ""
				
				fechaActual.Adjustday(infoNodo.getDias())
				fechaActual.AdjustHour(infoNodo.getHoras())
				
				Call doc.Replaceitemvalue(CAMPO_FORMULARIO_ESTADO_VENCIMIENTO, "Pendiente")
				yyyy = Year(fechaActual.Dateonly)
				mm = Month(fechaActual.Dateonly)
				
				dd = Day(fechaActual.Dateonly)
				hh = Hour(fechaActual.Timeonly)
				fechaVencimientoSLA = yyyy & "-" & mm &"-" & dd &"-" & hh
				fechaLimiteSeccionSLA = infoNodo.getDias()&" d - "& infoNodo.getHoras() & " h"
				Call doc.Replaceitemvalue(CAMPO_FORMULARIO_FECHA_VENCIMIENTO, fechaVencimientoSLA)
				Call agregarValor(doc, CAMPO_FORMULARIO_TIEMPO_LIMITE_SECCION, fechaLimiteSeccionSLA)
				' ************* Fin de Plazos           ************'
				'MsgBox "1: " & doc.getItemValue("sAltaTarjeta")(0)
				'Chequeo si el próximo nodo es un idGrupo
				If (Me.ExisteSiguiente(doc.GetItemValue(CAMPO_FORMULARIO_ID_ELEMENTO)(0))) Then
					Set infoNodoNext = Me.obtenerSiguiente(doc.GetItemValue(CAMPO_FORMULARIO_ID_ELEMENTO)(0))
					If (infoNodoNext.getUnidad() = "@idGrupo") Then
						Call doc.Replaceitemvalue("codMxGrupo", infoNodoNext.getIdGrupo())
					End If
					' Guardo la unidad del próximao pase
					Call doc.Replaceitemvalue(CAMPO_FORMULARIO_ID_ELEMENTO_PROXIMAU, infoNodoNext.getUnidad())
				End If
			End If
			If Not stream Is Nothing then
				Call stream.Close
			End if
			session.ConvertMime=True
		End If
		
		Call agregarValor(doc, CAMPO_FORMULARIO_RECORRIDO_UNIDADES, nroUnidad)
		Call agregarValor(doc, CAMPO_FORMULARIO_USUARIORECORRIDO, usuario.NombreUsuario)
		
		'Seteo la fecha de creación
		Call doc.ReplaceItemValue(CAMPO_FORMULARIO_FECHACREACION, Now)
		
		'Agrego la fecha de recepcion
		Call agregarValor(doc, CAMPO_FORMULARIO_FECHASRECEPCION, Now)
		
		'Seteo la sección
		Call doc.ReplaceItemValue(CAMPO_FORMULARIO_SECCION, 1)
		Call agregarValor(doc, CAMPO_FORMULARIO_RECORRIDO_SECCIONES, 1)
		'Seteo el estado segun parametro
		If enunidad then
			Call doc.ReplaceItemValue(CAMPO_FORMULARIO_ESTADO, ESTADO_FORM_ENUNIDAD)
		Else
			Call doc.ReplaceItemValue(CAMPO_FORMULARIO_ESTADO, ESTADO_FORM_RESERVADO)
			
			'Seteo el campo "ReservadoPor" con el usuario
			Call doc.ReplaceItemValue(CAMPO_FORMULARIO_RESERVADOPOR, usuario.NombreUsuario)
			'Seteo el formulario como Reservado			
			If doc.Hasitem("Autor") Then
				doc.Removeitem("Autor")
			End If
			Set nNotes = New NotesName(usuario.NombreUsuario)
			Set ni = New NotesItem(doc,"Autor",nNotes.Canonical,AUTHORS)
			
		End if
		
		' Seteo los campos a firmar de la seccion 1
		Call doc.ReplaceItemValue(CAMPO_FORMULARIO_CAMPOS_A_FIRMAR + "1", doc.GetItemValue(CAMPO_FORMULARIO_CAMPOS_A_FIRMAR))
		
		'Seteo los lectores permanentes
		Call vLectoresPermanentes.insertElement(FRM_ROL_DESARROLLO, vLectoresPermanentes.CantElem + 1)
		Call vLectoresPermanentes.insertElement(FRM_ROL_VER_TODOS, vLectoresPermanentes.CantElem + 1)
		Set itemLectPerm = New NotesItem(doc, CAMPO_FORMULARIO_LECTORESPERMANENTES, vLectoresPermanentes.Values, READERS)
		
		'Seteo el campo lectores con la unidad creadora
		Call agregarUnidadLectora(doc, doc.GetItemValue(CAMPO_FORMULARIO_UNIDADACTUAL)(0))
		
		' Obtengo los nombres de los archivos adjuntos del documento
		Set vNombresArchivos = New Vector(0)
		vNombresArchivos.values = Evaluate({@AttachmentNames}, doc)
		
		' Elimino los nombres de archivos adjuntos que ya estuvieran en el documento
		For i = 1 To 1
			If doc.HasItem(CAMPO_FORMULARIO_ARCHIVOS_ADJUNTOS & Cstr(i)) Then
				Set vNombresArchivosTemp = New Vector(0)
				vNombresArchivosTemp.Values = doc.GetItemValue(CAMPO_FORMULARIO_ARCHIVOS_ADJUNTOS & Cstr(i))
				For j = 1 To vNombresArchivosTemp.CantElem
					nombreArchivo = Cstr(vNombresArchivosTemp.getElement(j))
					If vNombresArchivos.IsMember(nombreArchivo, pos, True) Then
						' Tengo que borrar el nombre de un archivo de una sección anterior
						vNombresArchivos.DeleteElement(pos)
					End If
				Next
			End If
		Next
		
		' Reemplazo el campo CAMPO_FORMULARIO_ARCHIVOS_ADJUNTOS con los nombres de los archivos adjuntos de la sección
		Call doc.ReplaceItemValue(CAMPO_FORMULARIO_ARCHIVOS_ADJUNTOS & Cstr(1), vNombresArchivos.Values)
		
		
		'Salvo el formulario
		Call doc.Save(True, False)
		' Actualizo el indice para desplegar el formulario en las bandejas
		Call actualizarIndice(numero, dbFormularios)
		'Audito la Accion
		Me.Auditoria.numeroDoc = numero
		Me.Auditoria.paramOperacion = doc.Universalid
		Me.Auditoria.operacion = "acc_guardar_nuevo_form"
		Call Auditoria.registrar
		Crear = ""
		Exit Function
HANDLER:
		Msgbox "ClaseFormulario - Crear: " & Error$ & " " & Erl
		Crear = Error$
		Call RegistrarYGenerarError2(Err, Error, NOMBRE_APLICACION, "Clase Formulario - Método new", "", nombreUsuario)	
		
		Exit Function
	End Function
	
	
'******************************************************************************************************************
	Public Function GuardarFormEnvio As String
		On Error GoTo HANDLER
		Dim seccion As Integer
		Dim vNombresArchivos As Vector
		Dim vNombresArchivosTemp As Vector
		Dim vNombresArchivosSeccion As Vector
		Dim nombreArchivo As String
		Dim pos As Long
		Dim i As Integer
		Dim j As Integer
		
		'VALIDACIONES
		'************************************************
		Call checkGuardarFormEnvio()
		'************************************************
		
		'Obtengo el número de sección actual
		If doc.HasItem(CAMPO_FORMULARIO_SECCION) Then
			seccion = doc.GetItemValue(CAMPO_FORMULARIO_SECCION)(0)
		Else 
			seccion = 1
		End If
		' Seteo los campos a firmar de la seccion actual
		Call doc.ReplaceItemValue(CAMPO_FORMULARIO_CAMPOS_A_FIRMAR + CStr(seccion), doc.GetItemValue(CAMPO_FORMULARIO_CAMPOS_A_FIRMAR))
		
		' Obtengo los nombres de los archivos adjuntos del documento
		Set vNombresArchivos = New Vector(0)
		vNombresArchivos.values = Evaluate({@AttachmentNames}, doc)
		' Elimino los nombres de archivos adjuntos que ya estuvieran en el documento
		For i = 1 To seccion - 1
			If doc.HasItem(CAMPO_FORMULARIO_ARCHIVOS_ADJUNTOS & CStr(i)) Then
				Set vNombresArchivosTemp = New Vector(0)
				vNombresArchivosTemp.Values = doc.GetItemValue(CAMPO_FORMULARIO_ARCHIVOS_ADJUNTOS & CStr(i))
				For j = 1 To vNombresArchivosTemp.CantElem
					nombreArchivo = CStr(vNombresArchivosTemp.getElement(j))
					If vNombresArchivos.IsMember(nombreArchivo, pos, True) Then
						' Tengo que borrar el nombre de un archivo de una sección anterior
						vNombresArchivos.DeleteElement(pos)
					End If
				Next
			End If
		Next
		
		' Reemplazo el campo CAMPO_FORMULARIO_ARCHIVOS_ADJUNTOS con los nombres de los archivos adjuntos de la sección
		Call doc.ReplaceItemValue(CAMPO_FORMULARIO_ARCHIVOS_ADJUNTOS & CStr(seccion), vNombresArchivos.Values)
		
		Call doc.Save(True, False)
		
		GuardarFormEnvio = ""
		Exit Function
HANDLER:
		MsgBox "ClaseFormulario - GuardarFormEnvio: " & Error$ & " " & Erl
		GuardarFormIngreso = Error$
		Exit Function
	End Function
	
	
	'******************************************************************************************************************
	
	
	Public Function Enviar(codigoFormulario As Integer, unidadAEnviar As String) As String
		On Error Goto HANDLER
		Dim nroUnidad As String
		Dim formato As String
		Dim numero As String
		Dim formato_form As String
		Dim secuencia As Long
		Dim vLectoresPermanentes As New Vector(0)
		Dim vReceptoresDestinatarios As New Vector(0)
		Dim visibilidadForm As String
		Dim unidadDestino As String
		Dim uDestino As UnidadFormClass
		Dim link As String
		
		formato_form = FORMATO_FORM_CODIGO
		
		'VALIDACIONES
		'************************************************
		If Isnull(codigoFormulario) Then
			Error ERROR_COD_FORM_NOTHING, MSG_ERROR_COD_FORM_NOTHING	
		End If
		
		'Cargo la definición del formulario según el código
		Set docDefFormulario = vistaDefFormCodigo.GetDocumentByKey(Cstr(codigoFormulario), True)
		'Obtengo el código de la unidad
		nroUnidad = doc.GetItemValue(CAMPO_FORMULARIO_UNIDADACTUAL)(0)		
		
		Call checkEnviar(nroUnidad)
		'************************************************
		
		'NUMERACIÓN
		'**********************************************************************************************
		'Obtengo el formato de la numeración del formulario, a partir de la definición del formulario
		formato = docDefFormulario.GetItemValue(CAMPO_FORMULARIO_FORMATONUMERACION)(0)
		formato_form = conf.SustituirAnio(formato_form)
		formato_form = conf.SustituirCodigoFormulario(formato_form, codigoFormulario)
		
		'Obtengo el número para sustituir los la secuencia de numerales
		secuencia = conf.PedirNumero(formato_form)
		
		largoSec = Len(Cstr(secuencia))
		
		'Sustituyo la secuencia
		numero = conf.SustituirNumeroSecuencia(formato, secuencia)
		'Sustituyo el indicador de año por el año actual
		numero = conf.SustituirAnio(numero)
		'Sustituir el codigo de formulario
		numero = conf.SustituirCodigoFormulario(numero, codigoFormulario)
		'Sustituir el codigo de la unidad
		numero = conf.SustituirCodigoUnidad(numero, nroUnidad)
		
		'Seteo la numeración del formulario en el documento del formulario
		Call doc.ReplaceItemValue(CAMPO_FORMULARIO_NUMERO, numero)
		'**********************************************************************************************
		
		If usuario.NombreUsuario <> "Anonymous" Then
			'Seteo el usuario de inicio 
			Call doc.ReplaceItemValue(CAMPO_FORMULARIO_USUARIOINICIO, usuario.NombreUsuario)	
			'Seteo la unidad de inicio
			Call doc.ReplaceItemValue(CAMPO_FORMULARIO_UNIDADINICIO, nroUnidad)
		End If
		
		If docDefFormulario.HasItem(CAMPO_DEFFORMULARIO_XML) And docDefFormulario.GetItemValue(CAMPO_DEFFORMULARIO_XML)(0) <> "" Then
			'Relativo a MxGraph:			
			Set infoNodo = Me.obtenerUnidadInicial()
			Call doc.ReplaceItemValue(CAMPO_FORMULARIO_ID_ELEMENTO_INICIO, infoNodo.GetIdElemento())
			Call doc.ReplaceItemValue(CAMPO_FORMULARIO_UNIDADANTERIOR, nroUnidad)
			
			Call agregarValor(doc, CAMPO_FORMULARIO_RECORRIDO_IDS, infoNodo.GetIdElemento())
			Call agregarValor(doc, CAMPO_FORMULARIO_RECORRIDO_UNIDADES, nroUnidad)
			Call agregarValor(doc, CAMPO_FORMULARIO_USUARIORECORRIDO, usuario.NombreUsuario)
			
			Set infoNodo = obtenerSiguiente(infoNodo.GetIdElemento())
			' - Le seteo el id del nodo que le corresponde a la unidad en el diagrama de workflow
			Call doc.ReplaceItemValue(CAMPO_FORMULARIO_ID_ELEMENTO, infoNodo.GetIdElemento())
			Call doc.ReplaceItemValue(CAMPO_FORMULARIO_PROXIMA_SECCION, infoNodo.GetSeccion())
			
			unidadDestino = infoNodo.GetUnidad()
			If unidadDestino = MXGRAPH_ID_UNIDAD_SUPERIOR Then
				unidadDestino = Me.obtenerUnidadSuperior(doc.GetItemValue(CAMPO_FORMULARIO_UNIDADINICIO)(0))
			Elseif unidadDestino = MXGRAPH_ID_UNIDAD_INICIAL Then
				unidadDestino = doc.GetItemValue(CAMPO_FORMULARIO_UNIDADINICIO)(0)
			Elseif unidadDestino = MXGRAPH_ID_UNIDAD_CUALQUIERA Then
				If unidadAEnviar <> "" Then
					unidadDestino = unidadAEnviar
				Else
					Error 10001, "No se especificó la unidad destino del pase"
				End If
			End If
			
			If unidadAEnviar = "" Then
				Call doc.ReplaceItemValue(CAMPO_FORMULARIO_UNIDADACTUAL, unidadDestino)
				Call agregarValor(doc, CAMPO_FORMULARIO_RECORRIDO_UNIDADES, unidadDestino)
			Else
				Call doc.ReplaceItemValue(CAMPO_FORMULARIO_UNIDADACTUAL, unidadAEnviar)
				Call agregarValor(doc, CAMPO_FORMULARIO_RECORRIDO_UNIDADES, unidadAEnviar)
			End If
		Else
			
		End If
		
		'Agrego la nueva fecha de envío		
		Call agregarValor(doc, CAMPO_FORMULARIO_FECHASENVIO, Now)
		'Seteo la fecha de creación
		Call doc.ReplaceItemValue(CAMPO_FORMULARIO_FECHACREACION, Now)
		'Seteo la sección
		Call doc.ReplaceItemValue(CAMPO_FORMULARIO_SECCION, 1)
		Call agregarValor(doc, CAMPO_FORMULARIO_RECORRIDO_SECCIONES, 1)
		'Cambio el estado del formulario a "En tránsito"
		Call doc.ReplaceItemValue(CAMPO_FORMULARIO_ESTADO, ESTADO_FORM_ENTRANSITO)
		
		'Seteo los lectores permanentes
		Call vLectoresPermanentes.insertElement(FRM_ROL_DESARROLLO, vLectoresPermanentes.CantElem + 1)
		Call vLectoresPermanentes.insertElement(FRM_ROL_VER_TODOS, vLectoresPermanentes.CantElem + 1)
		Set itemLectPerm = New NotesItem(doc, CAMPO_FORMULARIO_LECTORESPERMANENTES, vLectoresPermanentes.Values, READERS)
		
		'Seteo el campo lectores con la unidad creadora y la unidad de destino
		Call agregarUnidadLectora(doc, doc.GetItemValue(CAMPO_FORMULARIO_UNIDADINICIO)(0))
		Call agregarUnidadLectora(doc, doc.GetItemValue(CAMPO_FORMULARIO_UNIDADACTUAL)(0))
		
		' Seteo los campos a firmar de la seccion 1
		Call doc.ReplaceItemValue(CAMPO_FORMULARIO_CAMPOS_A_FIRMAR + "1", doc.GetItemValue(CAMPO_FORMULARIO_CAMPOS_A_FIRMAR))
		
		' Obtengo los nombres de los archivos adjuntos del documento
		Set vNombresArchivos = New Vector(0)
		vNombresArchivos.values = Evaluate({@AttachmentNames}, doc)
		' Elimino los nombres de archivos adjuntos que ya estuvieran en el documento
		For i = 1 To seccion - 1
			If doc.HasItem(CAMPO_FORMULARIO_ARCHIVOS_ADJUNTOS & CStr(i)) Then
				Set vNombresArchivosTemp = New Vector(0)
				vNombresArchivosTemp.Values = doc.GetItemValue(CAMPO_FORMULARIO_ARCHIVOS_ADJUNTOS & CStr(i))
				For j = 1 To vNombresArchivosTemp.CantElem
					nombreArchivo = CStr(vNombresArchivosTemp.getElement(j))
					If vNombresArchivos.IsMember(nombreArchivo, pos, True) Then
						' Tengo que borrar el nombre de un archivo de una sección anterior
						vNombresArchivos.DeleteElement(pos)
					End If
				Next
			End If
		Next
		' Reemplazo el campo CAMPO_FORMULARIO_ARCHIVOS_ADJUNTOS con los nombres de los archivos adjuntos de la sección
		Call doc.ReplaceItemValue(CAMPO_FORMULARIO_ARCHIVOS_ADJUNTOS & "1" , vNombresArchivos.Values)
		
		'Salvo el formulario
		Call doc.Save(True, False)
		
		'Envio un mail a los miembros con rol receptor de la unidad de destino
		If conf.NotificacionEnviar Then
			Set uDestino = New UnidadFormClass(doc.GetItemValue(CAMPO_FORMULARIO_UNIDADACTUAL)(0))
			Set vReceptoresDestinatarios = uDestino.RolesForm(doc.GetItemValue(CAMPO_FORMULARIO_CODIGOFORM)(0), ROL_RECEPTOR)
			link = igDocConf.Protocolo + "://" + conf.Hosts.getElement(1) + ":" + igDocConf.Puerto + "/" + Replace(doc.Parentdatabase.Filepath, {\}, "/") + "/AbrirForm?OpenAgent&id=" + doc.UniversalID + "&numero=" + doc.GetItemValue(CAMPO_FORMULARIO_NUMERO)(0) + "&codigo=" + doc.GetItemValue(CAMPO_FORMULARIO_CODIGOFORM)(0)
			Call enviarMail(vReceptoresDestinatarios, "Notificación de Formulario Enviado", link, "Enviar")
		End If
		
		' Actualizo el indice para desplegar el formulario en las bandejas
		Call actualizarIndice(numero,dbFormularios)
		
		Enviar = ""
		Me.Auditoria.numeroDoc = doc.Getitemvalue("numero")(0)
		Me.Auditoria.operacion = "acc_enviar_form"
		Call Auditoria.registrar
		Exit Function
HANDLER:
		Call RegistrarYGenerarError2(Err, Error, NOMBRE_APLICACION, "Clase Formulario - Método Enviar", "",nombreUsuario)
		Msgbox "ClaseFormulario - Enviar: " & Error$ & " " & Erl
		Enviar = Error$
		Exit Function
	End Function
	
	
'******************************************************************************************************************
	
	
	Public Function Reenviar(unidadDestino As String, razon As String) As String
		On Error Goto HANDLER
		
		Dim vUnidadesPrevias As New Vector(0)
		Dim vReceptoresDestinatarios As New Vector(0)
		Dim uDestino As UnidadFormClass
		Dim link As String
		
		' VALIDACIONES
		'************************************************
		Call checkReenviar(unidadDestino)
		'************************************************
		
		' Cambio el estado del formulario a "En tránsito"
		Call doc.ReplaceItemValue(CAMPO_FORMULARIO_ESTADO, ESTADO_FORM_ENTRANSITO)
		
		' Seteo la unidad destino como unidad actual
		Call doc.ReplaceItemValue(CAMPO_FORMULARIO_UNIDADANTERIOR, doc.GetItemValue(CAMPO_FORMULARIO_UNIDADACTUAL)(0))
		Call doc.ReplaceItemValue(CAMPO_FORMULARIO_UNIDADACTUAL, unidadDestino)
		
		Call quitarUltimoValor(doc, CAMPO_FORMULARIO_RECORRIDO_UNIDADES)
		Call quitarUltimoValor(doc, CAMPO_FORMULARIO_USUARIORECORRIDO)
		Call agregarValor(doc, CAMPO_FORMULARIO_RECORRIDO_UNIDADES, unidadDestino)
		Call agregarValor(doc, CAMPO_FORMULARIO_USUARIORECORRIDO, usuario.NombreUsuario)
		
		' Agrego al campo lectores la unidad destino
		Call agregarUnidadLectora(doc, unidadDestino)
		
		' Seteo en Si el campo Reenviado
		Call doc.ReplaceItemValue(CAMPO_FORMULARIO_REENVIADO, "Si")
		
		' Cambio la última unidad de UnidadesPrevias (lectores) por la unidad de destino
		vUnidadesPrevias.values = doc.GetItemValue(CAMPO_FORMULARIO_UNIDADESPREVIAS)
		Call vUnidadesPrevias.replaceElement(vUnidadesPrevias.cantElem, "FORM_" & unidadDestino _
		& "_" & doc.GetItemValue(CAMPO_FORMULARIO_CODIGOFORM)(0))
		
		Call doc.ReplaceItemValue(CAMPO_FORMULARIO_UNIDADESPREVIAS, vUnidadesPrevias.values)
		
		' Quito la última fecha de recepción
		Call quitarUltimoValor(doc, CAMPO_FORMULARIO_FECHASRECEPCION)
		' Quito el último usuario de recepción
		Call quitarUltimoValor(doc, CAMPO_FORMULARIO_USUARIORECEPTOR)
		
		' Seteo el campo RazonDevolver
		Call doc.ReplaceItemValue(CAMPO_FORMULARIO_RAZONDEVOLVER, razon)
		
		Call doc.Save(True, False)
		
		' Actualizo el indice para desplegar el formulario en las bandejas
		Call actualizarIndice(doc.GetItemValue(CAMPO_FORMULARIO_NUMERO)(0),dbFormularios)
		
		' Envio un mail a los miembros con rol receptor de la unidad de destino
		If conf.NotificacionReenviar Then
			Set uDestino = New UnidadFormClass(unidadDestino)
			Set vReceptoresDestinatarios = uDestino.RolesForm(doc.GetItemValue(CAMPO_FORMULARIO_CODIGOFORM)(0), ROL_RECEPTOR)
			link = igDocConf.Protocolo + "://" + conf.Hosts.getElement(1) + ":" + igDocConf.Puerto + "/" + Replace(doc.Parentdatabase.Filepath, {\}, "/") + "/AbrirForm?OpenAgent&id=" + doc.UniversalID + "&numero=" + doc.GetItemValue(CAMPO_FORMULARIO_NUMERO)(0) + "&codigo=" + doc.GetItemValue(CAMPO_FORMULARIO_CODIGOFORM)(0)
			Call enviarMail(vReceptoresDestinatarios, "Notificación de Sección Reenviada", link, "Reenviar")
		End If
		Reenviar = ""
		Me.Auditoria.numeroDoc = doc.Getitemvalue("numero")(0)
		Me.Auditoria.operacion = "acc_reenviar_form"
		Call Auditoria.registrar
		Exit Function
HANDLER:
		Call RegistrarYGenerarError2(Err, Error, NOMBRE_APLICACION, "Clase Formulario - Método Reenviar", "",nombreUsuario)
		Msgbox "ClaseFormulario - Reenviar: " & Error$ & " " & Erl
		Reenviar = Error$
		Exit Function
	End Function
	
	
'******************************************************************************************************************	
	
	
	Public Function ReenviarUnidadSuperior(razon As String) As String
		On Error Goto HANDLER
		
		Dim unidadDestino As String	
		unidadDestino = obtenerUnidadSuperior(doc.GetItemValue(CAMPO_FORMULARIO_UNIDADACTUAL)(0))		
		ReenviarUnidadSuperior = Me.Reenviar(unidadDestino, razon)
		Me.Auditoria.numeroDoc = doc.Getitemvalue("numero")(0)
		Me.Auditoria.operacion = "acc_reenviar_superior_form"
		Call Auditoria.registrar
		Exit Function
HANDLER:
		Msgbox "ClaseFormulario - ReenviarUnidadSuperior: " & Error$ & " " & Erl
		ReenviarUnidadSuperior = Error$
		Exit Function
	End Function
	'******************************************************************************************************************
	
	Private Sub MarcarDocumentoCancelado(vPedidosAQuitar As Vector, vUnidades As Vector) 
		Dim dbWS As NotesDatabase
		Dim docWS As NotesDocument
		Dim agenteCancelar As NotesAgent
		
		Set dbWS=Conf.ReferenciarBaseDeDatos(CLAVE_DBWS)
		Set docWS=dbWS.Createdocument()
		
		'Creo el documento en la base de Webservice para ejecutar el agente 'CancelarInformeFormulario'
		Call docWS.Replaceitemvalue("Form", "PedidoInforme_form")
		Call docWS.Replaceitemvalue("usuario", usuario.NombreUsuario)
		Call docWS.Replaceitemvalue("nrosDocs", vPedidosAQuitar.Values)
		Call docWS.Replaceitemvalue("unisDocs", vUnidades.Values)
		Call docWS.Replaceitemvalue("tiposDocs", docDefFormulario.Getitemvalue("sTipoDocumentoInformes")(0))		
		Call docWs.Save(True, False)
		
		'Invoco al agente para que marque el documento como cancelado para que no intente actualizar el estado cuando se publique		
		Set agenteCancelar=dbWS.Getagent("CancelarInformeFormulario")
		agenteCancelar.Run(docWs.Noteid)
	End Sub
	'******************************************************************************************************************
	Public Function QuitarPedidoInforme(pedidosAQuitar As String) As String
		On Error GoTo HANDLER
		
		Dim vUnidades As New Vector(0)
		Dim vNroPedidoInforme As New Vector(0)
		Dim vEstadosPedidoInforme As New Vector(0)
		Dim vPedidosAQuitar As New Vector(0)
		Dim vFechasPedidoInforme_ini As New Vector(0)
		Dim vFechasPedidoInforme_pub As New Vector(0)
		Dim vMotivos As New Vector(0)
		Dim nroSeccion As String														
		Dim valoresAux As Variant
		
		nroSeccion=doc.Getitemvalue("Seccion")(0)
		Call mySplit(pedidosAQuitar, "%_", valoresAux)
		vPedidosAQuitar.values=valoresAux
		
		vMotivos.values=doc.Getitemvalue("sMotivosInforme"& nroSeccion)
		vUnidades.values=doc.Getitemvalue("sOficinasInforme"& nroSeccion)
		
		vNroPedidoInforme.values=doc.Getitemvalue("sPedidosInforme"& nroSeccion)
		vEstadosPedidoInforme.values=doc.Getitemvalue("sEstadosPedidosInforme"& nroSeccion)
		vFechasPedidoInforme_ini.values=doc.Getitemvalue("sFechasPedidosInforme_Ini"& nroSeccion)
		vFechasPedidoInforme_pub.values=doc.Getitemvalue("sFechasPedidosInforme_Pub"& nroSeccion)
		
		'**************************************************************************************
		'Marco los documentos de la base Documentos como cancelados
		Call MarcarDocumentoCancelado(vPedidosAQuitar, vUnidades)
		'**************************************************************************************
		
		Dim pedidoAQuitar As String
		Dim indice As Integer
		Dim i As Integer
		
		For i=1 To vPedidosAQuitar.cantElem 
			pedidoAQuitar=vPedidosAQuitar.getElement(i)			
			
			'Obtengo la posición del pedido que voy a quitar
			indice=vNroPedidoInforme.GetIndex(pedidoAQuitar).First
			vNroPedidoInforme.deleteElement(indice)
			vUnidades.deleteElement(indice)
			vMotivos.deleteElement(indice)
			vEstadosPedidoInforme.deleteElement(indice)
			vFechasPedidoInforme_ini.deleteElement(indice)
			vFechasPedidoInforme_pub.deleteElement(indice)		
		Next
		
		Call doc.Replaceitemvalue("sOficinasInforme"& nroSeccion, vUnidades.Values)
		Call doc.Replaceitemvalue("sPedidosInforme"& nroSeccion, vNroPedidoInforme.Values)
		Call doc.Replaceitemvalue("sMotivosInforme"& nroSeccion, vMotivos.Values)
		Call doc.Replaceitemvalue("sEstadosPedidosInforme"& nroSeccion, vEstadosPedidoInforme.Values)		
		Call doc.Replaceitemvalue("sFechasPedidosInforme_Ini"& nroSeccion, vFechasPedidoInforme_ini.Values)
		Call doc.Replaceitemvalue("sFechasPedidosInforme_Pub"& nroSeccion, vFechasPedidoInforme_pub.Values)
		
		'Guardo los cambios
		Call doc.Save(True, False)		
		QuitarPedidoInforme=""
		Exit Function
HANDLER:
		MsgBox "ClaseFormulario - QuitarPedidoInforme: " & Error$ & " " & Erl
		QuitarPedidoInforme = Error$
		Exit Function
		
	End Function
	
	'******************************************************************************************************************
	Public Function AgregarPedidoInforme(unidadesAAgregarPedido  As String, motivosPedido As String, tiposPedido As String) As String
		On Error GoTo HANDLER		
		Dim dbWS As NotesDatabase
		Dim docWS As NotesDocument		
		Dim vUnidades As New Vector(0)	
		Dim vMotivos As New Vector(0)	
		Dim vTipos As New Vector(0)	
		Dim vEstadosPedidoInforme As New Vector(0)			
		Dim vCampos As New Vector(0)				
		Dim nroSeccion As String		
		
		Dim wsGenerarDoc As Wscreardocumento
		Dim datosEntrada As Datosentrada
		Dim datosSalida As Datossalida		
		Dim wsPedidoInf As WSPedidoinforme		
		
		Set wsGenerarDoc = New Wscreardocumento
		Set datosEntrada = New Datosentrada				
		
		'Obtengo los nombres de los campos del formulario que se copiarán al documento docWS
		vCampos.values= docDefFormulario.Getitemvalue("sCamposInformes")						
		
		vUnidades.values=Split(unidadesAAgregarPedido, "%_")
		
		vMotivos.values=Split(motivosPedido, "%_")
		
		vTipos.values=Split(tiposPedido, "%_")
		
		Set dbWS=Conf.ReferenciarBaseDeDatos(CLAVE_DBWS)				
		
		If dbWS Is Nothing Then
			
			Error ERROR_REFERENCIA_BASE_WS, MSG_ERROR_REFERENCIA_BASE_WS
		End If		
		nroSeccion=doc.GetItemValue(CAMPO_FORMULARIO_SECCION)(0)
		
		ReDim datosEntrada.Pedidosinforme(vUnidades.cantElem)
		
		Dim nombreItem As String
		Dim i As Integer
		Dim j As Integer
		For i=1 To vUnidades.cantElem
			Set wsPedidoInf = New WSPedidoinforme
			
			Set docWS= dbWS.Createdocument() 																						
			Call docWS.Replaceitemvalue("Form", "PedidoInforme_form")			
			'Copio los campos del formulario que estén configurados, al documento que se genera en la base de WS
			
			Dim vCamposAux As New Vector(0)
			For j=1 To vCampos.cantElem
				nombreItem=vCampos.getElement(j)
				If(doc.Hasitem(nombreItem)) Then
					Call vCamposAux.insertElement(vCampos.getElement(j), vCamposAux.cantElem+1)
				End If
			Next
			
			ReDim Preserve wsPedidoInf.Campos(vCamposAux.cantElem)
			For j=1 To vCamposAux.cantElem				
				nombreItem=vCamposAux.getElement(j)														
				Call doc.Getfirstitem(nombreItem).Copyitemtodocument(docWS, nombreItem)										
				wsPedidoInf.Campos(j-1)=nombreItem				
			Next
			
			Call agregarValor(docWS, "MotivoPedidoInforme", vMotivos.getElement(i))
			Call docWS.Save(True, False)			
			'Cargo los datos del pedido
			wsPedidoInf.docwsunid=docWs.Universalid
			wsPedidoInf.Unidad=vUnidades.getElement(i)
			wsPedidoInf.Tipodoc=vTipos.getElement(i)
			
			'Cargo el pedido en el objeto de entrada del ws
			Set datosEntrada.Pedidosinforme(i)=wsPedidoInf											
			
			Call vEstadosPedidoInforme.insertElement("Pendiente", vEstadosPedidoInforme.cantElem+1)
			
			Set docWs= Nothing
		Next  	
		
		datosEntrada.Nroform=doc.Getitemvalue("Numero")(0)
		datosEntrada.Nroseccion=doc.Getitemvalue("Seccion")(0)						
		datosEntrada.Unidadcreadora="FORM_" & doc.GetItemValue(CAMPO_FORMULARIO_UNIDADACTUAL)(0) & "_" & doc.GetItemValue(CAMPO_FORMULARIO_CODIGOFORM)(0)
		datosEntrada.Pathbase = me.dbFormularios.Filepath
		
		
		'*********************************************************************
		
		'Consumo el web service WSCrearDocFromForm de la base de documentos				
		Set datosSalida= wsGenerarDoc.Creardocumentos(datosEntrada)				
		
		
		If Not datosSalida.Codrespuesta =0 Then
			Error datosSalida.Codrespuesta, datosSalida.Respuesta
		End If
		
		For i=1 To UBound(datosSalida.Nrospedidos)			
			Call agregarValor(doc, "sPedidosInforme" & nroSeccion, datosSalida.Nrospedidos(i))
			Call agregarValor(doc, "sOficinasInforme" & nroSeccion, vUnidades.getElement(i))
			Call agregarValor(doc, "sMotivosInforme" & nroSeccion, vMotivos.getElement(i))
			Call agregarValor(doc, "sEstadosPedidosInforme" & nroSeccion, vEstadosPedidoInforme.getElement(i))
			Call agregarValor(doc, "sFechasPedidosInforme_Ini" & nroSeccion, CStr(Now))
			Call agregarValor(doc, "sFechasPedidosInforme_Pub" & nroSeccion, "-")
			Call agregarValor(doc, "sNombresPdfSeccion" & nroSeccion, "-")
			Call agregarValor(doc, "sPathsBasePedidosInforme" & nroSeccion, datosSalida.Pathbase)
		Next						
		'doc.Getitemvalue("sNombresPdfSeccion"& nroSeccion)
		'Guardo los cambios
		Call doc.Save(True, False)
		
		' Actualizo el indice para desplegar el formulario en las bandejas
		Call actualizarIndice(doc.GetItemValue(CAMPO_FORMULARIO_NUMERO)(0),dbFormularios)
		
		
		AgregarPedidoInforme=""
		Exit Function
HANDLER:
		Call RegistrarYGenerarError2(Err, Error, NOMBRE_APLICACION, "Clase Formulario - Método AgregarPedidoInforme", "",nombreUsuario)
		MsgBox "ClaseFormulario - AgregarPedidoInforme: " & Error$ & " " & Erl
		AgregarPedidoInforme = Error$
		Exit Function
	End Function
	
	'******************************************************************************************************************

	Public Function ActualizarPedidoInforme(nroSeccion As String, nroInforme As String, fechaPublicacion As String, unidDocSolicitud As String)		
		On Error GoTo HANDLER			
		Dim vNroPedidoInforme As New Vector(0)
		Dim vEstadosPedidoInforme As New Vector(0)			
		Dim vFechasPedidosPub As New Vector(0)
		
		vNroPedidoInforme.values=doc.Getitemvalue("sPedidosInforme" & nroSeccion)
		
		Dim indice As Integer						
		'Obtengo la posición del pedido que voy a actualizar
		indice=vNroPedidoInforme.GetIndex(nroInforme).First		
		
		Dim vNombrePdfs As New Vector(0)
		Dim sesion As New NotesSession				
		Dim docSolicitud As NotesDocument					
		
		Set docSolicitud = sesion.Currentdatabase.Getdocumentbyunid(unidDocSolicitud)
		
		vNombrePdfs.values= doc.Getitemvalue("sNombresPdfSeccion"& nroSeccion)
		
		Dim nombrePDF As String
		nombrePDF = docSolicitud.Getitemvalue("NombreArchivoPdf")(0)
		
		vNombrePdfs.deleteElement(indice)
		
		
		Call vNombrePdfs.insertElement(nombrePDF, indice)
		
		'Call doc.Copyitem(docSolicitud.Getfirstitem("ArchivoPdf"), "pdfInforme_Seccion" & nroSeccion &"_"& CStr(vNombrePdfs.cantElem))
		
		Dim rti As NotesRichTextItem		
		
		If doc.Hasitem("pdfInforme") Then		
			Set rti = doc.Getfirstitem("pdfInforme")
		Else		
			Set rti = New NotesRichTextItem(doc, "pdfInforme")
		End If
		
		
		Call rti.Appendrtitem(docSolicitud.Getfirstitem("ArchivoPdf"))
		
		Call doc.Replaceitemvalue("sNombresPdfSeccion"& nroSeccion, vNombrePdfs.values)
		
		vEstadosPedidoInforme.values=doc.Getitemvalue("sEstadosPedidosInforme" & nroSeccion)
		vFechasPedidosPub.values=doc.Getitemvalue("sFechasPedidosInforme_Pub" & nroSeccion)				
		
		vEstadosPedidoInforme.deleteElement(indice)
		vFechasPedidosPub.deleteElement(indice)
		
		Call vEstadosPedidoInforme.insertElement("Finalizado", indice)	
		Call vFechasPedidosPub.insertElement(fechaPublicacion, indice)						
		
		Call doc.Replaceitemvalue("sEstadosPedidosInforme" & nroSeccion, vEstadosPedidoInforme.Values)		
		Call doc.Replaceitemvalue("sFechasPedidosInforme_Pub" & nroSeccion, vFechasPedidosPub.Values)		
		'Guardo los cambios
		Call doc.Save(True, False)
		ActualizarPedidoInforme=""
		Exit Function
HANDLER:
		Call RegistrarYGenerarError2(Err, Error, NOMBRE_APLICACION, "Clase Formulario - Método ActualizarPedidoInforme", "",nombreUsuario)
		MsgBox "ClaseFormulario - ActualizarPedidoInforme: " & Error$ & " " & Erl
		ActualizarPedidoInforme = Error$
		Exit Function
	End Function
	
	'******************************************************************************************************************
	
'******************************************************************************************************************
	
	Public Function Desfinalizar As String
		On Error GoTo HANDLER
		
		'VALIDACIONES
		'**************************************************
		Call checkDesfinalizar()
		'**************************************************
		
		'Seteo el estado a "En unidad"
		Call doc.ReplaceItemValue(CAMPO_FORMULARIO_ESTADO, ESTADO_FORM_ENUNIDAD)		
		
		'Elimino el campo fFinalizacion
		Call doc.RemoveItem("fFinalizacion")
		
		'Elimino el campo de usuario que finalizo
		Call doc.RemoveItem("sUsuarioFin")
		
		'Elimino el campo de motivo de finalizacion
		Call doc.RemoveItem("sRazonFinalizar")
		
		Call quitarUltimoValor(doc, CAMPO_FORMULARIO_RECORRIDO_IDS)
		
		If doc.Hasitem("Autor") Then
			doc.Removeitem("Autor")
		End If
		
		'Guardo los cambios
		Call doc.Save(True, False)		
		' Actualizo el indice para desplegar el formulario en las bandejas
		Call actualizarIndice(doc.GetItemValue(CAMPO_FORMULARIO_NUMERO)(0), dbFormularios)	
		
		Desfinalizar = ""
		Me.Auditoria.numeroDoc = doc.Getitemvalue("numero")(0)
		Me.Auditoria.operacion = "acc_desfinalizar_form"
		Call Auditoria.registrar
		Exit Function
HANDLER:
		Call RegistrarYGenerarError2(Err, Error, NOMBRE_APLICACION, "Clase Formulario - Método Desfinalizar", "",nombreUsuario)
		MsgBox "ClaseFormulario - Desfinalizar: " & Error$ & " " & Erl
		Desfinalizar = Error$
		Exit Function
	End Function
'******************************************************************************************************************
	
	
	Public Function Devolver(razonDevolver As String) As String
		
		On Error Goto HANDLER
	
		Dim codigoFormulario As String
		Dim unidadAnterior As UnidadFormClass
		Dim recorrido As New Vector(0)
		Dim viewTodosPorNumeroSeccion As NotesView
		Dim numeroYseccion As String
		Dim docFormularioPrevioAccion As NotesDocument
		Set unidadAnterior= New UnidadFormClass(doc.GetItemValue(CAMPO_FORMULARIO_UNIDADANTERIOR)(0))
		codigoFormulario = doc.GetItemValue(CAMPO_FORMULARIO_CODIGOFORM)(0)
		Set infoNodo = Me.obtenerAnterior(doc.GetItemValue(CAMPO_FORMULARIO_ID_ELEMENTO)(0))
		idElementoPase = infoNodo.getIdElemento()
		'***********************************************a**********************************************
		'********************************** Procesamiento con ACCIONES *******************************
		'*********************************************************************************************
		If (infoNodo.getIdAccion() <> -1) Then
			' Si el código de la acción es de tipo 1 tengo que correr un agente que seleccione la proxima unidad
			' creo el documento previo a la accion y lo guardo en la base de formulariosAcciones
			Set viewTodosPorNumeroSeccion = dbAcciones.Getview(NOMBRE_VISTA_TODOS_POR_NUMERO_Y_SECCION)
			numeroYseccion = doc.getItemValue(CAMPO_FORMULARIO_NUMERO)(0) & "-" & doc.getItemValue(CAMPO_FORMULARIO_SECCION_ANTERIOR)(0)
			Set docFormularioPrevioAccion = viewTodosPorNumeroSeccion.Getdocumentbykey(numeroYseccion, True)
			Call docFormularioPrevioAccion.Copyallitems(doc, True)
			'Agrego la razón de devolución
			Call doc.ReplaceItemValue(CAMPO_FORMULARIO_RAZONDEVOLVER, razonDevolver)
			Call doc.ReplaceItemValue(CAMPO_FORMULARIO_ESTADO, ESTADO_FORM_ENUNIDAD)
			
		Else
			'VALIDACIONES
			'************************************************
			Call checkDevolver()
			'************************************************
			'Quito la última Fecha de Envío
			Call quitarUltimoValor(doc, CAMPO_FORMULARIO_FECHASENVIO)
			'Quito la última unidad de UnidadesPrevias
			Call quitarUltimoValor(doc, CAMPO_FORMULARIO_UNIDADESPREVIAS)
			
			'quito el usuario que dio el ultimo pase y la ultima fecha de pase

			Call quitarUltimoValor(doc, CAMPO_FORMULARIO_USUARIOPASE)
			Call quitarUltimoValor(doc, CAMPO_FORMULARIO_FECHADEPASE)
			
			'Seteo el campo unidad actual con la unidad anterior
			Call doc.ReplaceItemValue(CAMPO_FORMULARIO_UNIDADACTUAL, doc.GetItemValue(CAMPO_FORMULARIO_UNIDADANTERIOR)(0))
			Call doc.ReplaceItemValue(CAMPO_FORMULARIO_SECCION, doc.GetItemValue(CAMPO_FORMULARIO_SECCION_ANTERIOR)(0))
			
			' Seteo como unidad anterior la antepenúltima, o vacío si no existe
			recorrido.Values = doc.GetItemValue(CAMPO_FORMULARIO_RECORRIDO_UNIDADES)
			If recorrido.cantElem > 2 Then
				Call doc.ReplaceItemValue(CAMPO_FORMULARIO_UNIDADANTERIOR, recorrido.GetElement(recorrido.CantElem - 2))
			Else
				Call doc.ReplaceItemValue(CAMPO_FORMULARIO_UNIDADANTERIOR, "")
			End If
			
			' Seteo como seccion anterior la antepenúltima, o 0 si no existe
			recorrido.Values = doc.GetItemValue(CAMPO_FORMULARIO_RECORRIDO_SECCIONES)
			If recorrido.cantElem > 2 Then
				Call doc.ReplaceItemValue(CAMPO_FORMULARIO_SECCION_ANTERIOR, recorrido.GetElement(recorrido.CantElem - 2))
			Else
				Call doc.ReplaceItemValue(CAMPO_FORMULARIO_SECCION_ANTERIOR, 0)
			End If
			
			recorrido.Values = doc.GetItemValue(CAMPO_FORMULARIO_RECORRIDO_IDS)
			Call doc.ReplaceItemValue(CAMPO_FORMULARIO_ID_ELEMENTO, recorrido.GetElement(recorrido.CantElem - 1))
			
			Call quitarUltimoValor(doc, CAMPO_FORMULARIO_RECORRIDO_IDS)
			Call quitarUltimoValor(doc, CAMPO_FORMULARIO_RECORRIDO_UNIDADES)
			Call quitarUltimoValor(doc, CAMPO_FORMULARIO_RECORRIDO_SECCIONES)
			Call quitarUltimoValor(doc, CAMPO_FORMULARIO_USUARIORECORRIDO)
			'Quito la última Fecha de Recepción
			Call quitarUltimoValor(doc, CAMPO_FORMULARIO_FECHASRECEPCION)
			'Quito el último usuario de recepción
			Call quitarUltimoValor(doc, CAMPO_FORMULARIO_USUARIORECEPTOR)
			
			'Agrego la razón de devolución
			Call doc.ReplaceItemValue(CAMPO_FORMULARIO_RAZONDEVOLVER, razonDevolver)
			
			' ********* FALTA BORRAR LOS CAMPOS DE LA SECCION OCULTADA
			
			' ********************
			
			
		End If
		'Guardo los cambios
		Call doc.Save(True, False)
		
		' Actualizo el indice para desplegar el formulario en las bandejas	
		Call actualizarIndice(doc.GetItemValue(CAMPO_FORMULARIO_NUMERO)(0),dbFormularios)
		Devolver = ""
		
		Me.Auditoria.numeroDoc = doc.Getitemvalue("numero")(0)
		Me.Auditoria.operacion = "acc_devolver_form"
		Call Auditoria.registrar
		
		Exit Function
HANDLER:
		Call RegistrarYGenerarError2(Err, Error, NOMBRE_APLICACION, "Clase Formulario - Método Devolver", "",nombreUsuario)
		Msgbox "ClaseFormulario - Devolver: " & Error$ & " " & Erl
		Devolver = Error$
		Exit Function
	End Function
	
	
'******************************************************************************************************************
	%REM
		Function RecibirYEnviar
		Description: Comments for Function
	%END REM
	Public Function RecibirYEditar As String
		On Error GoTo handler
		Call Recibir()
		Call editar()
		
		Exit Function
	handler:
		Call RegistrarYGenerarError2(Err, Error, NOMBRE_APLICACION, "Clase Formulario - Método recibirYEnviar", "",nombreUsuario)
		MsgBox "Clase formulario: RecibirYEnviar: " & Error$ & " - " &erl
		Exit function
 	End Function
	
	Public Function Recibir As String
		On Error Goto HANDLER
		
		Dim unidadAnterior As UnidadFormClass
		Dim link As String
		Dim infoNodo As InfoNodo
		Dim fechaActual As NotesDateTime
		Set fechaActual = New NotesDateTime("")
		'VALIDACIONES
		'************************************************
		Call checkRecibir()
		'************************************************
		
		'Seteo el estado del formulario como:"En Unidad"
		Call doc.ReplaceItemValue(CAMPO_FORMULARIO_ESTADO, ESTADO_FORM_ENUNIDAD)
		
		'Agrego el usuario que recibió el formulario al campo de usuarios receptores del formulario
		Call agregarValor(doc, CAMPO_FORMULARIO_USUARIORECEPTOR, usuario.NombreUsuario)
		Call agregarValor(doc, CAMPO_FORMULARIO_USUARIORECORRIDO, usuario.NombreUsuario)
		'Agrego la fecha de recepción
		Call agregarValor(doc, CAMPO_FORMULARIO_FECHASRECEPCION, Now)
		'Actualizo el número de sección si es que no fue reenviado
		If Not doc.HasItem(CAMPO_FORMULARIO_REENVIADO) Or Not doc.GetItemValue(CAMPO_FORMULARIO_REENVIADO)(0) = "Si" Then
			' Cambio de seccion
			Call doc.ReplaceItemValue(CAMPO_FORMULARIO_SECCION_ANTERIOR, doc.GetItemValue(CAMPO_FORMULARIO_SECCION)(0))
			Call doc.ReplaceItemValue(CAMPO_FORMULARIO_SECCION, doc.GetItemValue(CAMPO_FORMULARIO_PROXIMA_SECCION)(0))
			Call agregarValor(doc, CAMPO_FORMULARIO_RECORRIDO_SECCIONES, doc.GetItemValue(CAMPO_FORMULARIO_PROXIMA_SECCION)(0))
		'	Call agregarValor(doc, CAMPO_FORMULARIO_DESCRIPCION_SECCIONES, docDefFormulario.GetItemValue(CAMPO_DEFFORMULARIO_DESCRIPCION_SEC)(CInt(doc.GetItemValue(CAMPO_FORMULARIO_SECCION_ANTERIOR)(0))))
		End If
		
		If doc.GetItemValue(CAMPO_FORMULARIO_REENVIADO)(0) = "Si" Then
			Call doc.ReplaceItemValue(CAMPO_FORMULARIO_REENVIADO, "No")
		Else
			Call agregarValor(doc, CAMPO_FORMULARIO_RECORRIDO_IDS, doc.GetItemValue(CAMPO_FORMULARIO_ID_ELEMENTO)(0))	
		End If
		
		' Enviar mail a los miembros de la unidad anterior
		Set docDefFormulario = vistaDefFormCodigo.GetDocumentByKey(doc.GetItemValue(CAMPO_FORMULARIO_CODIGOFORM)(0), True)
		If docDefFormulario.GetItemValue(CAMPO_DEFFORMULARIO_ACUSERECEPCION)(0) = "Si" Then
			Set unidad = New UnidadFormClass(doc.GetItemValue(CAMPO_FORMULARIO_UNIDADANTERIOR)(0))
			
			link = igDocConf.Protocolo + "://" + conf.Hosts.getElement(1) + ":" + igDocConf.Puerto + "/" + Replace(doc.Parentdatabase.Filepath, {\}, "/") + "/AbrirForm?OpenAgent&id=" + doc.UniversalID + "&numero=" + doc.GetItemValue(CAMPO_FORMULARIO_NUMERO)(0) + "&codigo=" + doc.GetItemValue(CAMPO_FORMULARIO_CODIGOFORM)(0)
			Call enviarMail(unidad.Miembros, "Acuse de recepción, usuario: " + usuario.NombreUsuario + ", formulario: " & doc.Getitemvalue(CAMPO_FORMULARIO_NUMERO)(0), link, "Recibir")
		End If
		
		
		' ***********************************************'
		' ***************** Comienzo SLA ****************'
		' ***********************************************'
		Set infoNodo = Me.mxController.obtenerActual(doc.GetItemValue(CAMPO_FORMULARIO_ID_ELEMENTO)(0), doc)
		Set docDefFormulario = vistaDefFormCodigo.GetDocumentByKey(doc.GetItemValue(CAMPO_FORMULARIO_CODIGOFORM)(0), True)
		If (docDefFormulario.Getitemvalue(CAMPO_DEFFORMULARIO_SLA)(0) <> "No") Then
			If (docDefFormulario.Getitemvalue(CAMPO_DEFFORMULARIO_PLAZORECEPCION)(0) = "Recibe") Then
				
				fechaVencimientoSLA = ""
				
				Fechaactual.setNow
				If (infoNodo.getDias() <> 0 And infoNodo.getDias() <> 0) Then
					fechaActual.Adjustday(infoNodo.getDias())
					fechaActual.AdjustHour(infoNodo.getHoras())
					Call doc.Replaceitemvalue(CAMPO_FORMULARIO_ESTADO_VENCIMIENTO, "Pendiente")
				Else
					Call doc.Replaceitemvalue(CAMPO_FORMULARIO_ESTADO_VENCIMIENTO, "Sin SLA")
				End If
				
				yyyy = Year(fechaActual.Dateonly)
				mm = Month(fechaActual.Dateonly)
				dd = Day(fechaActual.Dateonly)
				hh = Hour(fechaActual.Timeonly)
				fechaVencimientoSLA = yyyy &  "-" & mm &"-" & dd &"-" & hh
				Call doc.Replaceitemvalue(CAMPO_FORMULARIO_FECHA_VENCIMIENTO, fechaVencimientoSLA)
			End If
		End If
		' ***********************************************'
		' ******************* FIN SLA *******************'
		' ***********************************************'
		
		' ***********************************************'
		' *************** Comienzo AVISOS ***************'
		' ***********************************************'
		
		If (docDefFormulario.Getitemvalue(CAMPO_DEFFORMULARIO_AVISOS_ACTIVOS)(0) = "Si") And (docDefFormulario.Getitemvalue(CAMPO_DEFFORMULARIO_AVISOS_ACCION)(0) = "Recibir")Then
			Dim vMailsAvisos As Vector
			Dim vTelefonosAvisos As Vector
			Dim vCelularesAvisos As Vector
			
			If(docDefFormulario.Getitemvalue(CAMPO_DEFFORMULARIO_AVISOS_SIEMPRE)(0) = "Si")Then
				Set vMailsAvisos = me.mailsAvisos()
				Set vTelefonosAvisos = Me.telefonosAvisos()
				Set vCelularesAvisos = me.celularesAvisos()
			Else
				Set vMailsAvisos = New Vector(0)
				Set vTelefonosAvisos = New Vector(0)
				Set vCelularesAvisos = New Vector(0)
				If (infoNodo.getAvisoMail() = 1) Then
					Set vMailsAvisos = me.mailsAvisos()
				End If
				If (infoNodo.getAvisoSms() = 1) Then
					Set vTelefonosAvisos = Me.telefonosAvisos()
				End If
				If (infoNodo.getAvisoVoz() = 1) Then
					Set vCelularesAvisos = me.celularesAvisos()
				End If
			End If
			
			Dim solAviso As SolicitudAvisoFormularios
			Set solAviso = New SolicitudAvisoFormularios(vMailsAvisos,vCelularesAvisos,vTelefonosAvisos,doc.Getitemvalue(CAMPO_FORMULARIO_NUMERO)(0),doc.Getitemvalue(CAMPO_FORMULARIO_UNIDADACTUAL)(0))
			Call solAviso.enviarAutomatico()
		End If
		
		' ***********************************************'
		' ****************** FIN AVISOS *****************'
		' ***********************************************'
		
		'Guardo los cambios del formulario
		Call doc.Save(True, False)	
		' Actualizo el indice para desplegar el formulario en las bandejas
		Call actualizarIndice(doc.GetItemValue(CAMPO_FORMULARIO_NUMERO)(0),dbFormularios)
		
		Recibir = ""
		Me.Auditoria.numeroDoc = doc.Getitemvalue("numero")(0)
		Me.Auditoria.operacion = "acc_recibir_form"
		Call Auditoria.registrar
		Exit Function
HANDLER:
		Call RegistrarYGenerarError2(Err, Error, NOMBRE_APLICACION, "Clase Formulario - Método recibir", "",nombreUsuario)
		Msgbox "ClaseFormulario - Recibir: " & Error$ & " " & Erl
		Recibir = Error$
		Exit Function
	End Function
	
	
'******************************************************************************************************************
	
	
	Public Function Editar As String
		On Error Goto HANDLER
		Dim seccion As Integer
		Dim itemAutor As NotesItem
		
		'VALIDACIONES
		'************************************************
		Call checkEditar()
		'************************************************
		
		'BORRAMOS LAS FIRMAS SI ES QUE EXISTEN
		seccion = doc.GetItemValue(CAMPO_FORMULARIO_SECCION)(0)
		
		If doc.HasItem(CAMPO_FORMULARIO_FECHAFIRMA & Cstr(seccion)) Then
			Call doc.RemoveItem(CAMPO_FORMULARIO_FECHAFIRMA & Cstr(seccion))
			Call doc.RemoveItem(CAMPO_FORMULARIO_FIRMA & Cstr(seccion))
			Call doc.RemoveItem(CAMPO_FORMULARIO_FIRMANTE & Cstr(seccion))
		End If
		
		'Seteo el campo autores
		If doc.HasItem(CAMPO_FORMULARIO_AUTOR) Then
			doc.RemoveItem(CAMPO_FORMULARIO_AUTOR)
		End If
		Set itemAutor = New NotesItem(doc, CAMPO_FORMULARIO_AUTOR, userCanonical, AUTHORS)
		
		'Seteo el formulario como Reservado
		Call doc.ReplaceItemValue(CAMPO_FORMULARIO_ESTADO, ESTADO_FORM_RESERVADO)
		'Seteo el campo "ReservadoPor" con el usuario
		Call doc.ReplaceItemValue(CAMPO_FORMULARIO_RESERVADOPOR, usuario.NombreUsuario)
		
		'Guardo los cambios del formulario
		Call doc.Save(True, False)
		

		Editar = ""
		Me.Auditoria.numeroDoc = doc.Getitemvalue("numero")(0)
		Me.Auditoria.operacion = "acc_editar_form"
		Call Auditoria.registrar
		Exit Function
HANDLER:
		Call RegistrarYGenerarError2(Err, Error, NOMBRE_APLICACION, "Clase Formulario - Método Editar", "",nombreUsuario)	
		
		Msgbox "ClaseFormulario - Editar: " & Error$ & " " & Erl
		Editar = Error$
		Exit Function
	End Function
	
	
'******************************************************************************************************************
	Public Function telefonosAvisos() As Vector
		On Error GoTo HANDLER
		
		Dim vCamposTelefonosAvisos As New Vector(0)
		Dim iter As Integer
		Dim iter2 As Integer
		Dim sNombreCampo As String
		Dim valor As New Vector(0)
		
		Set telefonosAvisos = New Vector(0)
		
		vCamposTelefonosAvisos.Values = docDefFormulario.Getitemvalue(CAMPO_DEFFORMULARIO_AVISO_TEL)
		For iter = 1 To vCamposTelefonosAvisos.cantElem
			sNombreCampo = vCamposTelefonosAvisos.getElement(iter)
			If doc.Hasitem(sNombreCampo) And Not doc.Getitemvalue(sNombreCampo)(0) = "" Then
				Set valor = New Vector(0)
				valor.values =  doc.Getitemvalue(sNombreCampo)
				Call telefonosAvisos.Append(valor, False)
			End If
		Next
		Exit Function
HANDLER:
		MsgBox "ClaseFormulario - telefonosAvisos: " & Error$ & " " & Erl
		Exit Function
	End Function
	'******************************************************************************************************************
	Public Function mailsAvisos() As Vector
		On Error GoTo HANDLER
		Dim vCamposMailsAvisos As New Vector(0)
		Dim iter As Integer
		Dim iter2 As Integer
		Dim sNombreCampo As String
		Dim valor As New Vector(0)
		Set mailsAvisos = New Vector(0)
		vCamposMailsAvisos.Values = docDefFormulario.Getitemvalue(CAMPO_DEFFORMULARIO_AVISO_MAIL)
		For iter = 1 To vCamposMailsAvisos.cantElem
			sNombreCampo = vCamposMailsAvisos.getElement(iter)
			If Not doc.Getitemvalue(sNombreCampo)(0) = "" Then
				Set valor = New Vector(0)
				valor.values =  doc.Getitemvalue(sNombreCampo)
				Call mailsAvisos.Append(valor, False)
			End If
		Next
		Exit Function
HANDLER:
		MsgBox "ClaseFormulario - mailsAvisos: " & Error$ & " " & Erl
		Exit Function
	End Function
	'******************************************************************************************************************
	Public Function celularesAvisos() As Vector
		On Error GoTo HANDLER
		
		Dim vCamposCelularesAvisos As New Vector(0)
		Dim iter As Integer
		Dim iter2 As Integer
		Dim sNombreCampo As String
		Dim valor As New Vector(0)
		
		Set celularesAvisos = New Vector(0)
		
		vCamposCelularesAvisos.Values = docDefFormulario.Getitemvalue(CAMPO_DEFFORMULARIO_AVISO_CEL)
		For iter = 1 To vCamposCelularesAvisos.cantElem
			sNombreCampo = vCamposCelularesAvisos.getElement(iter)
			If doc.Hasitem(sNombreCampo) And Not doc.Getitemvalue(sNombreCampo)(0) = "" Then
				Set valor = New Vector(0)
				valor.values =  doc.Getitemvalue(sNombreCampo)
				Call celularesAvisos.Append(valor, False)
			End If
		Next
		Exit Function
HANDLER:
		Call RegistrarYGenerarError2(Err, Error, NOMBRE_APLICACION, "Clase Formulario - Método CelularesAvisos", "",nombreUsuario)
		MsgBox "ClaseFormulario - celularesAvisos: " & Error$ & " " & Erl
		Exit Function
	End Function
'******************************************************************************************************************
	
	
	Public Function Guardar As String
		On Error Goto HANDLER

		Dim seccion As Integer
		Dim vNombresArchivos As Vector
		Dim vNombresArchivosTemp As Vector
		Dim vNombresArchivosSeccion As Vector
		Dim nombreArchivo As String
		Dim pos As Long
		Dim i As Integer
		Dim j As Integer
		
		
		'VALIDACIONES
		'************************************************
		Call checkGuardar()
		'************************************************
		
		'Obtengo el número de sección actual
		If doc.HasItem(CAMPO_FORMULARIO_SECCION) Then
			seccion = doc.GetItemValue(CAMPO_FORMULARIO_SECCION)(0)
		Else 
			seccion = 1
		End If
		
		
		' Seteo los campos a firmar de la seccion actual
		Call doc.ReplaceItemValue(CAMPO_FORMULARIO_CAMPOS_A_FIRMAR + Cstr(seccion), doc.GetItemValue(CAMPO_FORMULARIO_CAMPOS_A_FIRMAR))
		
		Dim campoAFirmarSecc11 As NotesItem
		Set campoAFirmarSecc11=doc.Getfirstitem(CAMPO_FORMULARIO_CAMPOS_A_FIRMAR + Cstr(seccion)) 
		campoAFirmarSecc11.Issummary=False
		
		
		' Obtengo los nombres de los archivos adjuntos del documento
		Set vNombresArchivos = New Vector(0)
		vNombresArchivos.values = Evaluate({@AttachmentNames}, doc)
		
		' Elimino los nombres de archivos adjuntos que ya estuvieran en el documento
		For i = 1 To seccion - 1
			If doc.HasItem(CAMPO_FORMULARIO_ARCHIVOS_ADJUNTOS & Cstr(i)) Then
				Set vNombresArchivosTemp = New Vector(0)
				vNombresArchivosTemp.Values = doc.GetItemValue(CAMPO_FORMULARIO_ARCHIVOS_ADJUNTOS & Cstr(i))
				For j = 1 To vNombresArchivosTemp.CantElem
					nombreArchivo = Cstr(vNombresArchivosTemp.getElement(j))
					If vNombresArchivos.IsMember(nombreArchivo, pos, True) Then
						' Tengo que borrar el nombre de un archivo de una sección anterior
						vNombresArchivos.DeleteElement(pos)
					End If
				Next
			End If
		Next
		
		' Reemplazo el campo CAMPO_FORMULARIO_ARCHIVOS_ADJUNTOS con los nombres de los archivos adjuntos de la sección
		Call doc.ReplaceItemValue(CAMPO_FORMULARIO_ARCHIVOS_ADJUNTOS & Cstr(seccion), vNombresArchivos.Values)
		
		'If doc.HasItem(CAMPO_FORMULARIO_AUTOR) Then
			'doc.RemoveItem(CAMPO_FORMULARIO_AUTOR)
		'End If
		
		'Cargo los campos de avisos según el documento de definición del formulario
		%REM ESTO SE PUEDE ELIMINAR EN EL CASO QUE SE CALCULE A LA HORA DEL PASE POR LO QUE NO SERIA NECESARIO CALCULAR ESTOS CAMPOS A LA HORA DE GUARDAR
		Dim vCamposTelefonosAvisos As New Vector(0)
		Dim vCamposCelularesAvisos As New Vector(0)
		Dim vCamposEmailsAvisos As New Vector(0)
		Dim vTelefonosAvisos As New Vector(0)
		Dim vCelularesAvisos As New Vector(0)
		Dim vEmailsAvisos As New Vector(0)
		
		vCamposTelefonosAvisos.Values = docDefFormulario.Getitemvalue(CAMPO_DEFFORMULARIO_AVISO_TEL)
		vCamposEmailsAvisos.Values = docDefFormulario.Getitemvalue(CAMPO_DEFFORMULARIO_AVISO_MAIL)
		vCamposCelularesAvisos.Values = docDefFormulario.Getitemvalue(CAMPO_DEFFORMULARIO_AVISO_CEL)
		
		Dim iter As Integer
		Dim iter2 As Integer
		Dim sNombreCampo As String
		Dim valor As New Vector(0)
		
		For iter = 1 To vCamposTelefonosAvisos.cantElem
			sNombreCampo = vCamposTelefonosAvisos.getElement(iter)
			If doc.Hasitem(sNombreCampo) And Not doc.Getitemvalue(sNombreCampo)(0) = "" Then
				Set valor = New Vector(0)
				valor.values =  doc.Getitemvalue(sNombreCampo)
				Call vTelefonosAvisos.Append(valor, false)
			End If
		Next
		
		Call doc.Replaceitemvalue(CAMPO_FORMULARIO_TELEFONOS_AVISOS, vTelefonosAvisos.Values)		
		
		For iter = 1 To vCamposEmailsAvisos.cantElem
			sNombreCampo = vCamposEmailsAvisos.getElement(iter)
			If doc.Hasitem(sNombreCampo) And Not doc.Getitemvalue(sNombreCampo)(0) = "" Then
				Set valor = New Vector(0)
				valor.values =  doc.Getitemvalue(sNombreCampo)
				Call vEmailsAvisos.Append(valor, False)
			End If
		Next
		
		Call doc.Replaceitemvalue(CAMPO_FORMULARIO_CORREOS_AVISOS, vEmailsAvisos.Values)
		
		For iter = 1 To vCamposCelularesAvisos.cantElem
			sNombreCampo = vCamposCelularesAvisos.getElement(iter)
			If doc.Hasitem(sNombreCampo) And Not doc.Getitemvalue(sNombreCampo)(0) = "" Then
				Set valor = New Vector(0)
				valor.values =  doc.Getitemvalue(sNombreCampo)
				Call vCelularesAvisos.Append(valor, False)
			End If
		Next
		
		Call doc.Replaceitemvalue(CAMPO_FORMULARIO_CELULARES_AVISOS, vCelularesAvisos.Values)
		%endrem
		Call doc.Save(True, False)
		
		Guardar = ""
		Me.Auditoria.numeroDoc = doc.Getitemvalue("numero")(0)
		Me.Auditoria.operacion = "acc_guardar_form"
		Call Auditoria.registrar
		Exit Function
HANDLER:
			Call RegistrarYGenerarError2(Err, Error, NOMBRE_APLICACION, "Clase Formulario - Método Guardar", "",nombreUsuario)
		Msgbox "ClaseFormulario - Guardar: " & Error$ & " " & Erl
		Guardar = Error$
		Exit Function
	End Function
	
	
'******************************************************************************************************************
	
	
	Public Function Firmar(Byval sFirma As String) As String
		
		On Error Goto handler
		'MsgBox "sFormBloqueado: " & doc.getItemValue("sFormBloqueado")(0)
		'MsgBox "sFormBloqueadoForm: " & doc.getItemValue("sFormBloqueadoForm")(0)
		
		' Si el form esta reservado y el usuario que reservo es distinto que el usuario actual que de error - Day
		If ((doc.GetItemValue(CAMPO_FORMULARIO_ESTADO)(0) = "Reservado") And (usuario.NombreUsuario <> doc.Getitemvalue(CAMPO_FORMULARIO_RESERVADOPOR)(0)))Then
			Error ERROR_DARPASE_GENERAL, MSG_ERROR_FIRMAR_USUARIO_NO_AUTORIZADO + doc.Getitemvalue(CAMPO_FORMULARIO_RESERVADOPOR)(0) + "."
		Else
			If ((doc.getItemValue("sFormBloqueado")(0) <> "Si") And (doc.getItemValue("sFormBloqueadoForm")(0) <> "Si")) Then
				Dim seccion As Integer
				Dim pos As Long
				Dim vectorFirmantes As Vector	
				'MsgBox "FIRMAR"
				' Obtengo el número de sección actual
				If doc.HasItem(CAMPO_FORMULARIO_SECCION) Then
					seccion = doc.GetItemValue(CAMPO_FORMULARIO_SECCION)(0)
				Else
						seccion = 1
				End If
			
				' Control de Roles 
				If Not usuario.TieneRolForm(doc.GetItemValue(CAMPO_FORMULARIO_CODIGOFORM)(0), _
					doc.GetItemValue(CAMPO_FORMULARIO_UNIDADACTUAL)(0), ROL_FIRMAR) Then
					Error ERROR_ROL_USUARIO_FIRMAR, MSG_ERROR_ROL_USUARIO_FIRMAR
				End If
			
				Set vectorFirmantes = New Vector(0)
				vectorFirmantes.Values = doc.GetItemValue(CAMPO_FORMULARIO_FIRMANTE & Cstr(seccion))
			'	Call vectorFirmantes.insertElement(CAMPO_FORMULARIO_FIRMANTE & Cstr(seccion), vectorFirmantes.cantElem + 1)
				If Not vectorFirmantes.IsMember(usuario.NombreUsuario, pos, True) Then
					' Seteo los vectores con el valor de los campos firmante, firma y fechaFirma
					Call agregarValor(doc, CAMPO_FORMULARIO_FIRMANTE & Cstr(seccion), usuario.NombreUsuario)
					Call agregarValor(doc, CAMPO_FORMULARIO_FIRMA & Cstr(seccion), sFirma)
					Call agregarValor(doc, CAMPO_FORMULARIO_FECHAFIRMA & Cstr(seccion), Now)
				End If
			
				'Cambio el estado del formulario a "firmado"
			'	Call doc.ReplaceItemValue(CAMPO_FORMULARIO_ESTADO, ESTADO_FORM_FIRMADO)
			
				Call doc.Save(True, False)
				Firmar = ""
				Me.Auditoria.numeroDoc = doc.Getitemvalue("numero")(0)
				Me.Auditoria.operacion = "acc_firmar_form"
				Call Auditoria.registrar
			End If
		  End If  
		Exit Function
HANDLER:
		Call RegistrarYGenerarError2(Err, Error, NOMBRE_APLICACION, "Clase Formulario - Método Firmar", "",nombreUsuario)
		Msgbox "ClaseFormulario - Firmar: " & Error$ & " " & Erl
		Firmar = Error$
		Exit Function
	End Function
	
	
'******************************************************************************************************************
	
	
	Public Function FirmarDarPase(Byval sFirma As String, Byval unidadAEnviar As String) As String
		On Error Goto handler
		If ((doc.getItemValue("sFormBloqueado")(0) <> "Si") And (doc.getItemValue("sFormBloqueadoForm")(0) <> "Si")) Then
			Dim mensajeError As String
			mensajeError = Me.Firmar(sFirma)
			If mensajeError <> "" Then
				FirmarDarPase = mensajeError
			Else
				FirmarDarPase = Me.DarPase(unidadAEnviar)
			End If
		End if
		Exit Function
handler:
		Call RegistrarYGenerarError2(Err, Error, NOMBRE_APLICACION, "Clase Formulario - Método FirmarDarPase", "",nombreUsuario)
		Msgbox "ClaseFormulario - FirmaryDarPase: " & Error$ & " " & Erl
		FirmarDarPase = Error$
		Exit Function
	End Function
	
	
'******************************************************************************************************************
	
	
	Public Function Asignar (Byval usuarioEditor As String) As String
		On Error Goto HANDLER
		
		MsgBox "WorkflowSystem - Funcion Asignar - USUARIO EDITOR: " & usuarioEditor
		
		Dim itemAutor As NotesItem
		Dim usuarioAAsignar As UsuarioForm
		Dim i As Long
		Dim seccion As Integer
		
		Set usuarioAAsignar = New UsuarioForm(usuarioEditor)
		
		'VALIDACIONES
		'**************************************************
		'Call checkAsignar(usuarioAAsignar)
		'**************************************************
		
		Call checkAsignar(usuario)
		
		'BORRAMOS LAS FIRMAS SI ES QUE EXISTEN
		seccion = doc.GetItemValue(CAMPO_FORMULARIO_SECCION)(0)
		If doc.HasItem(CAMPO_FORMULARIO_FECHAFIRMA & Cstr(seccion)) Then
			Call doc.RemoveItem(CAMPO_FORMULARIO_FECHAFIRMA & Cstr(seccion))
			Call doc.RemoveItem(CAMPO_FORMULARIO_FIRMA & Cstr(seccion))
			Call doc.RemoveItem(CAMPO_FORMULARIO_FIRMANTE & Cstr(seccion))
		End If
		
		'Seteo el campo autores
		Set itemAutor = New NotesItem(doc, CAMPO_FORMULARIO_AUTOR, usuarioEditor, AUTHORS)
		'Seteo el formulario como Reservado
		Call doc.ReplaceItemValue(CAMPO_FORMULARIO_ESTADO, ESTADO_FORM_RESERVADO)	
		'Seteo el campo "ReservadoPor" con el usuario
		Call doc.ReplaceItemValue(CAMPO_FORMULARIO_RESERVADOPOR, usuarioEditor)
		Call doc.Save(True, False)
		' Actualizo el indice para desplegar el formulario en las bandejas
		Call actualizarIndice(doc.GetItemValue(CAMPO_FORMULARIO_NUMERO)(0),dbFormularios)
		
		Asignar = ""
		'Error 321, "MENSAJITO ASIGNAR"
		Me.Auditoria.numeroDoc = doc.Getitemvalue("numero")(0)
		Me.Auditoria.operacion = "acc_asignar_form"
		Call Auditoria.registrar
		Exit Function
HANDLER:
		Call RegistrarYGenerarError2(Err, Error, NOMBRE_APLICACION, "Clase Formulario - Método Asignar", "",nombreUsuario)
		Msgbox "ClaseFormulario - Asignar: " & Error$ & " " & Erl
		Asignar = Error$
		Exit Function
	End Function
	
	
'******************************************************************************************************************
	
	
	Public Function AsignarParaFirmar(Byval usuarioEditor As String) As String
		On Error Goto HANDLER
		
		Dim itemAutor As NotesItem
		Dim usuarioAAsignar As UsuarioForm
		Dim i As Long
		Dim seccion As Integer
		
		Set usuarioAAsignar = New UsuarioForm(usuarioEditor)
		
		' VALIDACIONES
		'**************************************************
		Call checkAsignar(usuarioAAsignar)
		'**************************************************
		
		' BORRAMOS LAS FIRMAS SI ES QUE EXISTEN
		seccion = doc.GetItemValue(CAMPO_FORMULARIO_SECCION)(0)
		
		If doc.HasItem(CAMPO_FORMULARIO_FECHAFIRMA & Cstr(seccion)) Then
			Call doc.RemoveItem(CAMPO_FORMULARIO_FECHAFIRMA & Cstr(seccion))
			Call doc.RemoveItem(CAMPO_FORMULARIO_FIRMA & Cstr(seccion))
			Call doc.RemoveItem(CAMPO_FORMULARIO_FIRMANTE & Cstr(seccion))
		End If
		
		'Seteo el campo autores
		Set itemAutor = New NotesItem(doc, CAMPO_FORMULARIO_AUTOR, usuarioEditor, AUTHORS)
		
		'Seteo el formulario como Reservado  y seteo el campo "ReservadoPor" con el usuario
		Call doc.ReplaceItemValue(CAMPO_FORMULARIO_ESTADO, ESTADO_FORM_RESERVADO_PARA_FIRMAR)
		Call doc.ReplaceItemValue(CAMPO_FORMULARIO_RESERVADOPOR, usuarioEditor)
		
		Call	doc.Save(True, False)
		' Actualizo el indice para desplegar el formulario en las bandejas
		Call actualizarIndice(doc.GetItemValue(CAMPO_FORMULARIO_NUMERO)(0),dbFormularios)
		
		AsignarParaFirmar = ""
		Me.Auditoria.numeroDoc = doc.Getitemvalue("numero")(0)
		Me.Auditoria.operacion = "acc_para_firmar_form"
		Call Auditoria.registrar
		Exit Function
HANDLER:
		Call RegistrarYGenerarError2(Err, Error, NOMBRE_APLICACION, "Clase Formulario - Método AsignarParaFirmar", "",nombreUsuario)
		Msgbox "ClaseFormulario - AsignarParaFirmar: " & Error$ & " " & Erl
		AsignarParaFirmar = Error$
		Exit Function
	End Function
'******************************************************************************************************************
	
	
	Public Function AsignarUnidad(unidadAEnviar As String) As String
		On Error GoTo HANDLER 
		
		Dim unidadDestino As String
		Dim vReceptoresDestinatarios As Vector
		Dim uDestino As UnidadFormClass
		Dim link As String
		Dim status As String
		Dim agent As NotesAgent
		'************* CALCULOS DE UNIDAD DESTINO
		Dim recorrido As New Vector(0)
		Dim infoNodo As InfoNodo
		Dim infoNodoAux As InfoNodo
		Dim infoNodoNext As InfoNodo
		Dim idElementoPase As String
		Dim unidadActual As String
		Dim contUnidades As Integer
		Dim fechaActual As NotesDateTime
		Set fechaActual = New NotesDateTime("")
		Dim fechaActual2 As NotesDateTime
		Set fechaActual2 = New NotesDateTime("")
		
		Dim docFormularioPrevioAccion As NotesDocument
		Dim ss As New NotesSession
		Dim idAccion As Integer
		Dim docID As String	
		Dim infoNodoActual As InfoNodo
		Dim fechaVencimientoSLA As String
		
		fechaActual.Setnow
		contUnidades = 0
		Set infoNodo = Me.obtenerSiguiente(doc.GetItemValue(CAMPO_FORMULARIO_ID_ELEMENTO)(0))
		idElementoPase = infoNodo.getIdElemento()
		
		Dim mensajeDarPase As String
		

			
			
			unidadDestino = unidadAEnviar
			' Cambio de diego 05/01/2010
			' Call doc.Replaceitemvalue(CAMPO_FORMULARIO_ID_ELEMENTO_PROXIMAU, unidadDestino)
			
			
			
					unidadDestino = unidadAEnviar
							
			
			
			Set uDestino = New UnidadFormClass(unidadDestino)
			
			
			
			
			'Call checkDarPase(uDestino)
			'**************************************************
			
			
			
			'Agrego la nueva fecha de envío
			Call agregarValor(doc, CAMPO_FORMULARIO_FECHASENVIO, Now)
			'Cambio el estado del formulario a "En tránsito"
			Call doc.ReplaceItemValue(CAMPO_FORMULARIO_ESTADO, ESTADO_FORM_ENTRANSITO)
			'Seteo la unidad actual como unidad anterior
			Call doc.ReplaceItemValue(CAMPO_FORMULARIO_UNIDADANTERIOR, doc.GetItemValue(CAMPO_FORMULARIO_UNIDADACTUAL)(0))
			'Seteo la unidad destino calculada como unidad actual
			Call doc.ReplaceItemValue(CAMPO_FORMULARIO_UNIDADACTUAL, unidadDestino)
			
			Call agregarValor(doc, CAMPO_FORMULARIO_RECORRIDO_UNIDADES, unidadDestino)
			' Le seteo el id del nodo que le corresponde a la unidad en el diagrama de workflow
			'Call doc.ReplaceItemValue(CAMPO_FORMULARIO_ID_ELEMENTO, idElementoPase)
			If (Me.ExisteSiguiente(doc.GetItemValue(CAMPO_FORMULARIO_ID_ELEMENTO)(0))) Then
				
				'Chequeo si el próximo nodo es un idGrupo
				Set infoNodoNext = Me.obtenerSiguiente(doc.GetItemValue(CAMPO_FORMULARIO_ID_ELEMENTO)(0))
				
				If (infoNodoNext.getUnidad() = "@idGrupo") Then
					Call doc.Replaceitemvalue("codMxGrupo", infoNodoNext.getIdGrupo())
				End If
				
				' Guardo la unidad del próximao pase
				Call doc.Replaceitemvalue(CAMPO_FORMULARIO_ID_ELEMENTO_PROXIMAU, infoNodoNext.getUnidad())
			End If
			
			Call agregarUnidadLectora(doc, unidadDestino)
			'Seteo el campo RazonDevolver
			Call doc.ReplaceItemValue(CAMPO_FORMULARIO_RAZONDEVOLVER, "")
			
			' ***********************************************'
			' ***************** Comienzo SLA ****************'
			' ***********************************************'
			
			Set docDefFormulario = vistaDefFormCodigo.GetDocumentByKey(doc.GetItemValue(CAMPO_FORMULARIO_CODIGOFORM)(0), True)
			If (docDefFormulario.Getitemvalue(CAMPO_DEFFORMULARIO_SLA)(0) <> "No") Then
				'If (infoNodo.getDias() <> 0 And infoNodo.getDias() <> 0) Then
				
				fechaLimiteSeccionSLA = infoNodo.getDias()&" d - "& infoNodo.getHoras() & " h"
				Call agregarValor(doc, CAMPO_FORMULARIO_TIEMPO_LIMITE_SECCION, fechaLimiteSeccionSLA)
				
				'MsgBox "TIPO DE SLA: " & docDefFormulario.Getitemvalue(CAMPO_DEFFORMULARIO_PLAZORECEPCION)(0)
				If (docDefFormulario.Getitemvalue(CAMPO_DEFFORMULARIO_PLAZORECEPCION)(0) <> "Recibe") Then	
					
					fechaVencimientoSLA = ""
					
					If (infoNodo.getDias() <> 0 And infoNodo.getDias() <> 0) Then
						fechaActual.Adjustday(infoNodo.getDias())
						fechaActual.AdjustHour(infoNodo.getHoras())
						Call doc.Replaceitemvalue(CAMPO_FORMULARIO_ESTADO_VENCIMIENTO, "Pendiente")
					Else
						Call doc.Replaceitemvalue(CAMPO_FORMULARIO_ESTADO_VENCIMIENTO, "Sin SLA")
					End If
					yyyy = Year(fechaActual.Dateonly)
					mm = Month(fechaActual.Dateonly)
					dd = Day(fechaActual.Dateonly)
					hh = Hour(fechaActual.Timeonly)
					fechaVencimientoSLA = yyyy &  "-" & mm &"-" & dd &"-" & hh
					Call doc.Replaceitemvalue(CAMPO_FORMULARIO_FECHA_VENCIMIENTO, fechaVencimientoSLA)
					
					'Set fecha1 = doc.getItemValue(
					Set fechaActual2 = New NotesDateTime("")
					'Set fechaPase = New NotesDateTime("")
					Call fechaActual2.Setnow
					If (UBound(doc.getItemValue(CAMPO_FORMULARIO_FECHASENVIO))>0) Then
						Set fechaPase = New NotesDateTime(doc.Getitemvalue(CAMPO_FORMULARIO_FECHASENVIO)(doc.getItemValue(CAMPO_FORMULARIO_SECCION)-1))
					Else
						Set fechaPase = New NotesDateTime(doc.Getitemvalue(CAMPO_FORMULARIO_FECHACREACION)(0))
					End If
					dif = fechaActual2.Timedifference(fechaPase)
					dias = Fix(dif/84600)
					dif = dif Mod 84600
					horas = Fix(dif / 3600)
					dif = dif Mod 3600
					minutos = Fix(dif /60)
					tiempoEnSeccion = dias &" d - "& horas & " h - " & minutos & " m" 
					If (fechaActual2.Timedifference(fechaActual)> 0) Then
						Call agregarValor(doc, "colorTiempoSeccion", "rojo")
					Else
						Call agregarValor(doc, "colorTiempoSeccion", "verde")
					End If
					Call agregarValor(doc, "tiempoEnSeccion", tiempoEnSeccion)
					
				Else
					fechaVencimientoSLA = ""
					Call doc.Replaceitemvalue(CAMPO_FORMULARIO_FECHA_VENCIMIENTO, fechaVencimientoSLA)
					' aca calculo el tiempo en la sección para cuando el SLA es de tipo "Recibe"
					If (infoNodo.getDias() <> 0 And infoNodo.getDias() <> 0) Then
						fechaActual.Adjustday(infoNodo.getDias())
						fechaActual.AdjustHour(infoNodo.getHoras())
					End If
					Set fechaActual2 = New NotesDateTime("")
					'Set fechaPase = New NotesDateTime("")
					Call fechaActual2.Setnow
					
					If (UBound(doc.getItemValue(CAMPO_FORMULARIO_FECHASRECEPCION))>0) Then
						'CAMBIO FERNANDO 19/07/2011 - se rompia cuando se salteaba una seccion.
						'Set fechaPase = New NotesDateTime(doc.Getitemvalue(CAMPO_FORMULARIO_FECHASRECEPCION)(doc.getItemValue(CAMPO_FORMULARIO_SECCION)(0)-1))
						Set fechaPase = New NotesDateTime(doc.Getitemvalue(CAMPO_FORMULARIO_FECHASRECEPCION)(UBound(doc.getItemValue(CAMPO_FORMULARIO_FECHASRECEPCION))))
					Else
						Set fechaPase = New NotesDateTime(doc.Getitemvalue(CAMPO_FORMULARIO_FECHACREACION)(0))
					End If
					dif = fechaActual2.Timedifference(fechaPase)
					dias = Fix(dif/84600)
					dif = dif Mod 84600
					horas = Fix(dif / 3600)
					dif = dif Mod 3600
					minutos = Fix(dif /60)
					tiempoEnSeccion = dias &" d - "& horas & " h - " & minutos & " m" 
					If (fechaActual2.Timedifference(fechaActual)> 0) Then
						Call agregarValor(doc, "colorTiempoSeccion", "rojo")
					Else
						Call agregarValor(doc, "colorTiempoSeccion", "verde")
					End If
					Call agregarValor(doc, "tiempoEnSeccion", tiempoEnSeccion)
				End If
				'End If
			End If
			' ***********************************************'
			' ******************* FIN SLA *******************'
			' ***********************************************'
			
			Call doc.Save(True, False)
			
			' Actualizo el indice para desplegar el formulario en las bandejas
		Call actualizarIndice(doc.GetItemValue(CAMPO_FORMULARIO_NUMERO)(0),dbFormularios)
			
			If conf.NotificacionPase Then
			'Envio un mail a los miembros con rol receptor de la unidad de destino
				Set vReceptoresDestinatarios = uDestino.RolesForm(doc.GetItemValue(CAMPO_FORMULARIO_CODIGOFORM)(0), ROL_RECEPTOR)
				link = igDocConf.Protocolo + "://" + conf.Hosts.getElement(1) + ":" + igDocConf.Puerto + "/" + Replace(doc.Parentdatabase.Filepath, {\}, "/") + "/AbrirForm?OpenAgent&id=" + doc.UniversalID + "&numero=" + doc.GetItemValue(CAMPO_FORMULARIO_NUMERO)(0) + "&codigo=" + doc.GetItemValue(CAMPO_FORMULARIO_CODIGOFORM)(0)
				Call enviarMail(vReceptoresDestinatarios, "Notificación de pase", link, "Dar Pase")
			End If
			
			AsignarUnidad = ""
			Me.Auditoria.numeroDoc = doc.Getitemvalue("numero")(0)
			Me.Auditoria.operacion = "acc_asig_unidad_form"
			Me.Auditoria.paramOperacion = uDestino.Nombre
			Call Auditoria.registrar
			
	
		
		
		Exit Function
HANDLER:
		Call RegistrarYGenerarError2(Err, Error, NOMBRE_APLICACION, "Clase Formulario - Método AsignarUnidad", "",nombreUsuario)
		MsgBox "ClaseFormulario - AsignarUnidad: " & Error$ & " " & Erl
		AsignarUnidad = Error$
		Exit Function
	End Function	
'******************************************************************************************************************
	
	
	Public Function DarPase(unidadAEnviar As String) As String
		On Error Goto HANDLER 
		' Si el form esta reservado y el usuario que reservo es distinto que el usuario actual que de error - Day
		If ((doc.GetItemValue(CAMPO_FORMULARIO_ESTADO)(0) = "Reservado") And (usuario.NombreUsuario <> doc.Getitemvalue(CAMPO_FORMULARIO_RESERVADOPOR)(0)))Then
			Error ERROR_DARPASE_GENERAL, MSG_ERROR_DARPASE_USUARIO_NO_AUTORIZADO + doc.Getitemvalue(CAMPO_FORMULARIO_RESERVADOPOR)(0) + "."
			else
				If ((doc.getItemValue("sFormBloqueado")(0) <> "Si") And (doc.getItemValue("sFormBloqueadoForm")(0) <> "Si")) Then
					Dim unidadDestino As String
					Dim vReceptoresDestinatarios As Vector
					Dim uDestino As UnidadFormClass
				Dim link As String
				Dim status As String
				Dim agent As NotesAgent
				'************* CALCULOS DE UNIDAD DESTINO
				Dim recorrido As New Vector(0)
				Dim infoNodo As InfoNodo
				Dim infoNodoAux As InfoNodo
				Dim infoNodoNext As InfoNodo
				Dim idElementoPase As String
				Dim unidadActual As String
				Dim contUnidades As Integer
				Dim fechaActual As NotesDateTime
				Set fechaActual = New NotesDateTime("")
				Dim fechaActual2 As NotesDateTime
				Set fechaActual2 = New NotesDateTime("")
		
				Dim docFormularioPrevioAccion As NotesDocument
				Dim ss As New NotesSession
				Dim idAccion As Integer
				Dim docID As String	
				Dim infoNodoActual As InfoNodo
				Dim fechaVencimientoSLA As String
					
				fechaActual.Setnow
				contUnidades = 0
				Set infoNodo = Me.obtenerSiguiente(doc.GetItemValue(CAMPO_FORMULARIO_ID_ELEMENTO)(0))
				Set infoNodoActual = me.obtenerActual(doc.GetItemValue(CAMPO_FORMULARIO_ID_ELEMENTO)(0))
				idElementoPase = infoNodo.getIdElemento()
				unidadActual = doc.Getitemvalue(CAMPO_FORMULARIO_UNIDADACTUAL)(0)
				
				Dim mensajeDarPase As String
				If (infoNodo.getIdAccion() <> -1) Then
					' Si el código de la acción es de tipo 1 tengo que correr un agente que seleccione la proxima unidad
					
					' creo el documento previo a la accion y lo guardo en la base de formulariosAcciones
					Set docFormularioPrevioAccion = dbAcciones.Createdocument()
					Call doc.Copyallitems(docFormularioPrevioAccion, True)
					Call docFormularioPrevioAccion.Save(True, False)
					'corro el agente
					'docId = doc.Noteid
					docId = doc.getItemValue("DocDatosID")(0)
					Set agent = ss.currentDatabase.getAgent(infonodo.getAgente())
					If (agent.Run(doc.Noteid) <> 0) Then
						Error ERROR_CORRER_AGENTE_ACCION, MSG_ERROR_CORRER_AGENTE_ACCION
					End If
					Set doc = Nothing
					Set doc = dbFormularios.Getview("DocDatosPorID").getDocumentByKey(docId,True)
					'Set doc = dbFormularios.Getdocumentbyid(docId)
					
					' Le seteo el id del nodo que le corresponde a la unidad en el diagrama de workflow
					Call doc.ReplaceItemValue(CAMPO_FORMULARIO_ID_ELEMENTO, idElementoPase)
					idAccion = infoNodo.getIdAccion()
					
					Call agregarValor(doc, CAMPO_FORMULARIO_RECORRIDO_IDS, idElementoPase)	
					Set infoNodo = Me.obtenerSiguiente(doc.GetItemValue(CAMPO_FORMULARIO_ID_ELEMENTO)(0))
					errorGuardado = doc.getItemValue(CAMPO_FORMULARIO_ERROR_GUARDADO)(0)
					If(idAccion = TIPO_ACCION_SELECCIONAR_UNIDAD) Then
					If (doc.Hasitem(CAMPO_FORMULARIO_PROXIMA_UNIDAD)) Then
						
						If (Cint(doc.getitemvalue(CAMPO_FORMULARIO_PROXIMA_UNIDAD)(0))=-1) Then
							Call docFormularioPrevioAccion.Copyallitems(doc, True)
							Call doc.Replaceitemvalue(CAMPO_FORMULARIO_ERROR_GUARDADO, errorGuardado)
							Call doc.save (True, False)
							Error ERROR_ACCION_NO_MODIFICO_UNIDAD, MSG_ERROR_ACCION_NO_MODIFICO_UNIDAD
						Else
							Call Me.mxController.SetearProximaUnidad(infoNodo.getIdElemento(),doc.GetitemValue(CAMPO_FORMULARIO_PROXIMA_UNIDAD)(0))
							Call doc.replaceItemValue(CAMPO_FORMULARIO_PROXIMA_UNIDAD,-1)
							'Call DarPase (infoNodo.getUnidad())
							mensajeDarPase=DarPase (infoNodo.getUnidad())
							If Not mensajeDarPase="" Then
								Error ERROR_DARPASE_GENERAL, mensajeDarPase
							End If	
							
						End If
					Else 
						Call docFormularioPrevioAccion.Copyallitems(doc, True)
						Call Me.mxController.SetearProximaUnidad(infoNodo.getIdElemento(),doc.GetitemValue(CAMPO_FORMULARIO_PROXIMA_UNIDAD)(0))
						Call doc.replaceItemValue(CAMPO_FORMULARIO_PROXIMA_UNIDAD,-1)
						Call doc.Replaceitemvalue(CAMPO_FORMULARIO_ERROR_GUARDADO, errorGuardado)
						Call doc.save (True, False)
						Error ERROR_ACCION_NO_MODIFICO_UNIDAD, MSG_ERROR_ACCION_NO_MODIFICO_UNIDAD
					End If
				Elseif (idAccion = TIPO_ACCION_MODIFICAR_CAMPO) Then
					
					Call doc.save (True, False)
					'Call DarPase (infoNodo.getUnidad())
					mensajeDarPase=DarPase (infoNodo.getUnidad())
					If Not mensajeDarPase="" Then
						Error ERROR_DARPASE_GENERAL, mensajeDarPase
					End If
					
				Elseif (idAccion = TIPO_ACCION_GUARDAR) Then
					
					If (doc.Hasitem(CAMPO_FORMULARIO_PROXIMA_UNIDAD)) Then
						If (Cint(doc.getitemvalue(CAMPO_FORMULARIO_PROXIMA_UNIDAD)(0)) = -1) Then
							
							'Seteo la unidad actual como unidad anterior
							Call docFormularioPrevioAccion.Copyallitems(doc, True)
							'Agrego la razón de devolución
							'Call doc.ReplaceItemValue(CAMPO_FORMULARIO_RAZONDEVOLVER, razonDevolver)
							'Call doc.ReplaceItemValue(CAMPO_FORMULARIO_ESTADO, ESTADO_FORM_ENTRANSITO)
							Call doc.ReplaceItemValue(CAMPO_FORMULARIO_ESTADO, ESTADO_FORM_ENUNIDAD)
							Call doc.Replaceitemvalue(CAMPO_FORMULARIO_ERROR_GUARDADO, errorGuardado)
							Call doc.save(True,False)
							Error ERROR_ACCION_GUARDAR, MSG_ERROR_ACCION_GUARDAR
						Else
							Call doc.save (True, False)
							'Call DarPase (infoNodo.getUnidad())
							
							mensajeDarPase=DarPase (infoNodo.getUnidad())
							If Not mensajeDarPase="" Then
								Error ERROR_DARPASE_GENERAL, mensajeDarPase
							End If
						End If
					Else
						'Seteo la unidad actual como unidad anterior
						Call docFormularioPrevioAccion.Copyallitems(doc, True)
						'Agrego la razón de devolución
						Call doc.ReplaceItemValue(CAMPO_FORMULARIO_ESTADO, ESTADO_FORM_ENUNIDAD)
						Call doc.Replaceitemvalue(CAMPO_FORMULARIO_ERROR_GUARDADO, errorGuardado)
						Call doc.save(True,False)
						Error ERROR_ACCION_GUARDAR, MSG_ERROR_ACCION_GUARDAR
					End If
					
				End If
			Else
				' Guardo en un campo el numero de seccion que se va a editar en la proxima unidad
				Call doc.ReplaceItemValue(CAMPO_FORMULARIO_PROXIMA_SECCION, infoNodo.GetSeccion())
				unidadDestino = infoNodo.GetUnidad()
				' Cambio de diego 05/01/2010
				' Call doc.Replaceitemvalue(CAMPO_FORMULARIO_ID_ELEMENTO_PROXIMAU, unidadDestino)
				
				If unidadDestino = MXGRAPH_ID_UNIDAD_SUPERIOR Then
					unidadDestino = Me.obtenerUnidadSuperior(doc.GetItemValue(CAMPO_FORMULARIO_UNIDADACTUAL)(0))
				Elseif unidadDestino = MXGRAPH_ID_UNIDAD_ANTERIOR Then
					Set infoNodoAux = Me.obtenerUnidadInicial()
					While (Not infoNodoAux Is Nothing And infoNodoAux.getSeccion() <> infoNodo.getPase())
						contUnidades = contUnidades +1
						Set infoNodoAux = Me.obtenerSiguiente(infoNodoAux.getIdElemento())
					Wend			
					If (infoNodoAux.getSeccion() <> infoNodo.getPase()) Then
						Error 10002, "El flujo del formulario nunca paso por la seccion a la cual se quiere dar pase"
					End If
					unidadDestino = doc.getItemValue(CAMPO_FORMULARIO_RECORRIDO_UNIDADES)(contUnidades)
				Elseif unidadDestino = MXGRAPH_ID_UNIDAD_INICIAL Then
					unidadDestino = doc.GetItemValue(CAMPO_FORMULARIO_UNIDADINICIO)(0)
				Elseif unidadDestino = MXGRAPH_ID_UNIDAD_CUALQUIERA Then
					If unidadAEnviar <> "" Then
						unidadDestino = unidadAEnviar
					Else
						Error 10001, "No se especificó la unidad destino del pase"
					End If
				Elseif unidadDestino = MXGRAPH_ID_UNIDAD_GRUPO Then
					If unidadAEnviar <> "" Then
						unidadDestino = unidadAEnviar
					Else
						Error 10001, "No se especificó la unidad destino del pase"
					End If
					
				End If
				
				
				Set uDestino = New UnidadFormClass(unidadDestino)
				
				If unidadDestino = MXGRAPH_ID_UNIDAD_GRUPO Then
				'	Call checkDarPaseAGrupo(uDestino, infoNodo.getIdGrupo())
				End If
				
				'*****************
				' VALIDACIONES
				'**************************************************
				If doc.GetItemValue(CAMPO_DEFFORMULARIO_VISIBILIDAD)(0) = "Interno" Or doc.GetItemValue(CAMPO_FORMULARIO_SECCION)(0) > 1 Then
					Call checkDarPaseFormInterno()
				End If
				Call checkDarPase(uDestino)
				'**************************************************
				
				
				'Seteo el usuario que da el pase y la fecha de pase
				Call agregarValor(doc, CAMPO_FORMULARIO_USUARIOPASE, usuario.NombreUsuario)
				Call agregarValor(doc,CAMPO_FORMULARIO_FECHADEPASE, CStr(Now))
				
				
				'Agrego la nueva fecha de envío
				Call agregarValor(doc, CAMPO_FORMULARIO_FECHASENVIO, Now)
				'Cambio el estado del formulario a "En tránsito"
				Call doc.ReplaceItemValue(CAMPO_FORMULARIO_ESTADO, ESTADO_FORM_ENTRANSITO)
				'Seteo la unidad actual como unidad anterior
				Call doc.ReplaceItemValue(CAMPO_FORMULARIO_UNIDADANTERIOR, doc.GetItemValue(CAMPO_FORMULARIO_UNIDADACTUAL)(0))
				'Seteo la unidad destino calculada como unidad actual
				Call doc.ReplaceItemValue(CAMPO_FORMULARIO_UNIDADACTUAL, unidadDestino)
				Call agregarValor(doc, CAMPO_FORMULARIO_RECORRIDO_UNIDADES, unidadDestino)
				' Le seteo el id del nodo que le corresponde a la unidad en el diagrama de workflow
				Call doc.ReplaceItemValue(CAMPO_FORMULARIO_ID_ELEMENTO, idElementoPase)
				If (Me.ExisteSiguiente(doc.GetItemValue(CAMPO_FORMULARIO_ID_ELEMENTO)(0))) Then
			
					'Chequeo si el próximo nodo es un idGrupo
					Set infoNodoNext = Me.obtenerSiguiente(doc.GetItemValue(CAMPO_FORMULARIO_ID_ELEMENTO)(0))
					
					If (infoNodoNext.getUnidad() = "@idGrupo") Then
						Call doc.Replaceitemvalue("codMxGrupo", infoNodoNext.getIdGrupo())
					End If
					
					' Guardo la unidad del próximao pase
					Call doc.Replaceitemvalue(CAMPO_FORMULARIO_ID_ELEMENTO_PROXIMAU, infoNodoNext.getUnidad())
				End If
				Call agregarUnidadLectora(doc, unidadDestino)
				'Seteo el campo RazonDevolver
				Call doc.ReplaceItemValue(CAMPO_FORMULARIO_RAZONDEVOLVER, "")
				' ***********************************************'
				' ***************** Comienzo SLA ****************'
				' ***********************************************'
				
				Set docDefFormulario = vistaDefFormCodigo.GetDocumentByKey(doc.GetItemValue(CAMPO_FORMULARIO_CODIGOFORM)(0), True)
				If (docDefFormulario.Getitemvalue(CAMPO_DEFFORMULARIO_SLA)(0) <> "No") Then
					'If (infoNodo.getDias() <> 0 And infoNodo.getDias() <> 0) Then
				
					fechaLimiteSeccionSLA = infoNodo.getDias()&" d - "& infoNodo.getHoras() & " h"
					Call agregarValor(doc, CAMPO_FORMULARIO_TIEMPO_LIMITE_SECCION, fechaLimiteSeccionSLA)
					
					'MsgBox "TIPO DE SLA: " & docDefFormulario.Getitemvalue(CAMPO_DEFFORMULARIO_PLAZORECEPCION)(0)
					If (docDefFormulario.Getitemvalue(CAMPO_DEFFORMULARIO_PLAZORECEPCION)(0) <> "Recibe") Then	
						fechaVencimientoSLA = ""
						
						If (infoNodo.getDias() <> 0 And infoNodo.getDias() <> 0) Then
							fechaActual.Adjustday(infoNodo.getDias())
							fechaActual.AdjustHour(infoNodo.getHoras())
							Call doc.Replaceitemvalue(CAMPO_FORMULARIO_ESTADO_VENCIMIENTO, "Pendiente")
						Else
							Call doc.Replaceitemvalue(CAMPO_FORMULARIO_ESTADO_VENCIMIENTO, "Sin SLA")
						End If
						yyyy = Year(fechaActual.Dateonly)
						mm = Month(fechaActual.Dateonly)
						dd = Day(fechaActual.Dateonly)
						hh = Hour(fechaActual.Timeonly)
						fechaVencimientoSLA = yyyy &  "-" & mm &"-" & dd &"-" & hh
						Call doc.Replaceitemvalue(CAMPO_FORMULARIO_FECHA_VENCIMIENTO, fechaVencimientoSLA)
						
						'Set fecha1 = doc.getItemValue(
						Set fechaActual2 = New NotesDateTime("")
						'Set fechaPase = New NotesDateTime("")
						Call fechaActual2.Setnow
						If (Ubound(doc.getItemValue(CAMPO_FORMULARIO_FECHASENVIO))>0) Then
							Set fechaPase = New NotesDateTime(doc.Getitemvalue(CAMPO_FORMULARIO_FECHASENVIO)(doc.getItemValue(CAMPO_FORMULARIO_SECCION)-1))
						Else
							Set fechaPase = New NotesDateTime(doc.Getitemvalue(CAMPO_FORMULARIO_FECHACREACION)(0))
						End If
						dif = fechaActual2.Timedifference(fechaPase)
						dias = Fix(dif/84600)
						dif = dif Mod 84600
						horas = Fix(dif / 3600)
						dif = dif Mod 3600
						minutos = Fix(dif /60)
						tiempoEnSeccion = dias &" d - "& horas & " h - " & minutos & " m" 
						If (fechaActual2.Timedifference(fechaActual)> 0) Then
							Call agregarValor(doc, "colorTiempoSeccion", "rojo")
						Else
							Call agregarValor(doc, "colorTiempoSeccion", "verde")
						End If
						Call agregarValor(doc, "tiempoEnSeccion", tiempoEnSeccion)
						
					Else
						fechaVencimientoSLA = ""
						Call doc.Replaceitemvalue(CAMPO_FORMULARIO_FECHA_VENCIMIENTO, fechaVencimientoSLA)
						' aca calculo el tiempo en la sección para cuando el SLA es de tipo "Recibe"
						If (infoNodo.getDias() <> 0 And infoNodo.getDias() <> 0) Then
							fechaActual.Adjustday(infoNodo.getDias())
							fechaActual.AdjustHour(infoNodo.getHoras())
						End If
						Set fechaActual2 = New NotesDateTime("")
						'Set fechaPase = New NotesDateTime("")
						Call fechaActual2.Setnow
						
						If (Ubound(doc.getItemValue(CAMPO_FORMULARIO_FECHASRECEPCION))>0) Then
							'CAMBIO FERNANDO 19/07/2011 - se rompia cuando se salteaba una seccion.
							'Set fechaPase = New NotesDateTime(doc.Getitemvalue(CAMPO_FORMULARIO_FECHASRECEPCION)(doc.getItemValue(CAMPO_FORMULARIO_SECCION)(0)-1))
							Set fechaPase = New NotesDateTime(doc.Getitemvalue(CAMPO_FORMULARIO_FECHASRECEPCION)(Ubound(doc.getItemValue(CAMPO_FORMULARIO_FECHASRECEPCION))))
						Else
							Set fechaPase = New NotesDateTime(doc.Getitemvalue(CAMPO_FORMULARIO_FECHACREACION)(0))
						End If
						dif = fechaActual2.Timedifference(fechaPase)
						dias = Fix(dif/84600)
						dif = dif Mod 84600
						horas = Fix(dif / 3600)
						dif = dif Mod 3600
						minutos = Fix(dif /60)
						tiempoEnSeccion = dias &" d - "& horas & " h - " & minutos & " m" 
						If (fechaActual2.Timedifference(fechaActual)> 0) Then
							Call agregarValor(doc, "colorTiempoSeccion", "rojo")
						Else
							Call agregarValor(doc, "colorTiempoSeccion", "verde")
						End If
						Call agregarValor(doc, "tiempoEnSeccion", tiempoEnSeccion)
					End If
					'End If
				End If
				' ***********************************************'
				' ******************* FIN SLA *******************'
				' ***********************************************'
				
				' ***********************************************'
				' *************** Comienzo AVISOS ***************'
				' ***********************************************'
				If (docDefFormulario.Getitemvalue(CAMPO_DEFFORMULARIO_AVISOS_ACTIVOS)(0) = "Si") And not (docDefFormulario.Getitemvalue(CAMPO_DEFFORMULARIO_AVISOS_ACCION)(0) = "Recibir")Then
					Dim vMailsAvisos As Vector
					Dim vTelefonosAvisos As Vector
					Dim vCelularesAvisos As Vector
					
					if(docDefFormulario.Getitemvalue(CAMPO_DEFFORMULARIO_AVISOS_SIEMPRE)(0) = "Si")Then
						Set vMailsAvisos = me.mailsAvisos()
						Set vTelefonosAvisos = Me.telefonosAvisos()
						Set vCelularesAvisos = me.celularesAvisos()
					Else
						Set vMailsAvisos = New Vector(0)
						Set vTelefonosAvisos = New Vector(0)
						Set vCelularesAvisos = New Vector(0)
						If (infoNodoActual.getAvisoMail() = 1) Then
							Set vMailsAvisos = me.mailsAvisos()
						End If
						If (infoNodoActual.getAvisoSms() = 1) Then
							Set vTelefonosAvisos = Me.telefonosAvisos()
						End If
						If (infoNodoActual.getAvisoVoz() = 1) Then
							Set vCelularesAvisos = me.celularesAvisos()
						End If
					End If
					
					Dim solAviso As SolicitudAvisoFormularios
					Set solAviso = New SolicitudAvisoFormularios(vMailsAvisos,vCelularesAvisos,vTelefonosAvisos,doc.Getitemvalue(CAMPO_FORMULARIO_NUMERO)(0),unidadActual)
					Call solAviso.enviarAutomatico()
				End If
				
				' ***********************************************'
				' ****************** FIN AVISOS *****************'
				' ***********************************************'
				Call doc.Save(True, False)
				
				' Actualizo el indice para desplegar el formulario en las bandejas
				Call actualizarIndice(doc.GetItemValue(CAMPO_FORMULARIO_NUMERO)(0),dbFormularios)
				
				If conf.NotificacionPase Then
				'Envio un mail a los miembros con rol receptor de la unidad de destino
					Set vReceptoresDestinatarios = uDestino.RolesForm(doc.GetItemValue(CAMPO_FORMULARIO_CODIGOFORM)(0), ROL_RECEPTOR)
					link = igDocConf.Protocolo + "://" + conf.Hosts.getElement(1) + ":" + igDocConf.Puerto + "/" + Replace(doc.Parentdatabase.Filepath, {\}, "/") + "/AbrirForm?OpenAgent&id=" + doc.UniversalID + "&numero=" + doc.GetItemValue(CAMPO_FORMULARIO_NUMERO)(0) + "&codigo=" + doc.GetItemValue(CAMPO_FORMULARIO_CODIGOFORM)(0)
					Call enviarMail(vReceptoresDestinatarios, "Notificación de pase", link, "Dar Pase")
				End If
				DarPase = ""
				Me.Auditoria.numeroDoc = doc.Getitemvalue("numero")(0)
				Me.Auditoria.operacion = "acc_dar_pase_form"
				Me.Auditoria.paramOperacion = uDestino.Nombre
				Call Auditoria.registrar
				
			End If
		
		End If
	  End If ' if Day
		Exit Function
HANDLER:
		Call RegistrarYGenerarError2(Err, Error, NOMBRE_APLICACION, "Clase Formulario - Método DarPase", "",nombreUsuario)
		Msgbox "ClaseFormulario - DarPase: " & Error$ & " " & Erl
		DarPase = Error$
		Exit Function
	End Function
	
'******************************************************************************************************************
	Sub cambiarXML(doc As NotesDocument, infoNodo As InfoNodo, unidadEnviar As String)
		On Error Goto Handler
		Dim anteriorSegmentoXML As String
		Dim nuevoSegmentoXML As String
		Dim xmlRecorrido As String
		Dim unidad As NotesDocument
		Set unidad = dbOrgan.Getview("BusquedaUnixNro").Getdocumentbykey(unidadEnviar, True)
%REM
	-------------------- TODO: hacer esto -----------------------------------------
	If (infoNodo.GetUnidad() =  MXGRAPH_ID_UNIDAD_CUALQUIERA ) Then
		
		anteriorSegmentoXML = {<U_Cualquiera label="Cualquier unidad" description="" href="" numSeccion="}+CStr(infoNodo.getSeccion())+{" numDias="}+CStr(infoNodo.getDias())+{" numHoras="}+CStr(infoNodo.getHoras())+{" id="} +CStr(infoNodo.getIdElemento())+ {">}
		nuevoSegmentoXML = {<U_Cualquiera label="}+unidad.Getitemvalue("sUnidad")(0)+{" description="" href="" numSeccion="}+CStr(infoNodo.getSeccion())+{" numDias="}+CStr(infoNodo.getDias())+{" numHoras="}+CStr(infoNodo.getHoras())+{" id="} +CStr(infoNodo.getIdElemento())+ {">}
		xmlRecurrido = doc.Getitemvalue("mxXML")(0)
	ElseIf unidadDestino = MXGRAPH_ID_UNIDAD_INICIAL Then
		anteriorSegmentoXML = {<U_Superior label="Unidad superior" description="" href="" numSeccion="}+CStr(infoNodo.getSeccion())+{" id="66">}
		nuevoSegmentoXML = {<U_Superior label="}+unidad.Getitemvalue("sUnidad")(0)+{" description="" href="" numSeccion="}+CStr(infoNodo.getSeccion())+{" numDias="}+CStr(infoNodo.getDias())+{" numHoras="}+CStr(infoNodo.getHoras())+{" id="} +CStr(infoNodo.getIdElemento())+ {">}
		mlRecurrido = doc.Getitemvalue("mxXML")(0)
		
	End If
	
	xmlRecurrido = Replace (xmlRecurrido,anteriorSegmentoXML,nuevoSegmentoXML)
	Call doc.replaceItemValue("mxXML",xmlRecurrido)
	Call doc.save(True,False)
%ENDREM
		Exit Sub
Handler:
		Call RegistrarYGenerarError2(Err, Error, NOMBRE_APLICACION, "Clase Formulario - Método CambiarXML", "",nombreUsuario)
		Msgbox "ClaseFormulario - CambiarXML: " & Error$ & " " & Erl
	End Sub
	'******************************************************************************************************************
	
	
	Public Function Finalizar(razonFinalizacion As String) As String
		On Error Goto HANDLER
		If ((doc.getItemValue("sFormBloqueado")(0) <> "Si") And (doc.getItemValue("sFormBloqueadoForm")(0) <> "Si")) Then
			Dim vDestinatario As New Vector(0)
			Dim asunto As String
			Dim link As String
			
			'VALIDACIONES
			'**************************************************
			Call checkFinalizar()
			'**************************************************
			
			'Seteo el estado a Finalizado
			Call doc.ReplaceItemValue(CAMPO_FORMULARIO_ESTADO, ESTADO_FORM_FINALIZADO)	
			'Seteo la fecha en que se finalizó
			Call doc.ReplaceItemValue(CAMPO_FORMULARIO_FECHAFINALIZACION, Now)
			'Seteo el usuario que finalizó el trámite
			Call doc.ReplaceItemValue(CAMPO_FORMULARIO_USUARIOFINALIZACION, usuario.NombreUsuario)	
			'Seteo la razon de finalizacion
			Call doc.ReplaceItemValue(CAMPO_FORMULARIO_RAZONFINALIZACION, razonFinalizacion)
			
			'Mandamos un mail al usuario que inicio el tramite si no es el anonymous
			If conf.NotificacionFinalizar And doc.hasItem(CAMPO_FORMULARIO_USUARIOINICIO)Then
				vDestinatario.values = doc.GetItemValue(CAMPO_FORMULARIO_USUARIOINICIO)
				asunto = "Notificación de Formulario Finalizado"
				link = igDocConf.Protocolo + "://" + conf.Hosts.getElement(1) + ":" + igDocConf.Puerto + "/" + Replace(doc.Parentdatabase.Filepath, {\}, "/") + "/AbrirForm?OpenAgent&id=" + doc.UniversalID + "&numero=" + doc.GetItemValue(CAMPO_FORMULARIO_NUMERO)(0) + "&codigo=" + doc.GetItemValue(CAMPO_FORMULARIO_CODIGOFORM)(0)
				Call enviarMail(vDestinatario, asunto, link, "Finalizar")
			End If
			
			' Seteo el nodo fin del flujo como parte del recorrido
			Call agregarValor(doc, CAMPO_FORMULARIO_RECORRIDO_IDS, Me.obtenerIdFin())
			'Agrego la nueva fecha de envío
			Call agregarValor(doc, CAMPO_FORMULARIO_FECHASENVIO, Now)
			
			'INTEGRACION FORMULARIO-FORMULARIO
			'**************************************************
			If (doc.GetItemValue(CAMPO_INT_FORM_EXIST_PADRE)(0) = "Si") Then
				Call finalizarFormIntegrado(doc, dbFormularios)
			End If
			'**************************************************

			'Guardo los cambios
			Call doc.Save(True, False)
			' Actualizo el indice para desplegar el formulario en las bandejas
			Call actualizarIndice(doc.GetItemValue(CAMPO_FORMULARIO_NUMERO)(0),dbFormularios)
			
			Finalizar = ""
			Me.Auditoria.numeroDoc = doc.Getitemvalue("numero")(0)
			Me.Auditoria.operacion = "acc_finalizar_form"
			Me.Auditoria.paramOperacion = razonFinalizacion
			Call Auditoria.registrar
		End if
			
		Exit Function
HANDLER:
		Call RegistrarYGenerarError2(Err, Error, NOMBRE_APLICACION, "Clase Formulario - Método Finalizar", "",nombreUsuario)
		Msgbox "ClaseFormulario - Finalizar: " & Error$ & " " & Erl
		Finalizar = Error$
		Exit Function
	End Function
	
	
'******************************************************************************************************************
	
	
	Public Function Archivar(Byval razon As String) As String
		On Error Goto HANDLER
		
		Dim vDestinatario As New Vector(0)
		Dim asunto As String
		Dim link As String
		Dim newId As String
		Dim newLink As String
		Dim unidad As UnidadFormClass
		Dim indiceF As String, dbArchivoTemplate As NotesDatabase
		
		
		'VALIDACIONES
		'**************************************************
		Call checkArchivar
		'**************************************************
		'Seteo la razón de archivar el formulario
		Call doc.ReplaceItemValue(CAMPO_FORMULARIO_RAZON_ARCHIVAR, razon)
		'Cambio el estado del formulario a "archivado"
		Call doc.ReplaceItemValue(CAMPO_FORMULARIO_ESTADO, ESTADO_FORM_ARCHIVADO)
		
		indiceF = strleft(UCase(StrRight(dbFormularios.Filepath,"_")),".NSF")
		
		If conf.Claves.isMember(CLAVE_DBARCHIVO & "_" & indiceF, 1, false) Then
			Set dbArchivo = conf.ReferenciarBaseDeDatos(CLAVE_DBARCHIVO & "_" & indiceF)
		Else
			Set dbARchivoTemplate = conf.ReferenciarBaseDeDatos(CLAVE_DBARCHIVO)
			Set dbArchivo = dbArchivoTemplate.Createcopy(dbArchivoTemplate.Server, StrLeft(dbArchivoTemplate.Filepath,".nsf") & "_" & indiceF & ".nsf")
			Set vAux = conf.Claves
			Call vAux.insertElement(CLAVE_DBARCHIVO & "_" & indiceF, vAux.cantElem+1)
			Set conf.Claves = vAux
			
			Set vAux = conf.Servers
			Call vAux.insertElement(dbArchivo.Server, vAux.cantElem+1) 
			Set conf.Servers = vAux
			
			Set vAux = conf.Rutas
			Call vAux.insertElement(dbArchivo.filepath, vAux.cantElem+1) 
			Set conf.Rutas = vAux
			
			Set vAux = conf.Hosts
			Call vAux.insertElement(vAux.getElement(1), vAux.cantElem+1)
			Set conf.Hosts = vAux
			
			Call conf.save()
			Set igdocConf = New IGDocConfig
			
			Dim igT As NotesDocument, igAR As NotesDocument
			Set igT = dbArchivoTemplate.Getprofiledocument("IGDOCCONFIG")
			Set igAR = dbArchivo.Getprofiledocument("IGDOCCONFIG")
			Call igT.Copyallitems(igAR, true)
			Call igAR.Save(true, false)
		End If
		'Se mueve el formulario a la base de datos de archivo
		newId = MoverFormToArchivo(dbArchivo)
		
		' Mandamos un mail al usuario que inició el trámite si no es el Anonymous
		If conf.NotificacionArchivar And doc.HasItem(CAMPO_FORMULARIO_USUARIOINICIO) Then		
			vDestinatario.Values = doc.GetItemValue(CAMPO_FORMULARIO_USUARIOINICIO)
			asunto = "Notificación de Formulario Archivado"
			link = igDocConf.Protocolo + "://" + conf.Hosts.getElement(1) + ":" + igDocConf.Puerto + "/" + Replace(doc.Parentdatabase.Filepath, {\}, "/") + "/AbrirForm?OpenAgent&id=" + doc.UniversalID + "&numero=" + doc.GetItemValue(CAMPO_FORMULARIO_NUMERO)(0) + "&codigo=" + doc.GetItemValue(CAMPO_FORMULARIO_CODIGOFORM)(0)
			Call enviarMail(vDestinatario, asunto, link, "Archivar")
		End If
		
		'INTEGRACION FORMULARIO-FORMULARIO
		'**************************************************
		If (doc.GetItemValue(CAMPO_INT_FORM_EXIST_PADRE)(0) = "Si") Then
			newLink = igDocConf.Protocolo + "://" + conf.Hosts.getElement(1) + ":" + igDocConf.Puerto + "/" + Replace(dbArchivo.Filepath, {\}, "/") + "/0/" & newId & "?OpenDocument"
			Call archivarFormIntegrado(doc, dbFormularios, newLink)
		End If
		'**************************************************
		
		'Guardo los cambios
		Call doc.Save(True, False)
		' Actualizo el indice para desplegar el formulario en las bandejas
		'Call actualizarIndice(doc.GetItemValue(CAMPO_FORMULARIO_NUMERO)(0),dbFormularios)
		Call borrarIndice(doc.GetItemValue(CAMPO_FORMULARIO_NUMERO)(0))
		Archivar = ""
		Me.Auditoria.numeroDoc = doc.Getitemvalue("numero")(0)
		Me.Auditoria.operacion = "acc_archivar_form"
		Call Auditoria.registrar
		Exit Function
HANDLER:
		Call RegistrarYGenerarError2(Err, Error, NOMBRE_APLICACION, "Clase Formulario - Método Archivar", "",nombreUsuario)
		Msgbox "ClaseFormulario - Archivar: " & Error$ & " " & Erl
		Archivar = Error$
		Exit Function
	End Function
	
	
'******************************************************************************************************************
	
	
	Public Function Reservar As String
		On Error Goto HANDLER
		Dim nNotes As NotesName
		Dim ni As NotesItem
		'VALIDACIONES
		'**************************************************
		'Valido que la unidad actual tenga acceso al formulario
		Call checkAccesoOficina(doc.GetItemValue(CAMPO_FORMULARIO_UNIDADACTUAL)(0), _
		doc.GetItemValue(CAMPO_FORMULARIO_CODIGOFORM)(0))
		
		'Valido que el usuario esté en la  oficina actual
		Call checkUsuarioEnOficinaActual
		'Valido que el estado del formulario sea "En unidad"
		Call checkFormularioEstado(ESTADO_FORM_ENUNIDAD)
		'Valido que el usuario tenga el rol Editor
		If Not usuario.TieneRolForm(doc.GetItemValue(CAMPO_FORMULARIO_CODIGOFORM)(0), _
		doc.GetItemValue(CAMPO_FORMULARIO_UNIDADACTUAL)(0), ROL_EDITOR) Then
			Error ERROR_ROL_USUARIO_EDITOR, MSG_ERROR_ROL_USUARIO_EDITOR
		End If
		'**************************************************
		
		'Seteo el campo "ReservadoPor" con el usuario
		Call doc.ReplaceItemValue(CAMPO_FORMULARIO_RESERVADOPOR, usuario.NombreUsuario)
		'Seteo el formulario como Reservado
		Call doc.ReplaceItemValue(CAMPO_FORMULARIO_ESTADO, ESTADO_FORM_RESERVADO)
		If doc.Hasitem("Autor") Then
			doc.Removeitem("Autor")
		End If
		Set nNotes = New NotesName(usuario.NombreUsuario)
		Set ni = New NotesItem(doc,"Autor",nNotes.Canonical,AUTHORS)
		Call doc.Save(True, False)
		' Actualizo el indice para desplegar el formulario en las bandejas
		Call actualizarIndice(doc.GetItemValue(CAMPO_FORMULARIO_NUMERO)(0),dbFormularios)
		
		Reservar = ""
		Me.Auditoria.numeroDoc = doc.Getitemvalue("numero")(0)
		Me.Auditoria.operacion = "acc_reservar_form"
		Call Auditoria.registrar
		Exit Function
HANDLER:
		Call RegistrarYGenerarError2(Err, Error, NOMBRE_APLICACION, "Clase Formulario - Método Reservar", "",nombreUsuario)
		Msgbox "ClaseFormulario - Reservar: " & Error$ & " " & Erl
		Reservar = Error$
		Exit Function
	End Function
	
	
'******************************************************************************************************************
	
	
	Public Function Liberar As String
		On Error Goto HANDLER
		
		'VALIDACIONES
		'**************************************************
		Call checkLiberar()
		'**************************************************
		
		'Seteo el estado a "En unidad"
		Call doc.ReplaceItemValue(CAMPO_FORMULARIO_ESTADO, ESTADO_FORM_ENUNIDAD)		
		'Seteo el campo ReservadoPor a ""
		Call doc.ReplaceItemValue(CAMPO_FORMULARIO_RESERVADOPOR, "")
		If doc.Hasitem("Autor") Then
			doc.Removeitem("Autor")
		End If
		
		'Guardo los cambios
		Call doc.Save(True, False)		
		' Actualizo el indice para desplegar el formulario en las bandejas
		Call actualizarIndice(doc.GetItemValue(CAMPO_FORMULARIO_NUMERO)(0),dbFormularios)	
		
		Liberar = ""
		Me.Auditoria.numeroDoc = doc.Getitemvalue("numero")(0)
		Me.Auditoria.operacion = "acc_liberar_form"
		Call Auditoria.registrar
		Exit Function
HANDLER:
		Call RegistrarYGenerarError2(Err, Error, NOMBRE_APLICACION, "Clase Formulario - Método Liberar", "",nombreUsuario)
		Msgbox "ClaseFormulario - Liberar: " & Error$ & " " & Erl
		Liberar = Error$
		Exit Function
	End Function


'******************************************************************************************************************


	Public Function IntegrarFormulario(UniversalID As String, EsBloqueante As String, Seccion As String) As String
		On Error GoTo Handler
		Dim nroUnidad As String
		Dim formato As String
		Dim numero As String
		Dim formato_form As String
		Dim secuencia As Long
		Dim vLectoresPermanentes As New Vector(0)
		Dim visibilidadForm As String
		Dim fechaActual As NotesDateTime
		Dim docId As String
		Dim session As New NotesSession
		Dim xml As String		
		Dim stream As NotesStream
		Dim mimeXML As NotesMIMEEntity

		Set fechaActual = New NotesDateTime("")
		fechaActual.Setnow

		formato_form = FORMATO_FORM_CODIGO
		codigoFormulario = doc.GetItemValue(CAMPO_FORMULARIO_CODIGOFORM)(0)

		'VALIDACIONES
		'************************************************
		If IsNull(codigoFormulario) Then
			Error ERROR_COD_FORM_NOTHING, MSG_ERROR_COD_FORM_NOTHING	
		End If
		'************************************************

		'Cargo la definición del formulario según el código
		Set docDefFormulario = vistaDefFormCodigo.GetDocumentByKey(CStr(codigoFormulario), True)
		Call checkCrear()		

		'NUMERACIÓN
		'**********************************************************************************************
		'Obtengo el formato de la numeración del formulario, a partir de la definición del formulario
		formato = docDefFormulario.GetItemValue(CAMPO_FORMULARIO_FORMATONUMERACION)(0)
		formato_form = conf.SustituirAnio(formato_form)
		formato_form = conf.SustituirCodigoFormulario(formato_form, doc.GetItemValue(CAMPO_FORMULARIO_CODIGOFORM)(0))

		'Obtengo el código de la unidad
		nroUnidad = doc.GetItemValue(CAMPO_FORMULARIO_UNIDADACTUAL)(0)
		'Obtengo el número para sustituir los la secuencia de numerales
		secuencia = conf.PedirNumero(formato_form)
		'Largo de la secuencia
		largoSec = Len(CStr(secuencia))
		'Sustituyo la secuencia
		numero = conf.SustituirNumeroSecuencia(formato, secuencia)
		'Sustituyo el indicador de año por el año actual
		numero = conf.SustituirAnio(numero)
		'Sustituir el codigo de formulario
		numero = conf.SustituirCodigoFormulario(numero, doc.GetItemValue(CAMPO_FORMULARIO_CODIGOFORM)(0))
		'Sustituir el codigo de la unidad
		numero = conf.SustituirCodigoUnidad(numero, nroUnidad)

		'Seteo la numeración del formulario en el documento del formulario
		Call doc.ReplaceItemValue(CAMPO_FORMULARIO_NUMERO, numero)

		'**********************************************************************************************
		If docDefFormulario.GetItemValue(CAMPO_DEFFORMULARIO_VISIBILIDAD)(0) = "Interno" Then

			'Seteo el usuario de inicio 
			Call doc.ReplaceItemValue(CAMPO_FORMULARIO_USUARIOINICIO, usuario.NombreUsuario)

			'Seteo la unidad de inicio
			Call doc.ReplaceItemValue(CAMPO_FORMULARIO_UNIDADINICIO, nroUnidad)

			session.ConvertMime= False
			Set mimeXML = docDefFormulario.Getmimeentity(CAMPO_DEFFORMULARIO_XML)
			If Not mimeXML Is Nothing Then
				Set stream = session.CreateStream			
				Call mimeXML.GetContentAsText(stream)			
				stream.Position=0
				xml = stream.ReadText
			Else
				xml = docDefFormulario.Getitemvalue(CAMPO_DEFFORMULARIO_XML)(0)
			End If

			If docDefFormulario.HasItem(CAMPO_DEFFORMULARIO_XML) And xml <> "" Then
				'Relativo a MxGraph:
				Dim recorrido As New Vector(0)
				Dim infoNodo As InfoNodo
				Dim infoNodoNext As InfoNodo
				Dim idNodoPrimeraUnidad As String
				Dim numeroPrimeraUnidad
				Set infoNodo = Me.obtenerUnidadInicial()
				idNodoPrimeraUnidad = infoNodo.GetIdElemento()
				numeroPrimeraUnidad = infoNodo.GetUnidad()
				Call doc.ReplaceItemValue(CAMPO_FORMULARIO_ID_ELEMENTO, idNodoPrimeraUnidad)
				Call doc.ReplaceItemValue(CAMPO_FORMULARIO_ID_ELEMENTO_INICIO, idNodoPrimeraUnidad)

				Call agregarValor(doc, CAMPO_FORMULARIO_RECORRIDO_IDS, idNodoPrimeraUnidad)

				' ************* Plazos para formularios ************'
				' Agrego fecha y hora del vencimiento con formato yyyy-mm-dd-hh
				fechaVencimientoSLA = ""

				fechaActual.Adjustday(infoNodo.getDias())
				fechaActual.AdjustHour(infoNodo.getHoras())

				Call doc.Replaceitemvalue(CAMPO_FORMULARIO_ESTADO_VENCIMIENTO, "Pendiente")
				yyyy = Year(fechaActual.Dateonly)
				mm = Month(fechaActual.Dateonly)

				dd = Day(fechaActual.Dateonly)
				hh = Hour(fechaActual.Timeonly)
				fechaVencimientoSLA = yyyy & "-" & mm &"-" & dd &"-" & hh
				fechaLimiteSeccionSLA = infoNodo.getDias()&" d - "& infoNodo.getHoras() & " h"
				Call doc.Replaceitemvalue(CAMPO_FORMULARIO_FECHA_VENCIMIENTO, fechaVencimientoSLA)
				Call agregarValor(doc, CAMPO_FORMULARIO_TIEMPO_LIMITE_SECCION, fechaLimiteSeccionSLA)
				' ************* Fin de Plazos           ************'
				'MsgBox "1: " & doc.getItemValue("sAltaTarjeta")(0)
				'Chequeo si el próximo nodo es un idGrupo
				If (Me.ExisteSiguiente(doc.GetItemValue(CAMPO_FORMULARIO_ID_ELEMENTO)(0))) Then
					Set infoNodoNext = Me.obtenerSiguiente(doc.GetItemValue(CAMPO_FORMULARIO_ID_ELEMENTO)(0))
					If (infoNodoNext.getUnidad() = "@idGrupo") Then
						Call doc.Replaceitemvalue("codMxGrupo", infoNodoNext.getIdGrupo())
					End If
					' Guardo la unidad del próximao pase
					Call doc.Replaceitemvalue(CAMPO_FORMULARIO_ID_ELEMENTO_PROXIMAU, infoNodoNext.getUnidad())
				End If
			End If
			If Not stream Is Nothing Then
				Call stream.Close
			End If
			session.ConvertMime=True
		End If

		Call agregarValor(doc, CAMPO_FORMULARIO_RECORRIDO_UNIDADES, nroUnidad)
		Call agregarValor(doc, CAMPO_FORMULARIO_USUARIORECORRIDO, usuario.NombreUsuario)

		'Seteo la fecha de creación
		Call doc.ReplaceItemValue(CAMPO_FORMULARIO_FECHACREACION, Now)

		'Agrego la fecha de recepcion
		Call agregarValor(doc, CAMPO_FORMULARIO_FECHASRECEPCION, Now)

		'Seteo la sección
		Call doc.ReplaceItemValue(CAMPO_FORMULARIO_SECCION, 1)
		Call agregarValor(doc, CAMPO_FORMULARIO_RECORRIDO_SECCIONES, 1)

		'Seteo el estado en unidad y la unidad
		Call doc.ReplaceItemValue(CAMPO_FORMULARIO_ESTADO, ESTADO_FORM_ENUNIDAD)
		Call doc.ReplaceItemValue(CAMPO_FORMULARIO_UNIDAD, nroUnidad)

		' Seteo los campos a firmar de la seccion 1
		'Call doc.ReplaceItemValue(CAMPO_FORMULARIO_CAMPOS_A_FIRMAR + "1", doc.GetItemValue(CAMPO_FORMULARIO_CAMPOS_A_FIRMAR))

		'Seteo los lectores permanentes
		Call vLectoresPermanentes.insertElement(FRM_ROL_DESARROLLO, vLectoresPermanentes.CantElem + 1)
		Call vLectoresPermanentes.insertElement(FRM_ROL_VER_TODOS, vLectoresPermanentes.CantElem + 1)
		Set itemLectPerm = New NotesItem(doc, CAMPO_FORMULARIO_LECTORESPERMANENTES, vLectoresPermanentes.Values, READERS)

		'Seteo el campo lectores con la unidad creadora
		Call agregarUnidadLectora(doc, doc.GetItemValue(CAMPO_FORMULARIO_UNIDADACTUAL)(0))

		' Obtengo los nombres de los archivos adjuntos del documento
		Set vNombresArchivos = New Vector(0)
		vNombresArchivos.values = Evaluate({@AttachmentNames}, doc)

		' Elimino los nombres de archivos adjuntos que ya estuvieran en el documento
		For i = 1 To 1
			If doc.HasItem(CAMPO_FORMULARIO_ARCHIVOS_ADJUNTOS & CStr(i)) Then
				Set vNombresArchivosTemp = New Vector(0)
				vNombresArchivosTemp.Values = doc.GetItemValue(CAMPO_FORMULARIO_ARCHIVOS_ADJUNTOS & CStr(i))
				For j = 1 To vNombresArchivosTemp.CantElem
					nombreArchivo = CStr(vNombresArchivosTemp.getElement(j))
					If vNombresArchivos.IsMember(nombreArchivo, pos, True) Then
						' Tengo que borrar el nombre de un archivo de una sección anterior
						vNombresArchivos.DeleteElement(pos)
					End If
				Next
			End If
		Next

		' Reemplazo el campo CAMPO_FORMULARIO_ARCHIVOS_ADJUNTOS con los nombres de los archivos adjuntos de la sección
		Call doc.ReplaceItemValue(CAMPO_FORMULARIO_ARCHIVOS_ADJUNTOS & CStr(1), vNombresArchivos.Values)

		'INTEGRACION FORMULARIO - FORMULARIO
		'**********************************************************************************************
		'Obtengo formulario padre
		Dim docPadre As NotesDocument
		Set docPadre = dbFormularios.GetDocumentByUNID(UniversalID)

		'Cargo campos de formulario padre en formulario hijo, según configuración del padre
		Dim docDefPadre As NotesDocument
		Set docDefPadre = vistaDefFormCodigo.GetDocumentByKey(docPadre.GetItemValue(CAMPO_FORMULARIO_CODIGOFORM)(0), True)
		Dim campos As New Vector(0)
		campos.values = docDefPadre.GetItemValue(CAMPO_DEF_FORM_CAMPOS_FORM)

		'Copio campos de padre a hijo
		ForAll campo In campos.values
			Call doc.ReplaceItemValue(campo, docPadre.getItemValue(campo)(0))
		End ForAll

		'Cargo campos en formulario hijo
		Call doc.ReplaceItemValue(CAMPO_INT_FORM_EXIST_PADRE, "Si")
		Call doc.ReplaceItemValue(CAMPO_INT_FORM_NRO_FORM_PADRE, docPadre.GetItemValue(CAMPO_FORMULARIO_NUMERO)(0))
		Call doc.Replaceitemvalue(CAMPO_INT_FORM_SEC_FORM_PADRE, seccion)

		'Cargo campos en formulario padre
		Dim nrosForms As String
		Dim unidades As String
		Dim nombres As String
		Dim bloqueantes As String
		Dim secciones As String
		Dim fechasCreac As String
		Dim urls As String

		Dim nroForm As String
		Dim unidad As String
		Dim docUnidad As NotesDocument
		Dim nomForm As String
		Dim fechaCr As String

		nrosForms = docPadre.GetItemValue(CAMPO_INT_FORM_NRO_FORM_HIJO)(0)
		unidades = docPadre.GetItemValue(CAMPO_INT_FORM_UNIDAD_HIJO)(0)
		nombres	= docPadre.GetItemValue(CAMPO_INT_FORM_NOM_FORM_HIJO)(0)
		bloqueantes = docPadre.GetItemValue(CAMPO_INT_FORM_BLOQUEANTE_HIJO)(0)
		secciones = docPadre.GetItemValue(CAMPO_INT_FORM_SEC_HIJO)(0)
		fechasCreac = docPadre.GetItemValue(CAMPO_INT_FORM_FECHA_CREAC_HIJO)(0)
		urls = docPadre.GetItemValue(CAMPO_INT_FORM_URL_HIJO)(0)

		nroForm = doc.GetItemValue(CAMPO_FORMULARIO_NUMERO)(0)
		Set docUnidad = dbOrgan.Getview(NOMBRE_VISTA_UNIDADES_POR_NUMERO).GetDocumentByKey(doc.GetItemValue(CAMPO_FORMULARIO_UNIDADACTUAL)(0))
		unidad = docUnidad.GetItemValue(CAMPO_UNIDAD_NOMBRE)(0)
		nomForm = doc.GetItemValue(CAMPO_FORMULARIO_NOMBRE)(0)
		fechaCr = doc.GetItemValue(CAMPO_FORMULARIO_FECHACREACION)(0)

		If (nrosForms = "") Then
			Call docPadre.ReplaceItemValue(CAMPO_INT_FORM_NRO_FORM_HIJO, nroForm)
			Call docPadre.ReplaceItemValue(CAMPO_INT_FORM_UNIDAD_HIJO, unidad)
			Call docPadre.ReplaceItemValue(CAMPO_INT_FORM_NOM_FORM_HIJO, nomForm)
			Call docPadre.ReplaceItemValue(CAMPO_INT_FORM_BLOQUEANTE_HIJO, EsBloqueante)
			Call docPadre.ReplaceItemValue(CAMPO_INT_FORM_SEC_HIJO, seccion)
			Call docPadre.ReplaceItemValue(CAMPO_INT_FORM_FECHA_CREAC_HIJO, fechaCr)
			Call docPadre.ReplaceItemValue(CAMPO_INT_FORM_URL_HIJO, "_")
		Else
			Call docPadre.ReplaceItemValue(CAMPO_INT_FORM_NRO_FORM_HIJO, nrosForms & ";" & nroForm)
			Call docPadre.ReplaceItemValue(CAMPO_INT_FORM_UNIDAD_HIJO, unidades & ";" & unidad)
			Call docPadre.ReplaceItemValue(CAMPO_INT_FORM_NOM_FORM_HIJO, nombres & ";" & nomForm)
			Call docPadre.ReplaceItemValue(CAMPO_INT_FORM_BLOQUEANTE_HIJO, bloqueantes & ";" & EsBloqueante)
			Call docPadre.ReplaceItemValue(CAMPO_INT_FORM_SEC_HIJO, secciones & ";" & seccion)
			Call docPadre.ReplaceItemValue(CAMPO_INT_FORM_FECHA_CREAC_HIJO, fechasCreac & ";" & fechaCr)
			Call docPadre.ReplaceItemValue(CAMPO_INT_FORM_URL_HIJO, urls & ";_")
		End If

		'Bloqueo de formulario
		If (EsBloqueante = "Si") Then
			Call docPadre.ReplaceItemValue(CAMPO_INT_FORM_BLOQUEADO, "Si")
		End If
%REM
		MsgBox "campos padre:"
		MsgBox docPadre.GetItemValue(CAMPO_INT_FORM_NRO_FORM_HIJO)(0)
		MsgBox docPadre.GetItemValue(CAMPO_INT_FORM_UNIDAD_HIJO)(0)
		MsgBox docPadre.GetItemValue(CAMPO_INT_FORM_NOM_FORM_HIJO)(0)
		MsgBox docPadre.GetItemValue(CAMPO_INT_FORM_BLOQUEANTE_HIJO)(0)
		MsgBox docPadre.GetItemValue(CAMPO_INT_FORM_SEC_HIJO)(0)
		MsgBox docPadre.GetItemValue(CAMPO_INT_FORM_FECHA_CREAC_HIJO)(0)
		MsgBox docPadre.GetItemValue(CAMPO_INT_FORM_URL_HIJO)(0)

		MsgBox "campos hijo:"
		MsgBox doc.GetItemValue(CAMPO_INT_FORM_EXIST_PADRE)(0)
		MsgBox doc.GetItemValue(CAMPO_INT_FORM_NRO_FORM_PADRE)(0)
		MsgBox doc.GetItemValue(CAMPO_INT_FORM_SEC_FORM_PADRE)(0)
		ForAll campo In campos.values
			MsgBox doc.GetItemValue(campo)(0)
		End ForAll
%End Rem
		'Guardo formulario padre
		Call docPadre.Save(True, False)
		'**********************************************************************************************

		'Salvo el formulario
		Call doc.Save(True, False)
		' Actualizo el indice para desplegar el formulario en las bandejas
		Call actualizarIndice(numero, dbFormularios)
		'Audito la Accion
		Me.Auditoria.numeroDoc = numero
		Me.Auditoria.paramOperacion = doc.Universalid
		Me.Auditoria.operacion = "acc_integrar_formulario_form"
		Call Auditoria.registrar

		IntegrarFormulario = ""
		Exit Function
	Handler:
		MsgBox "ClaseFormulario - IntegrarFormulario: " & Error$ & " " & Erl
		IntegrarFormulario = Error$
		Exit Function
	End Function


'******************************************************************************************************************	
	
'FUNCIONES Y PROCEDIMIENTOS PRIVADOS
	
'******************************************************************************************************************
	
	Private Sub checkGuardar
		On Error Goto HANDLER
		'Control de Roles
		If Not usuario.TieneRolForm(doc.GetItemValue(CAMPO_FORMULARIO_CODIGOFORM)(0),_
		doc.GetItemValue(CAMPO_FORMULARIO_UNIDADACTUAL)(0),ROL_EDITOR) Then
			Error ERROR_ROL_USUARIO_EDITOR,MSG_ERROR_ROL_USUARIO_EDITOR
		End If
		
		'Valido que el estado del formulario esté reservado
		Call checkFormularioEstado(ESTADO_FORM_RESERVADO)
		
		'Valido que el formulario esté reservado por el usuario
		Call checkReservadoPorUsuario()
		
		Exit Sub
HANDLER:
		If Not usuario Is Nothing Then
			Call RegistrarYGenerarError2(Err,Error,NOMBRE_APLICACION,"Clase Formulario - Sub checkGuardar","",usuario.nombreUsuario)	
		Else
			Call RegistrarYGenerarError2(Err,Error,NOMBRE_APLICACION,"Clase Formulario - Sub checkGuardar","","")	
		End If
		Exit Sub
	End Sub
	
'******************************************************************************************************************
	Private Sub checkArchivar
		On Error Goto HANDLER
		
		' Control de Roles 
		If Not usuario.TieneRolForm(doc.GetItemValue(CAMPO_FORMULARIO_CODIGOFORM)(0), _
		doc.GetItemValue(CAMPO_FORMULARIO_UNIDADACTUAL)(0), ROL_ARCHIVAR) Then
			Error ERROR_ROL_USUARIO_ARCHIVAR, MSG_ERROR_ROL_USUARIO_ARCHIVAR
		End If
		
		' Valida que el usuario esté en la  oficina actual
		Call checkUsuarioEnOficinaActual
		' Valida que el formulario tenga el estado Finalizado
		Call checkFormularioEstado(ESTADO_FORM_FINALIZADO)
		
		' Controlo que la unidad esté habilitada para archivar
		'Set unidad = New UnidadFormClass(doc.GetItemValue(CAMPO_FORMULARIO_UNIDADACTUAL)(0))
		'If Not unidad.UnidadHabilitadaArchivar Then
		'	Error ERROR_UNIDAD_ARCHIVAR, MSG_ERROR_UNIDAD_ARCHIVAR_1 & " " & doc.GetItemValue(CAMPO_FORMULARIO_UNIDADACTUAL)(0)
		'End If
		
		Exit Sub
HANDLER:
		If Not usuario Is Nothing Then
			Call RegistrarYGenerarError2(Err,Error,NOMBRE_APLICACION,"Clase Formulario - Sub checkArchivar","",usuario.nombreUsuario)	
		Else
			Call RegistrarYGenerarError2(Err,Error,NOMBRE_APLICACION,"Clase Formulario - Sub checkArchivar","","")	
		End If
		Exit Sub
	End Sub
	
'******************************************************************************************************************
	Private Sub checkFinalizar
		On Error Goto HANDLER
		'Valido que el usuario tenga rol finalizar
		If Not usuario.TieneRolForm(doc.GetItemValue(CAMPO_FORMULARIO_CODIGOFORM)(0), _
		doc.GetItemValue(CAMPO_FORMULARIO_UNIDADACTUAL)(0), ROL_FINALIZAR) Then
			Error ERROR_ROL_USUARIO_FINALIZAR, MSG_ERROR_ROL_USUARIO_FINALIZAR
		End If
		
		'Valido que el estado del formulario sea Reservado
		Call checkFormularioEstado(ESTADO_FORM_RESERVADO)
		'Valido que el usuario sea quien reservó el formulario
		Call checkReservadoPorUsuario
		
		Exit Sub
HANDLER:
		If Not usuario Is Nothing Then
			Call RegistrarYGenerarError2(Err,Error,NOMBRE_APLICACION,"Clase Formulario - Sub checkFinalizar","",usuario.nombreUsuario)	
		Else
			Call RegistrarYGenerarError2(Err,Error,NOMBRE_APLICACION,"Clase Formulario - Sub checkFinalizar","","")	
		End If
		Exit Sub
	End Sub
	'******************************************************************************************************************	
	
	Private Sub checkDesfinalizar()
		On Error GoTo HANDLER
		
		'Valido que la oficina tenga acceso al formuario
		Call checkAccesoOficina(doc.GetItemValue(CAMPO_FORMULARIO_UNIDADACTUAL)(0), doc.GetItemValue(CAMPO_FORMULARIO_CODIGOFORM)(0))
		
		'Valido que el usuario esté en la oficina actual
		Call checkUsuarioEnOficinaActual
		
		'Valida que el formulario tenga el estado Finalizado
		Call checkFormularioEstado(ESTADO_FORM_FINALIZADO)
		
		'Valido que el usuario tenga rol finalizar
		If Not usuario.TieneRolForm(doc.GetItemValue(CAMPO_FORMULARIO_CODIGOFORM)(0), _
		doc.GetItemValue(CAMPO_FORMULARIO_UNIDADACTUAL)(0), ROL_FINALIZAR) Then
			Error ERROR_ROL_USUARIO_FINALIZAR, MSG_ERROR_ROL_USUARIO_FINALIZAR
		End If
		
		Exit Sub
HANDLER:
		If Not usuario Is Nothing Then
			Call RegistrarYGenerarError2(Err,Error,NOMBRE_APLICACION,"Clase Formulario - Sub checkDesfinalizar","",usuario.nombreUsuario)	
		Else
			Call RegistrarYGenerarError2(Err,Error,NOMBRE_APLICACION,"Clase Formulario - Sub checkDesfinalizar","","")	
		End If
		Exit Sub
	End Sub
'******************************************************************************************************************
	Private Sub checkDevolver()
		On Error Goto HANDLER
		'Valido que no sea la primer ni segunda seccion
		If doc.GetItemValue(CAMPO_FORMULARIO_SECCION)(0) = 1 Then
			Error ERROR_FORMULARIO_SECCION, MSG_ERROR_FORMULARIO_SECCION
		End If
		Dim sNombreCampoInforme As String
		
		
		'Valido que si está en la sección 2, el formulario haya sido firmado en la 
		'primera y además que tenga visibilidad interna
		'Valido que no sea la primer ni segunda seccion
		If doc.GetItemValue(CAMPO_FORMULARIO_SECCION)(0) = 2 And Not doc.Getitemvalue(CAMPO_FORMULARIO_FIRMARALENVIAR)(0)="Si" And Not doc.Getitemvalue(CAMPO_FORMULARIO_VISIBILIDAD)(0)="Interno"  Then
			Error ERROR_FORMULARIO_SECCION, MSG_ERROR_FORMULARIO_SECCION
		End If		
		'Valida si tiene un pedido de informe en la seccion que esta
		sNombreCampoInforme = "sPedidosInforme" + CStr(doc.GetItemValue(CAMPO_FORMULARIO_SECCION)(0))
		If doc.Hasitem(sNombreCampoInforme) Then
			If Not doc.Getitemvalue(sNombreCampoInforme)(0) ="" Then
				Error ERROR_FORMULARIO_DEVOLUCION_INFORME, MSG_ERROR_FORMULARIO_DEVOLUCION_INFORME
			End If
			
		End If
		
		Call checkFormularioEstado(ESTADO_FORM_ENUNIDAD)
		
		'Validar que el usuario esté entre los miembros que pueden acceder al formulario
		'Valida que le usuario tenga rol receptor
		If Not usuario.TieneRolForm(doc.GetItemValue(CAMPO_FORMULARIO_CODIGOFORM)(0), _
		doc.GetItemValue(CAMPO_FORMULARIO_UNIDADACTUAL)(0), ROL_RECEPTOR) Then
			Error ERROR_ROL_USUARIO_RECEPTOR, MSG_ERROR_ROL_USUARIO_RECEPTOR
		End If
		
		Exit Sub
HANDLER:
		If Not usuario Is Nothing Then
			Call RegistrarYGenerarError2(Err,Error,NOMBRE_APLICACION,"Clase Formulario - Sub checkDevolver","",usuario.nombreUsuario)	
		Else
			Call RegistrarYGenerarError2(Err,Error,NOMBRE_APLICACION,"Clase Formulario - Sub checkDevolver","","")	
		End If
		Exit Sub
	End Sub
	
'******************************************************************************************************************			
	Private Sub checkReenviar(unidadDestino As String)
		On Error Goto HANDLER
		Dim codigoFormulario As String
		Dim unidad As UnidadFormClass
		
		If unidadDestino = "" Then
			Error ERROR_UNIDADDESTINO_VACIA, MSG_ERROR_UNIDADDESTINO_VACIA
		End If
		
		Set unidad = New UnidadFormClass(unidadDestino)
		codigoFormulario = doc.GetItemValue(CAMPO_FORMULARIO_CODIGOFORM)(0)
		
		' Valido que el estado del formulario sea En Unidad
		Call checkFormularioEstado(ESTADO_FORM_ENUNIDAD)
		
		' Validar que el usuario esté entre los miembros que pueden acceder al formulario
		' Valida que le usuario tenga rol receptor
		If Not usuario.TieneRolForm(doc.GetItemValue(CAMPO_FORMULARIO_CODIGOFORM)(0), _
		doc.GetItemValue(CAMPO_FORMULARIO_UNIDADACTUAL)(0), ROL_RECEPTOR) Then
			Error ERROR_ROL_USUARIO_RECEPTOR, MSG_ERROR_ROL_USUARIO_RECEPTOR
		End If
		
		' Valido que la unidad de destino tenga acceso al formulario
		If Not unidad.TieneAccesoAFormulario(codigoFormulario) Then
			Error ERROR_ACCESO_FORMULARIO, MSG_ERROR_ACCESO_FORMULARIO
		End If
		
		' Valido que la unidad de destino tenga receptores
		If unidad.RolesForm(codigoFormulario, ROL_RECEPTOR).CantElem = 0 Then
			Error ERROR_UNIDAD_RECEPTOR, MSG_ERROR_UNIDAD_RECEPTOR
		End If
		
		Exit Sub
HANDLER:
		Msgbox "ClaseFormulario - checkReenviar: " & Error$ & " " & Erl
		If Not usuario Is Nothing Then
			Call RegistrarYGenerarError2(Err,Error,NOMBRE_APLICACION,"Clase Formulario - Sub checkReenviar","",usuario.nombreUsuario)	
		Else
			Call RegistrarYGenerarError2(Err,Error,NOMBRE_APLICACION,"Clase Formulario - Sub checkReenviar","","")	
		End If
		Exit Sub
	End Sub
	
'******************************************************************************************************************
	Private Sub checkLiberar()
		On Error Goto HANDLER
		
		'Valido que la oficina tenga acceso al formuario
		Call checkAccesoOficina(doc.GetItemValue(CAMPO_FORMULARIO_UNIDADACTUAL)(0), doc.GetItemValue(CAMPO_FORMULARIO_CODIGOFORM)(0))
		
		'Valido que el usuario esté en la oficina actual
		Call checkUsuarioEnOficinaActual
		
		'Valida que el formulario tenga el estado Reservado
		Call checkFormularioEstado(ESTADO_FORM_RESERVADO)
		
		'Valida que le usuario tenga rol editor
		If Not usuario.TieneRolForm(doc.GetItemValue(CAMPO_FORMULARIO_CODIGOFORM)(0), _
		doc.GetItemValue(CAMPO_FORMULARIO_UNIDADACTUAL)(0), ROL_EDITOR) Then
			Error ERROR_ROL_USUARIO_EDITOR, MSG_ERROR_ROL_USUARIO_EDITOR
		End If
		
		'Valido que el usuario sea quien reservó el formulario
		Call checkReservadoPorUsuario
		
		Exit Sub
HANDLER:
		If Not usuario Is Nothing Then
			Call RegistrarYGenerarError2(Err,Error,NOMBRE_APLICACION,"Clase Formulario - Sub checkLiberar","",usuario.nombreUsuario)	
		Else
			Call RegistrarYGenerarError2(Err,Error,NOMBRE_APLICACION,"Clase Formulario - Sub checkLiberar","","")	
		End If
		Exit Sub
	End Sub
	
'******************************************************************************************************************		
	Private Sub checkRecibir()
		On Error Goto HANDLER
		
		'Valido que la oficina tenga acceso al formuario
		Call checkAccesoOficina(doc.GetItemValue(CAMPO_FORMULARIO_UNIDADACTUAL)(0), doc.GetItemValue(CAMPO_FORMULARIO_CODIGOFORM)(0))
		
		'Valido que el usuario esté en la oficina actual
		Call checkUsuarioEnOficinaActual
		
		'Valida que le usuario tenga rol receptor
		If Not usuario.TieneRolForm(doc.GetItemValue(CAMPO_FORMULARIO_CODIGOFORM)(0), _
		doc.GetItemValue(CAMPO_FORMULARIO_UNIDADACTUAL)(0), ROL_RECEPTOR) Then
			Error ERROR_ROL_USUARIO_RECEPTOR, MSG_ERROR_ROL_USUARIO_RECEPTOR
		End If
		
		'Valida que el formulario tenga el estado En tránsito
		Call checkFormularioEstado(ESTADO_FORM_ENTRANSITO)
		
		Exit Sub
HANDLER:
		Msgbox "ClaseFormulario - checkRecibir: " & Error$ & " " & Erl
		If Not usuario Is Nothing Then
			Call RegistrarYGenerarError2(Err, Error, NOMBRE_APLICACION, "Clase Formulario - Sub checkRecibir", "", usuario.nombreUsuario)	
		Else
			Call RegistrarYGenerarError2(Err, Error, NOMBRE_APLICACION, "Clase Formulario - Sub checkRecibir", "", "")	
		End If
		Exit Sub
	End Sub
'******************************************************************************************************************
'ENVIAR AVISO
	Public Function EnviarAviso(destavisos As String, asuntoavisos As String, cuerpoavisos As String)
		On Error GoTo HANDLER
		
		Dim vTelefonosAvisos As New Vector(0)
		Dim vCelularesAvisos As New Vector(0)
		Dim vCamposMailsAvisos As New Vector(0)
		Dim solAviso As  SolicitudAvisoFormularios
	     
		vCamposMailsAvisos.Values =Split(destavisos,",")
	
		Set solAviso = New SolicitudAvisoFormularios(vCamposMailsAvisos,vCelularesAvisos,vTelefonosAvisos,doc.Getitemvalue(CAMPO_FORMULARIO_NUMERO)(0),doc.Getitemvalue(CAMPO_FORMULARIO_UNIDADACTUAL)(0))
		Call solAviso.enviarManual(asuntoavisos, cuerpoavisos)
	
		Exit Function
HANDLER:
		MsgBox "ClaseFormulario - EnviarAviso: " & Error$ & " " & Erl
		If Not usuario Is Nothing Then
			Call RegistrarYGenerarError2(Err, Error, NOMBRE_APLICACION, "Clase Formulario - Function EnviarAviso", "", usuario.nombreUsuario)	
		Else
			Call RegistrarYGenerarError2(Err, Error, NOMBRE_APLICACION, "Clase Formulario - Function EnviarAviso", "", "")	
		End If
		Exit Function
	End Function	
'FIN ENVIAR AVISO	
'******************************************************************************************************************
	
	' Éste método permite enviar un mail controlando que el remitente no sea quien moificó el código de la clase
	Private Sub enviarMail(destinatarios As Vector, asunto As String, body As String, accion As String)
		On Error Goto HANDLER
		Dim dbMailBox As NotesDatabase
		Dim mail As NotesDocument
		
		'Seteo la base de datos
		Set dbMailBox = New NotesDatabase(dbformularios.Server, "mail.box")
		'Creo un documento en la base Mail.box
		Set mail = dbMailBox.CreateDocument
		
		'Seteo los campos del mail
		Call mail.ReplaceItemValue("From", igdocConf.EmailInstitucional)
		Call mail.ReplaceItemValue("Principal", igdocConf.EmailInstitucional)
		Call mail.ReplaceItemValue("Subject", asunto)
		Call mail.ReplaceItemValue("Form", "Memo")
		Call mail.ReplaceItemValue("SendTo", destinatarios.values)
		Dim rtitem As New NotesRichTextItem(mail,"body")
		SetMailMsg rtitem,body,accion
		Call mail.ReplaceItemValue("Recipients", destinatarios.values)
		
		Call mail.Save(True, False)
	'	Call mail.Send(False)
		
		Exit Sub
HANDLER:
		Msgbox "ClaseFormulario - enviarMail: " & Error$ & " " & Erl
		If Not usuario Is Nothing Then
			Call RegistrarYGenerarError2(Err, Error, NOMBRE_APLICACION, "Clase Formulario - Sub enviarMail", "", usuario.nombreUsuario)	
		Else
			Call RegistrarYGenerarError2(Err, Error, NOMBRE_APLICACION, "Clase Formulario - Sub enviarMail", "", "")	
		End If
		Exit Sub
	End Sub	
	
'*****************************************************************************************************************	
	
	Private Sub SetMailMsg(rtiBody As notesRichTextItem,link As String, accion As String)
		On Error Goto HANDLER	
		
		Dim vLines As New Vector(0),i As Integer
		Dim linea As String
		Dim numero As String
		'Dim uniform As New UnidadFormClass(doc.sUnidad(0))
		Dim uniform As New UnidadFormClass(doc.GetItemValue(CAMPO_FORMULARIO_UNIDADANTERIOR)(0))
		vLines.values=conf.TemplateNotificacion
		If vLines.cantElem > 0 Then
			For i= 1 To vLines.cantElem
				
				linea=vLines.getElement(i)
				linea=cambiarChar(linea,MSG_TAG_NUMERO_DOC, doc.numero(0))
				linea=cambiarChar(linea,MSG_TAG_TIPO_DOC, doc.sNombreForm(0))
				linea=cambiarChar(linea,MSG_TAG_ACCION,  accion)
				linea=cambiarChar(linea,MSG_TAG_LINK, link)
				linea=cambiarChar(linea,MSG_TAG_FECHA_DOC ,Cstr(Now))				
				linea=cambiarChar(linea,MSG_TAG_UNIDAD_EXP, uniform.Nombre)
				
				rtiBody.Appendtext linea		
				
			Next	
		End If		
		
		
		
		Exit Sub
HANDLER:
		Call RegistrarYGenerarError(NOMBRE_APLICACION,"Clase Notificacion - Función SetMailMsg","")
		Exit Sub
	End Sub
'******************************************************************************************************	
	
'******************************************************************************************************************			
	'Validaciones para el método Editar
	Private Sub checkEditar()
		On Error Goto HANDLER
		
		'Valido que el usuario esté en la oficina actual
		Call checkUsuarioEnOficinaActual
		
		'Valido que la oficina tenga acceso al formuario
		Call checkAccesoOficina(doc.GetItemValue(CAMPO_FORMULARIO_UNIDADACTUAL)(0), doc.GetItemValue(CAMPO_FORMULARIO_CODIGOFORM)(0))
		
		'Si el usuario no ha reservado el formulario, entonces llamo a Reservar para que lo reserve
		If  doc.GetItemValue(CAMPO_FORMULARIO_ESTADO)(0) <> ESTADO_FORM_RESERVADO And _
		doc.GetItemValue(CAMPO_FORMULARIO_RESERVADOPOR)(0) <> usuario.NombreUsuario Then
			Me.Reservar
		End If
		
		Exit Sub
HANDLER:
		If Not usuario Is Nothing Then
			Call RegistrarYGenerarError2(Err, Error, NOMBRE_APLICACION, "Clase Formulario - Sub checkEditar", "", usuario.nombreUsuario)	
		Else
			Call RegistrarYGenerarError2(Err, Error, NOMBRE_APLICACION, "Clase Formulario - Sub checkEditar", "", "")	
		End If
		Exit Sub
	End Sub
	
'******************************************************************************************************************		
	'Validaciones para el método Asignar
	Private Sub checkAsignar(usuarioAAsignar As UsuarioForm)
		On Error Goto HANDLER
		
		'Valido que el estado del formulario no sea "En Transito"
		If doc.GetItemValue(CAMPO_FORMULARIO_ESTADO)(0) = ESTADO_FORM_ENTRANSITO Then
			Error ERROR_FORMULARIO_ESTADO_ENTRANSITO, MSG_ERROR_FORMULARIO_ESTADO_ENTRANSITO
		End If
		
		'Valido que el estado del formulario no sea "Finalizado"
		If doc.GetItemValue(CAMPO_FORMULARIO_ESTADO)(0) = ESTADO_FORM_FINALIZADO Then
			Error ERROR_FORMULARIO_ESTADO_FINALIZADO, MSG_ERROR_FORMULARIO_ESTADO_FINALIZADO
		End If
		
		'Valido que el estado del formulario no sea "Archivado"
		If doc.GetItemValue(CAMPO_FORMULARIO_ESTADO)(0) = ESTADO_FORM_ARCHIVADO Then
			Error ERROR_FORMULARIO_ESTADO_ARCHIVADO, MSG_ERROR_FORMULARIO_ESTADO_ARCHIVADO
		End If
		
		'Valido que usuario que asigna esté en la unidad actual del formulario
		Call checkUsuarioEnOficinaActual
		
		'Valido que el usuario que quiere asignar tenga rol firmar
		If Not usuario.tieneRolForm(doc.GetItemValue(CAMPO_FORMULARIO_CODIGOFORM)(0), _
		doc.GetItemValue(CAMPO_FORMULARIO_UNIDADACTUAL)(0), ROL_FIRMAR) Then
			Error ERROR_ROL_USUARIO_FIRMAR, MSG_ERROR_ROL_USUARIO_FIRMAR
		End If
		
		Dim i As Long
		'Valido que el usuario a quien se le va a asignar el formulario, esté en la oficina actual
		If Not usuarioAAsignar.Unidades.isMember(doc.GetItemValue(CAMPO_FORMULARIO_UNIDADACTUAL)(0), i, False) Then
			Error ERROR_USUARIO_OFICINAACTUAL2, MSG_ERROR_USUARIO_OFICINAACTUAL2
		End If
		
		'Valido que el usuario al que se le va a asignar el formulario, tenga rol editor
		If Not usuarioAAsignar.tieneRolForm(doc.GetItemValue(CAMPO_FORMULARIO_CODIGOFORM)(0), _
		doc.GetItemValue(CAMPO_FORMULARIO_UNIDADACTUAL)(0), ROL_EDITOR) Then
			Error ERROR_ROL_USUARIO_EDITORAASIGNAR, MSG_ERROR_ROL_USUARIO_EDITORAASIGNAR
		End If
		
		Exit Sub
HANDLER:
		Msgbox "ClaseFormulario - checkAsignar: " & Error$ & " " & Erl
		If Not usuario Is Nothing Then
			Call RegistrarYGenerarError2(Err, Error, NOMBRE_APLICACION, "Clase Formulario - Sub checkAsignar", "", usuario.nombreUsuario)	
		Else
			Call RegistrarYGenerarError2(Err, Error, NOMBRE_APLICACION, "Clase Formulario - Sub checkAsignar", "", "")	
		End If
		Exit Sub
	End Sub
'******************************************************************************************************************	
	Private Sub checkDarPaseFormInterno()
		On Error Goto HANDLER

		Dim codigoFormulario As String
		Dim unidad As UnidadFormClass
		
		Set unidad = New UnidadFormClass(doc.GetItemValue(CAMPO_FORMULARIO_UNIDADACTUAL)(0))
		codigoFormulario = doc.GetItemValue(CAMPO_FORMULARIO_CODIGOFORM)(0)
		
		'Valido que la unidad actual tenga acceso al formulario
		Call checkAccesoOficina(doc.GetItemValue(CAMPO_FORMULARIO_UNIDADACTUAL)(0), codigoFormulario)
		
		'Valido que el usuario esté en la  oficina actual
		Call checkUsuarioEnOficinaActual
		
		'Valido que el estado del formulario sea Reservado
		Call checkFormularioEstado(ESTADO_FORM_RESERVADO)
		
		'Valido que el usuario sea quien reservó el formulario
		Call checkReservadoPorUsuario
		
		'Valido que el usuario tenga el rol Pase
		If Not usuario.tieneRolForm(codigoFormulario, doc.GetItemValue(CAMPO_FORMULARIO_UNIDADACTUAL)(0), ROL_PASE) Then
			Error ERROR_ROL_USUARIO_PASE, MSG_ERROR_ROL_USUARIO_PASE
		End If
		
		Exit Sub
HANDLER:
		Msgbox "ClaseFormulario - checkDarPaseFormInterno: " & Error$ & " " & Erl
		If Not usuario Is Nothing Then
			Call RegistrarYGenerarError2(Err,Error,NOMBRE_APLICACION,"Clase Formulario - Sub checkDarPaseFormInterno","",usuario.nombreUsuario)	
		Else
			Call RegistrarYGenerarError2(Err,Error,NOMBRE_APLICACION,"Clase Formulario - Sub checkDarPaseFormInterno","","")	
		End If
		Exit Sub
	End Sub
	
'******************************************************************************************************************
	
	' Validaciones para el método DarPase
	Private Sub checkDarPase(unidad As UnidadFormClass)
	'	On Error Goto HANDLER
		
		Dim codigoFormulario As String
		codigoFormulario = doc.GetItemValue(CAMPO_FORMULARIO_CODIGOFORM)(0)
		
		'Valido que la unidad de destino tenga acceso al formulario
		If Not unidad.TieneAccesoAFormulario(codigoFormulario) Then
			Error ERROR_ACCESO_FORMULARIO, MSG_ERROR_ACCESO_FORMULARIO
		End If
		' Valido que la unidad de destino tenga receptores
		If unidad.RolesForm(codigoFormulario, ROL_RECEPTOR).CantElem = 0 Then
			Error ERROR_UNIDAD_RECEPTOR, MSG_ERROR_UNIDAD_RECEPTOR
		End If
%REM
		Exit Sub
HANDLER:
		Msgbox "ClaseFormulario - checkDarPase: " & Error$ & " " & Erl
		If Not usuario Is Nothing Then
			Call RegistrarYGenerarError2(Err,Error,NOMBRE_APLICACION,"Clase Formulario - Sub checkDarPase","",usuario.nombreUsuario)	
		Else
			Call RegistrarYGenerarError2(Err,Error,NOMBRE_APLICACION,"Clase Formulario - Sub checkDarPase","","")	
		End If
		Exit Sub
%END REM
	End Sub
	
	
'******************************************************************************************************************
	
	' Validaciones para el método DarPase
	Private Sub checkDarPaseAGrupo(unidad As UnidadFormClass, codigoGrupo As String)
		On Error Goto HANDLER
		Dim grupo As NotesDocument
		Dim codigoFormulario As String
		Dim unidadesGrupo As Variant
		Dim enGrupo As Boolean
		codigoFormulario = doc.GetItemValue(CAMPO_FORMULARIO_CODIGOFORM)(0)
		
		Set grupo = dbOrgan.Getview(VISTA_GRUPO_POR_CODIGO).Getdocumentbykey(codigoGrupo, True)		
		unidadesGrupo = grupo.getItemValue("sUnidadesGrupo")
		enGrupo = False
		Forall u In unidadesGrupo
			If (u = unidad.Codigo) Then
				enGrupo = True
			End If
		End Forall
		
		If Not enGrupo Then
			Error ERROR_UNIDAD_FUERA_DE_GRUPO, MSG_ERROR_UNIDAD_FUERA_DE_GRUPO
		End If
		
		'Valido que la unidad este en el grupo
		If Not unidad.TieneAccesoAFormulario(codigoFormulario) Then
			Error ERROR_ACCESO_FORMULARIO, MSG_ERROR_ACCESO_FORMULARIO
		End If
		
		Exit Sub
HANDLER:
		Msgbox "ClaseFormulario - checkDarPase: " & Error$ & " " & Erl
		If Not usuario Is Nothing Then
			Call RegistrarYGenerarError2(Err,Error,NOMBRE_APLICACION,"Clase Formulario - Sub checkDarPase","",usuario.nombreUsuario)	
		Else
			Call RegistrarYGenerarError2(Err,Error,NOMBRE_APLICACION,"Clase Formulario - Sub checkDarPase","","")	
		End If
		Exit Sub
	End Sub
'******************************************************************************************************************
	
	' Validaciones para el método CREAR
	Private Sub checkCrear()
		On Error Goto HANDLER
		
		If docDefFormulario Is Nothing Then 
			Error ERROR_DEF_FORM_NOTHING, MSG_ERROR_DEF_FORM_NOTHING
		End If
		
		' No se hacen las validaciones si el formulario es de acceso global o si es externo
		If docDefFormulario.GetItemValue(CAMPO_DEFFORMULARIO_ACCESOGLOBAL)(0) = "No" And _
		docDefFormulario.GetItemValue(CAMPO_DEFFORMULARIO_VISIBILIDAD)(0) = "Interno" Then
			' En la definición del formulario pregunto si el todos pueden iniciarlo. Si es así, quiere decir que
			' todas las oficinas pueden crearlo y no es necesario validar las oficinas
			If Not docDefFormulario.GetItemValue(CAMPO_DEFFORMULARIO_INICIORESTRINGIDO)(0) = "T" Then
				Call checkOficina()
			End If
			Call checkAccesoOficina(doc.GetItemValue(CAMPO_FORMULARIO_UNIDADACTUAL)(0), docDefFormulario.GetItemValue(CAMPO_DEFFORMULARIO_CODIGO)(0))
			Call checkUsuarioEnOficina(doc.GetItemValue(CAMPO_FORMULARIO_UNIDADACTUAL)(0))
			
			' Valido que el usuario tenga el rol Creador
			If Not usuario.tieneRolForm(docDefFormulario.GetItemValue(CAMPO_DEFFORMULARIO_CODIGO)(0), _
			doc.GetItemValue(CAMPO_FORMULARIO_UNIDADACTUAL)(0), ROL_CREADOR) Then
				Error ERROR_ROL_USUARIO_CREADOR, MSG_ERROR_ROL_USUARIO_CREADOR
			End If
		End If
		
		' Valido que si el formulario es externo, el formato de numeracion no tenga número de unidad
		If docDefFormulario.GetItemValue(CAMPO_DEFFORMULARIO_VISIBILIDAD)(0) = "Externo" And _
		Instr(formato, INDICADOR_CODIGO_UNIDAD) <> 0 Then
			Error ERROR_NUMERACION_NROUNIDAD, MSG_ERROR_NUMERACION_NROUNIDAD
		End If
		
		Exit Sub
HANDLER:
		MsgBox "Clase Formulario - Sub checkCrear " & Error$ & CStr(Erl)
		If Not usuario Is Nothing Then
			Call RegistrarYGenerarError2(Err, Error, NOMBRE_APLICACION, "Clase Formulario - Sub ", "", usuario.nombreUsuario)	
		Else
			Call RegistrarYGenerarError2(Err, Error, NOMBRE_APLICACION, "Clase Formulario - Sub ", "", "")	
		End If
		Exit Sub
	End Sub
	
'******************************************************************************************************************
	
	Private Sub checkEnviar(nroUnidad As String)
		On Error Goto HANDLER
		
		Dim recorrido As New Vector(0)
		Dim infoNodo As InfoNodo
		Dim idUnidadInicial As String
		
		If docDefFormulario.HasItem(CAMPO_DEFFORMULARIO_XML) And docDefFormulario.GetItemValue(CAMPO_DEFFORMULARIO_XML)(0) <> "" Then
			'Relativo a MxGraph:	
			Set infoNodo = Me.obtenerUnidadInicial()
			idUnidadInicial = infoNodo.GetUnidad()
			If Not idUnidadInicial = MXGRAPH_ID_UNIDAD_CUALQUIERA Then
				If usuario.NombreUsuario = "Anonymous" Then
					Error ERROR_USUARIO_ANONIMO, MSG_ERROR_USUARIO_ANONIMO	
				Else
				' Chequear que la unidad sea la misma que la del usuario que quiere enviar
					If nroUnidad <> idUnidadInicial Then
						Error ERROR_UNIDAD_CREACION, MSG_ERROR_UNIDAD_CREACION	
					End If
				End If
			End If
			
			' Tambien chequear que haya una segunda unidad en la definicion
			Set infoNodo = Me.obtenerSiguiente(infoNodo.getIdElemento())
			If infoNodo.GetIdElemento() = "" Then
				Error ERROR_UNIDAD_A_ENVIAR, MSG_ERROR_UNIDAD_A_ENVIAR
			End If
		End If
		
		Exit Sub
HANDLER:
		Msgbox "ClaseFormulario - checkEnviar: " & Error$ & " " & Erl
		If Not usuario Is Nothing Then
			Call RegistrarYGenerarError2(Err,Error,NOMBRE_APLICACION,"Clase Formulario - Método checkEnviar","",usuario.nombreUsuario)	
		Else
			Call RegistrarYGenerarError2(Err,Error,NOMBRE_APLICACION,"Clase Formulario - Método checkEnviar","","")	
		End If
		Exit Sub		
	End Sub
	'******************************************************************************************************************
	Private Sub checkGuardarFormEnvio
		On Error GoTo HANDLER
		'Control de Roles
		If Not usuario.TieneRolForm(doc.GetItemValue(CAMPO_FORMULARIO_CODIGOFORM)(0),_
		doc.GetItemValue(CAMPO_FORMULARIO_UNIDADACTUAL)(0),ROL_EDITOR) Then
			Error ERROR_ROL_USUARIO_EDITOR,MSG_ERROR_ROL_USUARIO_EDITOR
		End If
		
		'Valido que el estado del formulario esté reservado
		Call checkFormularioEstado(ESTADO_FORM_ENTRANSITO)
		
		Exit Sub
HANDLER:
		If Not usuario Is Nothing Then
			Call RegistrarYGenerarError2(Err,Error,NOMBRE_APLICACION,"Clase Formulario - Sub checkGuardarFormEnvio","",usuario.nombreUsuario)	
		Else
			Call RegistrarYGenerarError2(Err,Error,NOMBRE_APLICACION,"Clase Formulario - Sub checkGuardarFormEnvio","","")	
		End If
		Exit Sub
	End Sub
	
'******************************************************************************************************************
	
	'Valida que el usuario que ejecuta el método pertenezca a la oficina actual y tenga acceso al formulario
	Private Sub checkUsuarioEnOficinaActual()
		On Error Goto HANDLER
		Dim i As Long
		
		Dim unidad As New UnidadFormClass(doc.GetItemValue(CAMPO_FORMULARIO_UNIDADACTUAL)(0))
		Dim vUsuariosAcceso As Vector
		Dim s As String
		s = docDefFormulario.GetItemValue(CAMPO_DEFFORMULARIO_CODIGO)(0)
		'Obtengo un vector con los integrantes de la unidad que tienen acceso al formulario
		Set vUsuariosAcceso = Unidad.UsuariosConAcceso(docDefFormulario.GetItemValue(CAMPO_DEFFORMULARIO_CODIGO)(0))
		'Si el usuario que ejecuta la acción no está en el vector, entonces no tiene acceso y lanzo un error
		If Not vUsuariosAcceso.isMember(usuario.NombreUsuario, i, False) Then
			Error ERROR_USUARIO_OFICINA, MSG_ERROR_USUARIO_OFICINA
		End If
		
		Exit Sub
HANDLER:
		Msgbox "ClaseFormulario - checkUsuarioEnOficinaActual: " & Error$ & " " & Erl
		If Not usuario Is Nothing Then
			Call RegistrarYGenerarError2(Err, Error, NOMBRE_APLICACION, "Clase Formulario - Sub checkUsuarioEnOficinaActual", "", usuario.nombreUsuario)	
		Else
			Call RegistrarYGenerarError2(Err, Error, NOMBRE_APLICACION, "Clase Formulario - Sub checkUsuarioEnOficinaActual", "", "")	
		End If
		Exit Sub
	End Sub
	
'******************************************************************************************************************
	' Valida que el estado del formulario sea el pasado por parámetro
	Private Sub checkFormularioEstado(estado As String)
		On Error Goto HANDLER
		
		If Not doc.GetItemValue(CAMPO_FORMULARIO_ESTADO)(0) = estado Then
			Error ERROR_FORMULARIO_ESTADO, MSG_ERROR_FORMULARIO_ESTADO + estado
		End If
		
		Exit Sub
HANDLER:
		If Not usuario Is Nothing Then
			Call RegistrarYGenerarError2(Err, Error, NOMBRE_APLICACION, "Clase Formulario - Sub checkFormularioEstadoReservado", "", usuario.nombreUsuario)	
		Else
			Call RegistrarYGenerarError2(Err, Error, NOMBRE_APLICACION, "Clase Formulario - Sub checkFormularioEstadoReservado", "", "")	
		End If
		Exit Sub
	End Sub
	
'******************************************************************************************************************
	
	' Valida que el formulario esté reservado por el usuario que lo quiere editar	
	Private Sub checkReservadoPorUsuario()
		On Error Goto HANDLER
		
		If Not doc.GetItemValue(CAMPO_FORMULARIO_RESERVADOPOR)(0) = usuario.NombreUsuario Then
			Error ERROR_FORMULARIO_RESERVADOPOR, MSG_ERROR_FORMULARIO_RESERVADOPOR + usuario.NombreUsuario
		End If
		
		Exit Sub
HANDLER:
		If Not usuario Is Nothing Then
			Call RegistrarYGenerarError2(Err, Error, NOMBRE_APLICACION, "Clase Formulario - Sub checkReservadoPorUsuario", "", usuario.nombreUsuario)	
		Else
			Call RegistrarYGenerarError2(Err, Error, NOMBRE_APLICACION, "Clase Formulario - Sub checkReservadoPorUsuario", "", "")	
		End If
		Exit Sub
	End Sub
	
'******************************************************************************************************************
	
	' Valida que la oficina desde la cual se llama la acción, esté dentro de la lista de oficinas
	' que puede crear el formulario en la definición del formulario
	Private Sub checkOficina()
		On Error Goto handler
		Dim listaOficinas As New Vector(0)
		Dim codOficina As String
		Dim i As Long
		
		'Obtengo el código de la oficina que ejecuta la acción
		codOficina = doc.GetItemValue(CAMPO_FORMULARIO_UNIDADACTUAL)(0)
		
		'Relativo a MxGraph:
		If docDefFormulario.HasItem(CAMPO_DEFFORMULARIO_XML) And docDefFormulario.GetItemValue(CAMPO_DEFFORMULARIO_XML)(0) <> "" Then
			Dim infoNodo As InfoNodo
			Set infoNodo = Me.obtenerUnidadInicial()
			
			If infoNodo.GetUnidad() <> codOficina Then
				Error ERROR_UNIDAD_CREACION, MSG_ERROR_UNIDAD_CREACION
			End If
		End If
		
		'Obtengo la lista de código de oficinas que pueden crear el formulario
		aux = Split(docDefFormulario.GetItemValue(CAMPO_DEFFORMULARIO_UNIDADINICIO)(0), ",")
		listaOficinas.Values = aux
		
		'Lanzo un error si la oficina que ejecuta la acción no está en la lista anterior
		If Not listaOficinas.isMember(codOficina, i, False) Then
			Error ERROR_OFICINA_CREAR, MSG_ERROR_OFICINA_CREAR
		End If
		Exit Sub
HANDLER:
		If Not usuario Is Nothing Then
			Call RegistrarYGenerarError2(Err, Error, NOMBRE_APLICACION, "Clase Formulario - Sub checkOficina", "", usuario.nombreUsuario)	
		Else
			Call RegistrarYGenerarError2(Err, Error, NOMBRE_APLICACION, "Clase Formulario - Sub checkOficina", "", "")	
		End If
		Exit Sub
	End Sub
	
'******************************************************************************************************************
	
	' Valida que el usuario que ejecuta la acción pertenezca a la oficina y tenga acceso al formulario
	Private Sub checkUsuarioEnOficina(codOficina As String)
		On Error Goto HANDLER
		Dim i As Long
		Dim unidad As New UnidadFormClass(codoficina)
		Dim vUsuariosAcceso As Vector
		
		' Obtengo un vector con los integrantes de la unidad que tienen acceso al formulario
		Set vUsuariosAcceso = unidad.UsuariosConAcceso(docDefFormulario.GetItemValue(CAMPO_DEFFORMULARIO_CODIGO)(0))
		' Si el usuario que ejecuta la acción no está en el vector, entonces no tiene acceso y lanzo un error
		If Not vUsuariosAcceso.isMember(usuario.NombreUsuario, i, False) Then
			Error ERROR_USUARIO_OFICINA, MSG_ERROR_USUARIO_OFICINA
		End If
		Exit Sub
HANDLER:
		If Not usuario Is Nothing Then
			Call RegistrarYGenerarError2(Err, Error, NOMBRE_APLICACION, "Clase Formulario - Sub checkUsuarioEnOficina", "", usuario.nombreUsuario)
		Else
			Call RegistrarYGenerarError2(Err, Error, NOMBRE_APLICACION, "Clase Formulario - Sub checkUsuarioEnOficina", "",  "")			
		End  If
		Exit Sub
	End Sub
	
'******************************************************************************************************************
	
	'Valida que la oficina tenga acceso al formulario	
	Private Sub checkAccesoOficina(codOficina As String, codigoFormulario As String)
		On Error Goto HANDLER
		Dim unidad As New UnidadFormClass(codOficina)
		If Not unidad.TieneAccesoAFormulario(codigoFormulario) Then
			Error ERROR_ACCESO_FORMULARIO, MSG_ERROR_ACCESO_FORMULARIO
		End If
		Exit Sub
HANDLER:
		If Not usuario Is Nothing Then
			Call RegistrarYGenerarError2(Err,Error,NOMBRE_APLICACION,"Clase Formulario - Sub checkAccesoOficina","",usuario.nombreUsuario)
		Else
			Call RegistrarYGenerarError2(Err,Error,NOMBRE_APLICACION,"Clase Formulario - Sub checkAccesoOficina","","")			
		End  If
		Exit Sub
	End Sub
	
	'******************************************************************************************************************
	Public Function Marcar (tipoMarca As String,usr As String,MsgMarca As String,fechaMarca As String) As String
		On Error GoTo Handler
		
		Dim baseEstructu As NotesDatabase
		Dim docEstructu As NotesDocument
		'	Dim conf As ConfigComunicaciones
		Dim docMarca As NotesDocument
		
		Dim nNombre As NotesName
		Set nNombre=New NotesName(usr)
		
		
		'	Set conf = New ConfigComunicaciones()
		Set baseEstructu =conf.ReferenciarBaseDeDatos(CLAVE_DBORGANIZACION)
		Set docEstructu=baseEstructu.Createdocument()
		Call docEstructu.Replaceitemvalue("nIdMarca",tipoMarca)
		Call docEstructu.Replaceitemvalue("fechaRecordatorio",fechaMarca)
		
		If(fechaMarca<>"")Then
			Call docEstructu.Replaceitemvalue("sRecordEnviado","0")
		Else
			Call docEstructu.Replaceitemvalue("sRecordEnviado","1")
		End If
		
		Dim itLectSiempre As New NotesItem(docEstructu,CMP_M_LECT_PER,"[Desarrollo]",Readers)
		
		Dim itUsrLect As New NotesItem(docEstructu,CMP_M_USUARIO,"",Readers)
		
		Dim itUsrAuto As New NotesItem(docEstructu,"sUsuarioAutor",nNombre.Canonical,Authors)
		
		Call docEstructu.Replaceitemvalue("sMsgRecordatorio",MsgMarca)
		'Call docEstructu.Replaceitemvalue("AsuntoCom",doc.Getitemvalue(COM_CAMPO_ASUNTO)(0))
		Call docEstructu.Replaceitemvalue("sNro",doc.Getitemvalue("numero")(0))
		Call docEstructu.Replaceitemvalue("form","MarcaFormulario")
		Call docEstructu.Replaceitemvalue("sUnidad",doc.Getitemvalue("sUnidad")(0))
		Call docEstructu.ReplaceitemValue("unid",doc.Universalid)
		Call docEstructu.Replaceitemvalue("baseForm", doc.Parentdatabase.Filepath)
		Call doc.Replaceitemvalue("Marcas","1")
		'Guardo los cambios de la comunicación
		
		
		'Dim itUsrLect As New NotesItem(newMarca,CMP_M_USUARIO,"",Readers)
		'Dim itUsrAuto As New NotesItem(newMarca,CMP_M_USUARIO_AUT,Me.Usuario,Authors)
		
		'Dim itLectSiempre As New NotesItem(newMarca,CMP_M_LECT_PER,"[Desarrollo]",Readers)
		
		Dim org As NotesDatabase
		Set org=conf.ReferenciarBaseDeDatos(CLAVE_DBORGANIZACION)
		Dim vistaOrg As NotesView
		Set vistaOrg=org.Getview("VTiposMarcaxId")
		
		If vistaOrg Is Nothing Then
			
			Error ERROR_VIEW_NOT_FOUND,MSG_ERROR_VIEW_NOT_FOUND & " " & V_TM_POR_ID
		End If
		Dim tipoMarcaD As NotesDocument
		Set tipoMarcaD =vistaOrg.GetDocumentByKey(tipoMarca,True)
		Dim docAux As NotesDocument
		Set docAux =vistaOrg.Getfirstdocument()
		While Not docAux Is Nothing
			If CStr(docAux.Getitemvalue("nId")(0))=tipoMarca Then
				Set tipoMarcaD=docAux				
			End If
			Set docAux=vistaOrg.Getnextdocument(docAux)
		Wend
		'MsgBox tipoMarcaD.Universalid
		If tipoMarcaD Is Nothing Then
			Error 1891,"MSG_ERROR_COM_MARCAR"	 & ": Marca con código " & CStr(tipoMarca) & " para la comunicación cuyo número es " & doc.Getitemvalue("CAMPO_NUMERO")(0)
		End If
		Call docEstructu.Replaceitemvalue(CMP_M_TEXTO,tipoMarcaD.GetItemValue(CMP_TM_TEXTO))
		Call docEstructu.Replaceitemvalue(CMP_M_COLOR,tipoMarcaD.GetItemValue(CMP_TM_COLOR))
		
		Call doc.Save(True, False)
		Call docEstructu.Save(True,False)
		' Actualizo el indice para desplegar el formulario en las bandejas
		Call actualizarIndice(doc.Universalid,dbFormularios)
		Marcar=""
		
		Exit Function
Handler:
		
		Call RegistrarYGenerarError2(Err,Error,NOMBRE_APLICACION_COMUNICACIONES,"Clase Comunicacion - Funcion Marcar","",usuarioComuni)		
		Marcar = Error$	
		Exit Function
	End Function
	'******************************************************************************************************************
	
	
'******************************************************************************************************************
	
	Private Function MoverFormToArchivo(dbA As notesDatabase) As String
		On Error Goto HANDLER
		
		Dim newDoc As NotesDocument
		Dim campoForm As String
		
		Set newDoc = New notesDocument(dbA)
		
		Call doc.CopyAllItems(newDoc)
		Call newDoc.Save(True, False)
		
		campoForm = doc.GetItemValue(CAMPO_FORMULARIO_FORM)(0)
		campoForm = ESTADO_FORM_A_BORRAR & campoForm
		Call doc.ReplaceItemValue(CAMPO_FORMULARIO_FORM, campoForm)

		MoverFormToArchivo = newDoc.Universalid
		Exit Function
	HANDLER:
		If Not usuario Is Nothing Then
			Call RegistrarYGenerarError2(Err,Error,NOMBRE_APLICACION,"Clase Formulario - Sub MoverFormToArchivo","",usuario.nombreUsuario)
		Else
			Call RegistrarYGenerarError2(Err,Error,NOMBRE_APLICACION,"Clase Formulario - Sub MoverFormToArchivo","","")			
		End  If
		
		Exit Function	
	End Function
	
'******************************************************************************************************************
	
	'Obtiene la unidad siguiente para dar pase
	Private Function calcularDestinoPase(unidad As String)
		On Error Goto HANDLER
		Dim seccion As Integer
		Dim unidades As String
		Dim temas As String
		Dim aUnidades As Variant
		Dim aTemas As Variant
		Dim vUnidades As Vector
		Dim vTemas As Vector
		Dim tema As String
		Dim index As Long
		
'		Set docDefFormulario = vistaDefFormCodigo.GetDocumentByKey(doc.GetItemValue(CAMPO_FORMULARIO_CODIGOFORM)(0), True)
		'sección
		If doc.HasItem(CAMPO_FORMULARIO_SECCION) Then
			seccion = doc.GetItemValue(CAMPO_FORMULARIO_SECCION)(0)
		Else
			seccion = 1
		End If
		
		If docDefFormulario.GetItemValue(CAMPO_DEFFORMULARIO_SEL_UNIDADES_ENVIAR)(seccion - 1) = "Si" Then
		'El usuario seleccionó la unidad a la que dar pase
			calcularDestinoPase = unidad
			
		Elseif docDefFormulario.GetItemValue(CAMPO_DEFFORMULARIO_CCTEMAS)(seccion - 1) = "Si" Then
		'La unidad de destino se determina mediante temas
			
			'Obtengo todos los temas para la sección actual
			temas = docDefFormulario.GetItemValue(CAMPO_DEFFORMULARIO_TEMAS)(seccion - 1)
			aTemas = Split(temas, "$$")
			Set vTemas = New Vector(0)
			Forall t In aTemas
				Call vTemas.insertElement(t, vTemas.CantElem + 1)
			End Forall
			
		'Obtengo todas las unidades para la sección actual
			unidades = docDefFormulario.GetItemValue(CAMPO_DEFFORMULARIO_UNIDADESTEMAS)(seccion - 1)
			aUnidades = Split(unidades, "$$")
			Set vUnidades = New Vector(0)
			Forall u In aUnidades
				Call vUnidades.insertElement(u, vUnidades.CantElem + 1)
			End Forall
			
		'En base al tema seleccionado, determino la unidad de destino
			tema = Ucase$(doc.GetItemValue("sTema" & Cstr(seccion))(0))
			If vTemas.isMember(tema, index, False) Then
				calcularDestinoPase = vUnidades.getElement(index)
			Else
				Error 1001,"El tema seleccionado no se encontró en la configuración del formulario: " + tema+ "... "+vTemas.ToString(";")
			End If
			
		Else
		'La unidad de destino está fijada en la configuración
			calcularDestinoPase = docDefFormulario.GetItemValue(CAMPO_DEFFORMULARIO_UNIDAD)(seccion - 1)
		End If
		
		Exit Function
HANDLER:
		If Not usuario Is Nothing Then
			Call RegistrarYGenerarError2(Err, Error, NOMBRE_APLICACION, "Clase Formulario - Function calcularDestinoPase", "", usuario.nombreUsuario)
		Else
			Call RegistrarYGenerarError2(Err, Error, NOMBRE_APLICACION, "Clase Formulario - Function calcularDestinoPase", "", "")			
		End  If
		Exit Function
	End Function
	
'******************************************************************************************************************
	' **** MXGRAPH
	Private Function obtenerUnidadInicial() As InfoNodo
		Set obtenerUnidadInicial = Me.mxController.obtenerInicio(doc)
	End Function
	
	Private Function obtenerAnterior(idElemento As String) As InfoNodo
		Dim anterior As InfoNodo
		Set obtenerAnterior = Me.mxController.obtenerAnterior(idElemento, doc)
	End Function
	
	Private Function obtenerSiguiente(idElemento As String) As InfoNodo
		Set obtenerSiguiente = Me.mxController.obtenerSiguiente(idElemento, doc)
	End Function
	
	Private Function obtenerActual(idElemento As String) As InfoNodo
		Set obtenerActual = Me.mxController.obtenerActual(Idelemento, doc)
	End Function
	
	Private Function ExisteSiguiente(idElemento As String) As Boolean
		ExisteSiguiente = Me.mxController.ExisteSiguiente(idElemento, doc)
	End Function
	
	Private Function obtenerUnidadSuperior(nroUnidad As String) As String
		On Error GoTo handler
		Dim viewUnidades As NotesView
		Dim docUnidad As NotesDocument
		
		Set viewUnidades = dbOrgan.GetView("VBusUniSup")
		Set docUnidad = viewUnidades.GetDocumentByKey(nroUnidad, True)
		If docUnidad Is Nothing Then
			Error ERROR_PASE_UNIDAD_SUPERIOR, MSG_ERROR_PASE_UNIDAD_SUPERIOR	
		End If
		obtenerUnidadSuperior = docUnidad.GetItemValue("sUnidadSuperior")(0)
handler:
		Call RegistrarYGenerarError2(Err, Error, NOMBRE_APLICACION, "Clase Formulario - Método ObtenerUnidadSuperior", "",nombreUsuario)
		MsgBox "ClaseFormulario obtenerUnidadSuperior " & Error$ & " - " & erl 
	End Function
	
	Private Function obtenerIdFin() As String
		obtenerIdFin = Me.mxController.obtenerIdFin()
	End Function
	
	Public Function IntegrarExpediente(nroExp As String, bloqueante As String, oficina As String, asunto As String, seccion As String, path As String,server As String, uId As string)
		On Error GoTo handler
		Dim expedientes As String
		Dim bloqueantes As String
		Dim oficinas As String
		Dim asuntos As String
		Dim secciones As String
		Dim servidores As String
		Dim bases As String
		Dim universalIds As string 
		Dim unidad As String 
		
		expedientes = doc.Getitemvalue(CMP_INTEGRACION_EXPEDIENTES)(0)
		bloqueantes = doc.getItemValue(CMP_INTEGRACION_BLOQUEANTES)(0)
		oficinas 	= doc.getItemValue(CMP_INTEGRACION_OFICINAS)(0)
		asuntos 	= doc.getItemValue(CMP_INTEGRACION_ASUNTOS)(0)
		secciones 	= doc.getItemValue(CMP_INTEGRACION_SCCIONES)(0)
		servidores	= doc.getItemValue(CMP_INTEGRACION_SERVERS)(0)
		bases 		= doc.getItemValue(CMP_INTEGRACION_DBS)(0)
		universalIds= doc.getItemValue(CMP_INTEGRACION_UNIVERSAL_IDS)(0)
		
		Dim docUnidad As NotesDocument
		Dim dbUnidades As NotesDatabase
		Dim uniView As NotesView
		
		Set dbUnidades = conf.ReferenciarBaseDeDatos(CLAVE_DBORGANIZACION)
		Set uniView = dbUnidades.Getview("(BusquedaUnixNro)")
		
		Set docUnidad = uniView.GetDocumentByKey(oficina)
		unidad = docUnidad.GetItemValue(CAMPO_UNIDAD_NOMBRE)(0)
		
		If(expedientes = "")Then
			Call doc.Replaceitemvalue(CMP_INTEGRACION_EXPEDIENTES, nroExp)
			Call doc.Replaceitemvalue(CMP_INTEGRACION_BLOQUEANTES, bloqueante)
			Call doc.Replaceitemvalue(CMP_INTEGRACION_OFICINAS, unidad)
			Call doc.Replaceitemvalue(CMP_INTEGRACION_ASUNTOS, asunto)
			Call doc.Replaceitemvalue(CMP_INTEGRACION_SCCIONES, seccion)
			Call doc.Replaceitemvalue(CMP_INTEGRACION_SERVERS,server)
			Call doc.Replaceitemvalue(CMP_INTEGRACION_DBS,path)
			Call doc.Replaceitemvalue(CMP_INTEGRACION_UNIVERSAL_IDS,uid)
			
		Else
			Call doc.Replaceitemvalue(CMP_INTEGRACION_EXPEDIENTES,expedientes & ";" & nroExp)
			Call doc.Replaceitemvalue(CMP_INTEGRACION_BLOQUEANTES,bloqueantes & ";" & bloqueante)
			Call doc.Replaceitemvalue(CMP_INTEGRACION_OFICINAS,oficinas & ";" & unidad)
			Call doc.Replaceitemvalue(CMP_INTEGRACION_ASUNTOS,asuntos & ";" & asunto)
			Call doc.Replaceitemvalue(CMP_INTEGRACION_SCCIONES,secciones & ";" & seccion)
			Call doc.Replaceitemvalue(CMP_INTEGRACION_SERVERS,servidores & ";" & server)
			Call doc.Replaceitemvalue(CMP_INTEGRACION_DBS,bases & ";" & path)
			Call doc.Replaceitemvalue(CMP_INTEGRACION_UNIVERSAL_IDS,universalIds & ";" & uid)
		End If
		
		If bloqueante = "Si" Then
			Call doc.Replaceitemvalue("sFormBloqueado", "Si")
		End If
		
		Call doc.Save(True, False)
		Exit function
handler:
		MsgBox "ClaseFormulario - IntegrarExpediente " & Error & " - " & Erl
		Exit function
	End Function
	
	Public Function ExpedienteDesbloqueado(nroExp As String)
		On Error GoTo handler

		Dim expedientes As New Vector(0)
		Dim bloqueantes As New Vector(0)

		expedientes.values = Split(doc.Getitemvalue(CMP_INTEGRACION_EXPEDIENTES)(0),";")
		bloqueantes.values = Split(doc.getItemValue(CMP_INTEGRACION_BLOQUEANTES)(0),";")

		If(expedientes.cantElem = 0)Then
			Error "10000", "El formulario no tiene expedientes integrados"
		Else
			Dim i As Integer
			Dim salir As Boolean
			salir = False
			i = 1
			While (i <= expedientes.cantElem) And (Not salir)
				if nroExp = expedientes.getElement(i) Then
					salir = True
				Else
					i = i + 1
				End If
			Wend

			If salir Then
				Call bloqueantes.replaceElement(i, "No")
				Call doc.Replaceitemvalue(CMP_INTEGRACION_BLOQUEANTES, bloqueantes.ToString(";"))
				i = 1
				salir = False
				While (i <= bloqueantes.cantElem) And (Not salir)
					If bloqueantes.getElement(i) = "Si" Then
						salir = True
					Else
						i = i + 1
					End If
				Wend
				If salir Then
					Call doc.Replaceitemvalue("sFormBloqueado", "Si")
				Else
					Call doc.Replaceitemvalue("sFormBloqueado", "No")
				End If
			Else
				Error "10000", "El formulario no esta integrado al expediente " & nroExp
			End If
			Call doc.Save(True, False)
		End If
		MsgBox ""
		
		MsgBox ""
		Exit Function
handler:
		Call RegistrarYGenerarError2(Err, Error, NOMBRE_APLICACION, "Clase Formulario - Método ExpedienteBloqueado", "",nombreUsuario)
		MsgBox "ClaseFormulario - ExpedienteDesbloqueado " & Error & " - " & Erl
		Exit Function
	End Function
End Class
'++LotusScript Development Environment:2:2:Terminate:1:10
Sub Terminate
	
End Sub


'++LotusScript Development Environment:2:2:archivarFormIntegrado:5:8
%REM
	Sub archivarFormIntegrado
	Description: Finaliza el proceso de integración de un formulario
%END REM
Sub archivarFormIntegrado(doc As NotesDocument, dbForms As NotesDatabase, link As String)
	On Error GoTo Handler

	'Obtengo formulario padre
	Dim NroFormPadre As String
	NroFormPadre = doc.GetItemValue(CAMPO_INT_FORM_NRO_FORM_PADRE)(0)
	Dim docPadre As NotesDocument
	Dim vista As NotesView

	Set vista = dbForms.GetView("TodosXClave")
	Set docPadre = vista.GetDocumentByKey(NroFormPadre)

	'Obtengo formularios hijos y URLs
	Dim forms As New Vector(0)
	forms.values = Split(docPadre.GetItemValue(CAMPO_INT_FORM_NRO_FORM_HIJO)(0), ";")
	Dim URLs As New Vector(0)
	URLs.values = Split(docPadre.GetItemValue(CAMPO_INT_FORM_URL_HIJO)(0), ";")

	Dim NroForm As String
	NroForm = doc.GetItemValue(CAMPO_FORMULARIO_NUMERO)(0)

	Dim pos As Long
	Dim URL As String

	'Agrego la URL del formulario
	If forms.isMember(NroForm, pos, True) Then
		Call URLs.replaceElement(pos, link)
		Call docPadre.ReplaceItemValue(CAMPO_INT_FORM_URL_HIJO, URLs.ToString(";"))
	End If

	'Guardo formulario padre
	Call docPadre.Save(True, False)
	Exit Sub
Handler:
	MsgBox "ClaseFormulario - finalizarFormIntegrado: " & Error$ & " " & Erl
	Exit Sub
End Sub

'++LotusScript Development Environment:2:2:agregarValor:1:8
Sub agregarValor(doc As NotesDocument, nombreCampo As String, valor As Variant)
	Dim vector As New Vector(0)
	
	vector.Values = doc.GetItemValue(nombreCampo)
	Call vector.InsertElement(valor, vector.CantElem + 1)
	Call doc.ReplaceItemValue(nombreCampo, vector.Values)
End Sub





'++LotusScript Development Environment:2:1:estaActivadaNotificacion:1:8
Function estaActivadaNotificacion(accion As String) As Boolean
	Dim docProfile As NotesDocument
	
	Set docProfile = dbAdministracion.GetProfile("ConfiguracionFormsVis")
	estaActivadaNotificacion = (docProfile.GetItemValue("rNotificacion" + accion)(0) = "Si")
End Function




































'++LotusScript Development Environment:2:2:quitarUltimoValor:1:8
Sub quitarUltimoValor(doc As NotesDocument, nombreCampo As String)
	Dim vector As New Vector(0)
	
	vector.Values = doc.GetItemValue(nombreCampo)
	If vector.CantElem > 0 Then
		vector.DeleteElement(vector.CantElem)
		Call doc.ReplaceItemValue(nombreCampo, vector.Values)
	End If
End Sub



'++LotusScript Development Environment:2:2:borrarIndice:5:8
%REM
	Sub borrarIndice
	Description: Comments for Sub
%END REM
Sub borrarIndice (ByVal numero As String)
	On Error GoTo errorHandler
	Dim indiceForm As IndiceFormularios
	Set indiceForm = New IndiceFormularios()
	
	Call indiceForm.BorrarIndice(numero)
	Exit Sub
errorHandler:
	MsgBox "ClaseFormulario - BorrarIndice: " & Error$ & " " & Erl
	Exit Sub
End Sub

'++LotusScript Development Environment:2:2:actualizarIndice:1:8
Sub actualizarIndice(Byval numero As String, dbForms As NotesDatabase)
	On Error Goto errorHandler
	Dim indiceForm As IndiceFormularios
	Set indiceForm = New IndiceFormularios()
	
	Call indiceForm.ActualizarIndiceFormularios(numero, dbForms)
	Exit Sub
errorHandler:
	Msgbox "ClaseFormulario - actualizarIndice: " & Error$ & " " & Erl
	Exit Sub
End Sub



'++LotusScript Development Environment:2:2:agregarUnidadLectora:1:8
Sub agregarUnidadLectora(doc As NotesDocument, nroUnidad As String)
	Dim grupoLectores As String
	Dim vLectores As New Vector(0)
	Dim posDummy As Long
	
	vLectores.Values = doc.GetItemValue(CAMPO_FORMULARIO_LECTORES)
	grupoLectores = "FORM_" + nroUnidad + "_" + doc.GetItemValue(CAMPO_FORMULARIO_CODIGOFORM)(0)
	' Si ya esta en el vector no lo vuelvo a agregar
	If Not vLectores.IsMember(grupoLectores, posDummy, True) Then
		Call vLectores.InsertElement(grupoLectores, vLectores.CantElem + 1)
		If doc.HasItem(CAMPO_FORMULARIO_LECTORES) Then
			doc.RemoveItem(CAMPO_FORMULARIO_LECTORES)
		End If
		Set itemLectores = New NotesItem(doc, CAMPO_FORMULARIO_LECTORES, vLectores.Values, READERS)
	End If
End Sub



















































































'++LotusScript Development Environment:2:2:finalizarFormIntegrado:5:8
%REM
	Sub finalizarFormIntegrado
	Description: Finaliza el proceso de integración de un formulario
%END REM
Sub finalizarFormIntegrado(doc As NotesDocument, dbForms As NotesDatabase)
	On Error GoTo Handler

	'Obtengo formulario padre
	Dim NroFormPadre As String
	NroFormPadre = doc.GetItemValue(CAMPO_INT_FORM_NRO_FORM_PADRE)(0)
	Dim docPadre As NotesDocument
	Dim vista As NotesView

	Set vista = dbForms.GetView("TodosXClave")
	Set docPadre = vista.GetDocumentByKey(NroFormPadre)

	'Obtengo formularios hijos y si bloquean
	Dim forms As New Vector(0)
	forms.values = Split(docPadre.GetItemValue(CAMPO_INT_FORM_NRO_FORM_HIJO)(0), ";")
	Dim bloq As New Vector(0)
	bloq.values = Split(docPadre.GetItemValue(CAMPO_INT_FORM_BLOQUEANTE_HIJO)(0), ";")
	Dim URLs As New Vector(0)
	URLs.values = Split(docPadre.GetItemValue(CAMPO_INT_FORM_URL_HIJO)(0), ";")

	Dim NroForm As String
	NroForm = doc.GetItemValue(CAMPO_FORMULARIO_NUMERO)(0)

	Dim pos As Long
	Dim formBloq As String
	Dim bloqueado As Boolean
	Dim URL As String

	'Desbloqueo de formulario
	If forms.isMember(NroForm, pos, True) Then
		formBloq = bloq.getElement(pos)
		
		'Si el formulario es bloqueante recalculo el bloqueo
		If (formBloq = "Si") Then
			'Actualizo lista de formularios bloqueantes
			Call bloq.replaceElement(pos,"No")
			Call docPadre.ReplaceItemValue(CAMPO_INT_FORM_BLOQUEANTE_HIJO, bloq.ToString(";"))

			'Desbloqueo el formulario si corresponde
			bloqueado = False
			ForAll elem In bloq.values 
				If (elem = "Si") Then
					bloqueado = True
				End If
			End ForAll
			If bloqueado Then
				Call docPadre.ReplaceItemValue(CAMPO_INT_FORM_BLOQUEADO, "Si")
			Else
				Call docPadre.ReplaceItemValue(CAMPO_INT_FORM_BLOQUEADO, "No")
			End If
		End If

		'Agrego la URL al formulario
		URL = doc.GetItemValue("sDirAbs")(0) & "0/" & doc.Universalid & "?OpenDocument"
		Call URLs.replaceElement(pos,URL)
		Call docPadre.ReplaceItemValue(CAMPO_INT_FORM_URL_HIJO, URLs.ToString(";"))
	End If

	'Guardo formulario padre
	Call docPadre.Save(True, False)
	Exit Sub
Handler:
	MsgBox "ClaseFormulario - finalizarFormIntegrado: " & Error$ & " " & Erl
	Exit Sub
End Sub









































