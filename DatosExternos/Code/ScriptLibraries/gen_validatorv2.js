/*  -------------------------------------------------------------------------	                    JavaScript Form Validator                                 Version 2.0.2	Copyright 2003 JavaScript-coder.com. All rights reserved.	You use this script in your Web pages, provided these opening credit    lines are kept intact.	The Form validation script is distributed free from JavaScript-Coder.com	You may please add a link to JavaScript-Coder.com, 	making it easy for others to find this script.	Checkout the Give a link and Get a link page:	http://www.javascript-coder.com/links/how-to-link.php    You may not reprint or redistribute this code without permission from     JavaScript-Coder.com.		JavaScript Coder	It precisely codes what you imagine!	Grab your copy here:		http://www.javascript-coder.com/    -------------------------------------------------------------------------  *///agrego la función "trim" a la clase StringString.prototype.trim = function() { return this.replace(/^\s+|\s+$/, ''); };var _validations = new Array();function Validator(frmname){  this.formobj=document.forms[frmname];	if(!this.formobj)	{	  	//alert("BUG: couldnot get Form object "+frmname);		this.addValidation = add_validation;		this.setAddnlValidationFunction=set_addnl_vfunction;		this.clearAllValidations = clear_all_validations;		return;	}	if(this.formobj.onsubmit)	{	 this.formobj.old_onsubmit = this.formobj.onsubmit;	 this.formobj.onsubmit=null;	}	else	{	 this.formobj.old_onsubmit = null;	}	this.formobj.onsubmit=form_submit_handler;	this.addValidation = add_validation;	this.setAddnlValidationFunction=set_addnl_vfunction;	this.clearAllValidations = clear_all_validations;}function set_addnl_vfunction(functionname){  this.formobj.addnlvalidation = functionname;}function clear_all_validations(){	for(var itr=0;itr < this.formobj.elements.length;itr++)	{		this.formobj.elements[itr].validationset = null;	}}function form_submit_handler(e){   if (!pasoDijit()) {   	return false;   }	for(var itr=0;itr < this.elements.length;itr++)	{		var id = this.elements[itr].id;		if (id == "") {			id = this.elements[itr].name;		}		if(this.elements[itr].validationset &&		   !this.elements[itr].validationset.validate())		{		  return false;		} else if (_validations[id] && ! _validations[id].validate()) {			return false;		}	}	if(this.addnlvalidation)	{	  	str =" var ret = "+this.addnlvalidation+"()";	  	eval(str);    		if(!ret) { 			return ret;		}	}	return true;}function add_validation(itemname,descriptor,errstr){  if(!this.formobj)	{	  //alert("BUG: the form object is not set properly");		return;	}//if	var itemobj = this.formobj[itemname];  if(!itemobj)	{	  //alert("BUG: Couldnot get the input object named: "+itemname);		return;	}	if(!itemobj.validationset)	{	  itemobj.validationset = new ValidationSet(itemobj);	}  	itemobj.validationset.add(descriptor,errstr);  	  	// guardo un respaldo de la validación  	if (! _validations[itemname]) {  		_validations[itemname] = new ValidationSet(itemobj);  	}  	_validations[itemname].add(descriptor,errstr);}function ValidationDesc(inputitem,desc,error){  this.desc=desc;	this.error=error;	this.itemobj = inputitem;	this.validate=vdesc_validate;}function vdesc_validate(){	if (!this.itemobj.disabled) {		if(!V2validateData(this.desc,this.itemobj,this.error)) 		{ 			var campo = this.itemobj;			var id = campo.id;			if (id == "") {				id = campo.name;			}			var campoVis = document.getElementById(id+"Vis");						// marco el campo con error			if (campo.style.display!="none" && (campoVis==null || typeof(campoVis)=="undefined")) {				campo.focus();				marcarCampo(id, campo.style.backgroundColor, "#999999", 1);			} else {				campo = document.getElementById(id+"Vis");				if (campo!=null && typeof(campo)!="undefined") {					campo.focus();					marcarCampo(id+"Vis", campo.style.backgroundColor, "#999999", 1);				}			}			return false; 		}	}	return true;}function ValidationSet(inputitem){    this.vSet=new Array();	this.add= add_validationdesc;	this.validate= vset_validate;	this.itemobj = inputitem;}function add_validationdesc(desc,error){  this.vSet[this.vSet.length]= 	  new ValidationDesc(this.itemobj,desc,error);}function vset_validate(){   for(var itr=0;itr<this.vSet.length;itr++)	 {	   if(!this.vSet[itr].validate())		 {		   return false;		 }	 }	 return true;}function V2validateData(strValidateStr,objValue,strError) {     var epos = strValidateStr.search("=");     var  command  = "";     var  cmdvalue = "";     if(epos >= 0)     {      command  = strValidateStr.substring(0,epos);      cmdvalue = strValidateStr.substr(epos+1);     }     else     {      command = strValidateStr;     }     switch(command)     {         case "req":         case "required":          {            if(eval(objValue.value.trim().length) == 0)            {               if(!strError || strError.length ==0)               {                 strError = objValue.name + " : Required Field";               }//if               alert(strError);               return false;            }//if            break;                      }//case required         case "maxlength":         case "maxlen":           {              if(eval(objValue.value.length) >  eval(cmdvalue))              {                if(!strError || strError.length ==0)                {                  strError = objValue.name + " : "+cmdvalue+" characters maximum ";                }//if                //alert(strError + "\n[Current length = " + objValue.value.length + " ]");                alert(strError);               return false;              }//if              break;           }//case maxlen         case "minlength":         case "minlen":            {              if(eval(objValue.value.length) <  eval(cmdvalue))              {                if(!strError || strError.length ==0)                {                  strError = objValue.name + " : " + cmdvalue + " characters minimum  ";                }//if                              //alert(strError + "\n[Current length = " + objValue.value.length + " ]");                alert(strError);               return false;                              }//if              break;             }//case minlen         case "alnum":         case "alphanumeric":            {               var charpos = objValue.value.search("[^A-Za-z0-9]");               if(objValue.value.length > 0 &&  charpos >= 0)               {                if(!strError || strError.length ==0)                 {                   strError = objValue.name+": Only alpha-numeric characters allowed ";                 }//if                 //alert(strError + "\n [Error character position " + eval(charpos+1)+"]");                 alert(strError);                return false;               }//if               break;            }//case alphanumeric         case "num":         case "numeric":            {               //var charpos = objValue.value.search("[^0-9]");               //if(objValue.value.length > 0 &&  charpos >= 0)               if (objValue.value.length > 0 &&  !isNumber(objValue.value))              {                 if(!strError || strError.length ==0)                 {                   strError = objValue.name+": Only digits allowed ";                 }//if                               //alert(strError + "\n [Error character position " + eval(charpos+1)+"]");                 alert(strError);                return false;               }//if               break;                          }//numeric         case "alphabetic":         case "alpha":            {               var charpos = objValue.value.search("[^A-Za-z]");               if(objValue.value.length > 0 &&  charpos >= 0)               {                   if(!strError || strError.length ==0)                 {                   strError = objValue.name+": Only alphabetic characters allowed ";                 }//if                                             //alert(strError + "\n [Error character position " + eval(charpos+1)+"]");                 alert(strError);                return false;               }//if               break;            }//alpha 		case "alnumhyphen":			{              var charpos = objValue.value.search("[^A-Za-z0-9\-_]");               if(objValue.value.length > 0 &&  charpos >= 0)               {                   if(!strError || strError.length ==0)                 {                   strError = objValue.name+": characters allowed are A-Z,a-z,0-9,- and _";                 }//if                                             //alert(strError + "\n [Error character position " + eval(charpos+1)+"]");                 alert(strError);                return false;               }//if 						break;			}        case "email":           {                if(!validateEmailv2(objValue.value))                {                  if(!strError || strError.length ==0)                  {                     strError = objValue.name+": Enter a valid Email address ";                  }//if                                                                alert(strError);                  return false;                }//if            break;           }//case email         case "lt":         case "lessthan":          {             if(isNaN(objValue.value))             {               alert(objValue.name+": Debería ser un valor numérico ");               return false;             }//if             if(eval(objValue.value) >=  eval(cmdvalue))             {               if(!strError || strError.length ==0)               {                 strError = objValue.name + " : value should be less than "+ cmdvalue;               }//if                             alert(strError);               return false;                              }//if                         break;          }//case lessthan         case "gt":         case "greaterthan":          {             if(isNaN(objValue.value))             {               alert(objValue.name+": Debería ser un valor numérico ");               return false;             }//if              if(eval(objValue.value) <=  eval(cmdvalue))              {                if(!strError || strError.length ==0)                {                  strError = objValue.name + " : value should be greater than "+ cmdvalue;                }//if                              alert(strError);                return false;                              }//if                         break;          }//case greaterthan         case "regexp":          { 		 	if(objValue.value.length > 0)			{	            if(!objValue.value.match(cmdvalue)) 	            { 	              if(!strError || strError.length ==0) 	              { 	                strError = objValue.name+": Invalid characters found "; 	              }//if                                                               	              alert(strError); 	              return false;                   	            }//if 			}           break;          }//case regexp         case "dontselect":          {             if(objValue.selectedIndex == null)             {               alert("BUG: dontselect command for non-select Item");               return false;             }             if(objValue.selectedIndex == eval(cmdvalue))             {              if(!strError || strError.length ==0)               {               strError = objValue.name+": Please Select one option ";               }//if                                                                             alert(strError);               return false;                                                }              break;          }//case dontselect          case "dategt":         case "dategreaterthan":         {         		var id1 = objValue.id;         		if (id1 == "") {         			id1 = objValue.name;         		}         		var id2 = cmdvalue;         		var cmp = compareDates(id1, id2);         		if (cmp <= 0) {         			alert(strError);         			return false;         		}         		break;         }// case dategt         case "dategte":         case "dategreaterthanequal":         {         		var id1 = objValue.id;         		if (id1 == "") {         			id1 = objValue.name;         		}         		var id2 = cmdvalue;         		var cmp = compareDates(id1, id2);         		if (cmp < 0) {         			alert(strError);         			return false;         		}         		break;         }// case dategte         case "datelt":         case "datelessthan":         {         		var id1 = objValue.id;         		if (id1 == "") {         			id1 = objValue.name;         		}         		var id2 = cmdvalue;         		var cmp = compareDates(id1, id2);         		if (cmp >= 0) {         			alert(strError);         			return false;         		}         		break;         }// case datelt         case "datelte":         case "datelessthanequal":         {         		var id1 = objValue.id;         		if (id1 == "") {         			id1 = objValue.name;         		}         		var id2 = cmdvalue;         		var cmp = compareDates(id1, id2);         		if (cmp > 0) {         			alert(strError);         			return false;         		}         		break;         }// case datelt    }//switch     return true; }//----------------------------------------------------------------------//---------- FUNCIONES DE VALIDACIÓN ------------------//----------------------------------------------------------------------function validateEmailv2(email){// a very simple email validation checking. // you can add more complex email checking if it helps     if(email.length <= 0)	{	  return true;	}    var splitted = email.match("^(.+)@(.+)$");    if(splitted == null) return false;    if(splitted[1] != null )    {      var regexp_user=/^\"?[\w-_\.]*\"?$/;      if(splitted[1].match(regexp_user) == null) return false;    }    if(splitted[2] != null)    {      var regexp_domain=/^[\w-\.]*\.[A-Za-z]{2,4}$/;      if(splitted[2].match(regexp_domain) == null)       {	    var regexp_ip =/^\[\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\]$/;	    if(splitted[2].match(regexp_ip) == null) return false;      }// if      return true;    }return false;}function compareDates(id1, id2) {	var dojoCampo1 = dijit.byId(id1);	var dojoCampo2 = dijit.byId(id2);	if (dojoCampo1 != null && typeof(dojoCampo1) != "undefined" && dojoCampo2 != null && typeof(dojoCampo2) != "undefined") {		// tengo 2 campos dojo, supuestamente de tipo DateTextBox (sino dará un error al compararlos)		return dojoCampo1.compare(dojoCampo1.getValue(), dojoCampo2.getValue(), "date");	} else {		var value1 = document.getElementById(id1).value;		var date1 = parseDate(value1);		var value2 = document.getElementById(id2).value;		var date2tmp = parseDate(value2);		var date2 = new Date();				date2.setTime(date1.getTime());		date2.setDate(date2tmp.getDate());		date2.setMonth(date2tmp.getMonth());		date2.setFullYear(date2tmp.getFullYear());				if (date1.getTime() < date2.getTime()) {			return -1;		} else if (date1.getTime() > date2.getTime()) {			return 1;		}		return 0;	}}function parseDate(str) {	var separator = " ";	if (str.indexOf("-") != -1) {		separator = "-";	} else if (str.indexOf("/") != -1) {		separator = "/";	}		var index = str.indexOf(separator);	var days = parseInt(str.substring(0, index));	str = str.substring(index+1);		var index = str.indexOf(separator);	var months = parseInt(str.substring(0, index));	str = str.substring(index+1);	if (str.charAt(0) == '0') {		str = str.substring(1);	}	var year = parseInt(str);	if (str.length < 4) {		year = year + 2000;	}		var d = new Date();	d.setSeconds(0);	d.setMinutes(0);	d.setHours(0);	d.setDate(days);	d.setMonth(months - 1);	d.setFullYear(year);		return d;}/*	Copyright 2003 JavaScript-coder.com. All rights reserved.*///----------------------------------------------//---------- AGREGADO ------------------//----------------------------------------------function chequeoDijit(campo,id) {	if (campo.value != "" && (campo.getAttribute("dojoAttachPoint")!="" || (campo.outerHTML && campo.outerHTML.indexOf("dojoAttachPoint")!=-1))) {		if (dijit.byId(id) != null && typeof(dijit.byId(id))!="undefined") {			if (dijit.byId(id).isValid != null && typeof(dijit.byId(id).isValid)!="undefined") {				if (!dijit.byId(id).isValid()) {					return false;				}			}		}	}	return true;}function pasoDijit() {	var campos = document.getElementsByTagName("input");	for (var i=0; i<campos.length; i++) {		// recorro los campos de tipo input		var campo=campos[i];		if (campo != null && typeof(campo) != "undefined") {			// si el campo existe...			if (campo.type != "hidden" && !campo.disabled) {				// si el campo no es hiden y no está deshabilitado...				var id = campo.id;				if (id == "") {					id = campo.name;				}				if (dijit.byId(id+"Vis") != null && typeof(dijit.byId(id+"Vis"))!="undefined") {					// si puedo obtener el objeto dojo de la vista...					campo.value = dijit.byId(id+"Vis").getDisplayedValue();					if (_validations[id] && _validations[id].itemobj) {						_validations[id].itemobj.value = dijit.byId(id+"Vis").getDisplayedValue();					}				}								// chequeo mediante dojo				if (!chequeoDijit(campo, id)) {					alert("El formato del campo no es correcto");					if (dijit.byId(id+"Vis") != null && typeof(dijit.byId(id+"Vis"))!="undefined") {						id = id+"Vis";						campo = document.getElementById(id);					}					campo.focus();					marcarCampo(id, campo.style.backgroundColor, "#999999", 1);					return false;				}			}		}	}	return true;}function marcarCampo(id, colorFondoOriginal, colorFondo, count) {	var campo = document.getElementById(id);	if (count <= 4) {		if ((count%2) == 1) {			campo.style.backgroundColor = colorFondo;		} else {			campo.style.backgroundColor = colorFondoOriginal;		}		count = count+1;		setTimeout("marcarCampo('"+id+"', '"+colorFondoOriginal+"', '"+colorFondo+"', "+count+")",200);	}}